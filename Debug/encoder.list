
encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008900  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008a88  08008a88  00018a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aa4  08008aa4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008aa4  08008aa4  00018aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008aac  08008aac  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008aac  08008aac  00018aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ab0  08008ab0  00018ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008ac  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000093c  2000093c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f4f7  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f5b  00000000  00000000  0003f5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  00043518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001500  00000000  00000000  00044b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002499a  00000000  00000000  00046098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c8a9  00000000  00000000  0006aa32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3cb2  00000000  00000000  000872db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015af8d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006188  00000000  00000000  0015afe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a70 	.word	0x08008a70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008a70 	.word	0x08008a70

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fe4c 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f91c 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 faa6 	bl	8000a1c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f982 	bl	80007d8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f9ae 	bl	8000834 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f9dc 	bl	8000894 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004dc:	f007 feb6 	bl	800824c <MX_USB_HOST_Init>
  MX_TIM1_Init();
 80004e0:	f000 fa0e 	bl	8000900 <MX_TIM1_Init>
  MX_TIM7_Init();
 80004e4:	f000 fa64 	bl	80009b0 <MX_TIM7_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 80004e8:	2100      	movs	r1, #0
 80004ea:	4881      	ldr	r0, [pc, #516]	; (80006f0 <main+0x230>)
 80004ec:	f004 fce3 	bl	8004eb6 <HAL_TIM_Encoder_Start>

  while (1)
  {
	  switch (klick)
 80004f0:	4b80      	ldr	r3, [pc, #512]	; (80006f4 <main+0x234>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	f200 80f7 	bhi.w	80006e8 <main+0x228>
 80004fa:	a201      	add	r2, pc, #4	; (adr r2, 8000500 <main+0x40>)
 80004fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000500:	08000511 	.word	0x08000511
 8000504:	08000587 	.word	0x08000587
 8000508:	080005fd 	.word	0x080005fd
 800050c:	08000673 	.word	0x08000673
	  {
	  	  case 0:
	  		  HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000516:	4878      	ldr	r0, [pc, #480]	; (80006f8 <main+0x238>)
 8000518:	f001 f97e 	bl	8001818 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000522:	4875      	ldr	r0, [pc, #468]	; (80006f8 <main+0x238>)
 8000524:	f001 f978 	bl	8001818 <HAL_GPIO_WritePin>

	  		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000528:	4b71      	ldr	r3, [pc, #452]	; (80006f0 <main+0x230>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2200      	movs	r2, #0
 800052e:	625a      	str	r2, [r3, #36]	; 0x24

	  		  while(klick == 0)
 8000530:	e024      	b.n	800057c <main+0xbc>
	  		  {
	  			  currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8000532:	4b6f      	ldr	r3, [pc, #444]	; (80006f0 <main+0x230>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000538:	461a      	mov	r2, r3
 800053a:	4b70      	ldr	r3, [pc, #448]	; (80006fc <main+0x23c>)
 800053c:	601a      	str	r2, [r3, #0]
	  			  currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 800053e:	4b6f      	ldr	r3, [pc, #444]	; (80006fc <main+0x23c>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3b01      	subs	r3, #1
 8000544:	b29b      	uxth	r3, r3
 8000546:	0fda      	lsrs	r2, r3, #31
 8000548:	4413      	add	r3, r2
 800054a:	105b      	asrs	r3, r3, #1
 800054c:	425b      	negs	r3, r3
 800054e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8000552:	337f      	adds	r3, #127	; 0x7f
 8000554:	4a69      	ldr	r2, [pc, #420]	; (80006fc <main+0x23c>)
 8000556:	6013      	str	r3, [r2, #0]

	  			  if(currCounter != prevCounter)
 8000558:	4b68      	ldr	r3, [pc, #416]	; (80006fc <main+0x23c>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b68      	ldr	r3, [pc, #416]	; (8000700 <main+0x240>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	429a      	cmp	r2, r3
 8000562:	d00b      	beq.n	800057c <main+0xbc>
	  			  {
	  				  if(currCounter > 100)
 8000564:	4b65      	ldr	r3, [pc, #404]	; (80006fc <main+0x23c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b64      	cmp	r3, #100	; 0x64
 800056a:	dd03      	ble.n	8000574 <main+0xb4>
	  				  {
	  					  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800056c:	4b60      	ldr	r3, [pc, #384]	; (80006f0 <main+0x230>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2200      	movs	r2, #0
 8000572:	625a      	str	r2, [r3, #36]	; 0x24
	  				  }

	  				  prevCounter = currCounter;
 8000574:	4b61      	ldr	r3, [pc, #388]	; (80006fc <main+0x23c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a61      	ldr	r2, [pc, #388]	; (8000700 <main+0x240>)
 800057a:	6013      	str	r3, [r2, #0]
	  		  while(klick == 0)
 800057c:	4b5d      	ldr	r3, [pc, #372]	; (80006f4 <main+0x234>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d0d6      	beq.n	8000532 <main+0x72>

	  			  }
	  		  }

	  		  break;
 8000584:	e0b0      	b.n	80006e8 <main+0x228>

	  	  case 1:
	  		  HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800058c:	485a      	ldr	r0, [pc, #360]	; (80006f8 <main+0x238>)
 800058e:	f001 f943 	bl	8001818 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000598:	4857      	ldr	r0, [pc, #348]	; (80006f8 <main+0x238>)
 800059a:	f001 f93d 	bl	8001818 <HAL_GPIO_WritePin>

	  		  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800059e:	4b54      	ldr	r3, [pc, #336]	; (80006f0 <main+0x230>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2200      	movs	r2, #0
 80005a4:	625a      	str	r2, [r3, #36]	; 0x24

	  		 while(klick == 1)
 80005a6:	e024      	b.n	80005f2 <main+0x132>
	  		 {
	  			 currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 80005a8:	4b51      	ldr	r3, [pc, #324]	; (80006f0 <main+0x230>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ae:	461a      	mov	r2, r3
 80005b0:	4b52      	ldr	r3, [pc, #328]	; (80006fc <main+0x23c>)
 80005b2:	601a      	str	r2, [r3, #0]
	  			 currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80005b4:	4b51      	ldr	r3, [pc, #324]	; (80006fc <main+0x23c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	0fda      	lsrs	r2, r3, #31
 80005be:	4413      	add	r3, r2
 80005c0:	105b      	asrs	r3, r3, #1
 80005c2:	425b      	negs	r3, r3
 80005c4:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80005c8:	337f      	adds	r3, #127	; 0x7f
 80005ca:	4a4c      	ldr	r2, [pc, #304]	; (80006fc <main+0x23c>)
 80005cc:	6013      	str	r3, [r2, #0]

	  			 if(currCounter != prevCounter)
 80005ce:	4b4b      	ldr	r3, [pc, #300]	; (80006fc <main+0x23c>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	4b4b      	ldr	r3, [pc, #300]	; (8000700 <main+0x240>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d00b      	beq.n	80005f2 <main+0x132>
	  			 {
	  				 if(currCounter > 10)
 80005da:	4b48      	ldr	r3, [pc, #288]	; (80006fc <main+0x23c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b0a      	cmp	r3, #10
 80005e0:	dd03      	ble.n	80005ea <main+0x12a>
	  				 {
	  					 __HAL_TIM_SET_COUNTER(&htim1, 0);
 80005e2:	4b43      	ldr	r3, [pc, #268]	; (80006f0 <main+0x230>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24
	  				 }

	  				 prevCounter = currCounter;
 80005ea:	4b44      	ldr	r3, [pc, #272]	; (80006fc <main+0x23c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a44      	ldr	r2, [pc, #272]	; (8000700 <main+0x240>)
 80005f0:	6013      	str	r3, [r2, #0]
	  		 while(klick == 1)
 80005f2:	4b40      	ldr	r3, [pc, #256]	; (80006f4 <main+0x234>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d0d6      	beq.n	80005a8 <main+0xe8>

	  			 }
	  		 }

	  		  break;
 80005fa:	e075      	b.n	80006e8 <main+0x228>

	  	  case 2:
	  		 HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000602:	483d      	ldr	r0, [pc, #244]	; (80006f8 <main+0x238>)
 8000604:	f001 f908 	bl	8001818 <HAL_GPIO_WritePin>
	  		 HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060e:	483a      	ldr	r0, [pc, #232]	; (80006f8 <main+0x238>)
 8000610:	f001 f902 	bl	8001818 <HAL_GPIO_WritePin>

	  		 __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000614:	4b36      	ldr	r3, [pc, #216]	; (80006f0 <main+0x230>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2200      	movs	r2, #0
 800061a:	625a      	str	r2, [r3, #36]	; 0x24

	  		 while(klick == 2)
 800061c:	e024      	b.n	8000668 <main+0x1a8>
	  		 {
	  			 currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 800061e:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <main+0x230>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000624:	461a      	mov	r2, r3
 8000626:	4b35      	ldr	r3, [pc, #212]	; (80006fc <main+0x23c>)
 8000628:	601a      	str	r2, [r3, #0]
	  			 currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 800062a:	4b34      	ldr	r3, [pc, #208]	; (80006fc <main+0x23c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	3b01      	subs	r3, #1
 8000630:	b29b      	uxth	r3, r3
 8000632:	0fda      	lsrs	r2, r3, #31
 8000634:	4413      	add	r3, r2
 8000636:	105b      	asrs	r3, r3, #1
 8000638:	425b      	negs	r3, r3
 800063a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800063e:	337f      	adds	r3, #127	; 0x7f
 8000640:	4a2e      	ldr	r2, [pc, #184]	; (80006fc <main+0x23c>)
 8000642:	6013      	str	r3, [r2, #0]

	  			 if(currCounter != prevCounter)
 8000644:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <main+0x23c>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <main+0x240>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	429a      	cmp	r2, r3
 800064e:	d00b      	beq.n	8000668 <main+0x1a8>
	  			 {
	  				 if(currCounter > 31)
 8000650:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <main+0x23c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b1f      	cmp	r3, #31
 8000656:	dd03      	ble.n	8000660 <main+0x1a0>
	  				 {
	  					 __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000658:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <main+0x230>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2200      	movs	r2, #0
 800065e:	625a      	str	r2, [r3, #36]	; 0x24
	  				 }

	  				 prevCounter = currCounter;
 8000660:	4b26      	ldr	r3, [pc, #152]	; (80006fc <main+0x23c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a26      	ldr	r2, [pc, #152]	; (8000700 <main+0x240>)
 8000666:	6013      	str	r3, [r2, #0]
	  		 while(klick == 2)
 8000668:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <main+0x234>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b02      	cmp	r3, #2
 800066e:	d0d6      	beq.n	800061e <main+0x15e>

	  			 }
	  		 }
	  		 break;
 8000670:	e03a      	b.n	80006e8 <main+0x228>

	  	  case 3:
	  		  HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000678:	481f      	ldr	r0, [pc, #124]	; (80006f8 <main+0x238>)
 800067a:	f001 f8cd 	bl	8001818 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000684:	481c      	ldr	r0, [pc, #112]	; (80006f8 <main+0x238>)
 8000686:	f001 f8c7 	bl	8001818 <HAL_GPIO_WritePin>

	  		  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <main+0x230>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2200      	movs	r2, #0
 8000690:	625a      	str	r2, [r3, #36]	; 0x24

	  		  while(klick == 3)
 8000692:	e024      	b.n	80006de <main+0x21e>
	  		  {
	  			  currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <main+0x230>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069a:	461a      	mov	r2, r3
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <main+0x23c>)
 800069e:	601a      	str	r2, [r3, #0]
	  			  currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <main+0x23c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	0fda      	lsrs	r2, r3, #31
 80006aa:	4413      	add	r3, r2
 80006ac:	105b      	asrs	r3, r3, #1
 80006ae:	425b      	negs	r3, r3
 80006b0:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80006b4:	337f      	adds	r3, #127	; 0x7f
 80006b6:	4a11      	ldr	r2, [pc, #68]	; (80006fc <main+0x23c>)
 80006b8:	6013      	str	r3, [r2, #0]

	  			  if(currCounter != prevCounter)
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <main+0x23c>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <main+0x240>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d00b      	beq.n	80006de <main+0x21e>
	  			  {
	  				  if(currCounter > 20)
 80006c6:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <main+0x23c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b14      	cmp	r3, #20
 80006cc:	dd03      	ble.n	80006d6 <main+0x216>
	  				  {
	  					  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <main+0x230>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2200      	movs	r2, #0
 80006d4:	625a      	str	r2, [r3, #36]	; 0x24
	  				  }

	  				  prevCounter = currCounter;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <main+0x23c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a09      	ldr	r2, [pc, #36]	; (8000700 <main+0x240>)
 80006dc:	6013      	str	r3, [r2, #0]
	  		  while(klick == 3)
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <main+0x234>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	d0d6      	beq.n	8000694 <main+0x1d4>

	  			  }
	  		  }
	  		  break;
 80006e6:	bf00      	nop
	  }

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80006e8:	f007 fdd6 	bl	8008298 <MX_USB_HOST_Process>
	  switch (klick)
 80006ec:	e700      	b.n	80004f0 <main+0x30>
 80006ee:	bf00      	nop
 80006f0:	2000011c 	.word	0x2000011c
 80006f4:	200000b4 	.word	0x200000b4
 80006f8:	40020c00 	.word	0x40020c00
 80006fc:	200000ac 	.word	0x200000ac
 8000700:	200000b0 	.word	0x200000b0

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2230      	movs	r2, #48	; 0x30
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f008 f8dc 	bl	80088d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <SystemClock_Config+0xcc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a27      	ldr	r2, [pc, #156]	; (80007d0 <SystemClock_Config+0xcc>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <SystemClock_Config+0xcc>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <SystemClock_Config+0xd0>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <SystemClock_Config+0xd0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000760:	2301      	movs	r3, #1
 8000762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000778:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800077c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077e:	2302      	movs	r3, #2
 8000780:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000782:	2307      	movs	r3, #7
 8000784:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	4618      	mov	r0, r3
 800078c:	f003 fbd6 	bl	8003f3c <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000796:	f000 fa55 	bl	8000c44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2302      	movs	r3, #2
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2105      	movs	r1, #5
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fe37 	bl	800442c <HAL_RCC_ClockConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007c4:	f000 fa3e 	bl	8000c44 <Error_Handler>
  }
}
 80007c8:	bf00      	nop
 80007ca:	3750      	adds	r7, #80	; 0x50
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C1_Init+0x50>)
 80007de:	4a13      	ldr	r2, [pc, #76]	; (800082c <MX_I2C1_Init+0x54>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_I2C1_Init+0x50>)
 80007e4:	4a12      	ldr	r2, [pc, #72]	; (8000830 <MX_I2C1_Init+0x58>)
 80007e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C1_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_I2C1_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_I2C1_Init+0x50>)
 80007f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_I2C1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_I2C1_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_I2C1_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_I2C1_Init+0x50>)
 8000816:	f002 fdad 	bl	8003374 <HAL_I2C_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000820:	f000 fa10 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000c8 	.word	0x200000c8
 800082c:	40005400 	.word	0x40005400
 8000830:	000186a0 	.word	0x000186a0

08000834 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_I2S3_Init+0x54>)
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <MX_I2S3_Init+0x58>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_I2S3_Init+0x54>)
 8000840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000844:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_I2S3_Init+0x54>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_I2S3_Init+0x54>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <MX_I2S3_Init+0x54>)
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_I2S3_Init+0x54>)
 800085c:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <MX_I2S3_Init+0x5c>)
 800085e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_I2S3_Init+0x54>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_I2S3_Init+0x54>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_I2S3_Init+0x54>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_I2S3_Init+0x54>)
 8000874:	f002 fec2 	bl	80035fc <HAL_I2S_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800087e:	f000 f9e1 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000204 	.word	0x20000204
 800088c:	40003c00 	.word	0x40003c00
 8000890:	00017700 	.word	0x00017700

08000894 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_SPI1_Init+0x64>)
 800089a:	4a18      	ldr	r2, [pc, #96]	; (80008fc <MX_SPI1_Init+0x68>)
 800089c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008e0:	220a      	movs	r2, #10
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008e6:	f004 f8c9 	bl	8004a7c <HAL_SPI_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008f0:	f000 f9a8 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000164 	.word	0x20000164
 80008fc:	40013000 	.word	0x40013000

08000900 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08c      	sub	sp, #48	; 0x30
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	2224      	movs	r2, #36	; 0x24
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f007 ffde 	bl	80088d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800091c:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <MX_TIM1_Init+0xa8>)
 800091e:	4a23      	ldr	r2, [pc, #140]	; (80009ac <MX_TIM1_Init+0xac>)
 8000920:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000922:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <MX_TIM1_Init+0xa8>)
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <MX_TIM1_Init+0xa8>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800092e:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <MX_TIM1_Init+0xa8>)
 8000930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000934:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <MX_TIM1_Init+0xa8>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_TIM1_Init+0xa8>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_TIM1_Init+0xa8>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000948:	2301      	movs	r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000950:	2301      	movs	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000960:	2301      	movs	r3, #1
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	4619      	mov	r1, r3
 8000972:	480d      	ldr	r0, [pc, #52]	; (80009a8 <MX_TIM1_Init+0xa8>)
 8000974:	f004 f9f9 	bl	8004d6a <HAL_TIM_Encoder_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800097e:	f000 f961 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	; (80009a8 <MX_TIM1_Init+0xa8>)
 8000990:	f004 fd20 	bl	80053d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800099a:	f000 f953 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	3730      	adds	r7, #48	; 0x30
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000011c 	.word	0x2000011c
 80009ac:	40010000 	.word	0x40010000

080009b0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b6:	463b      	mov	r3, r7
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_TIM7_Init+0x64>)
 80009c0:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <MX_TIM7_Init+0x68>)
 80009c2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84;
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_TIM7_Init+0x64>)
 80009c6:	2254      	movs	r2, #84	; 0x54
 80009c8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_TIM7_Init+0x64>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_TIM7_Init+0x64>)
 80009d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80009d6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_TIM7_Init+0x64>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80009de:	480d      	ldr	r0, [pc, #52]	; (8000a14 <MX_TIM7_Init+0x64>)
 80009e0:	f004 f8d5 	bl	8004b8e <HAL_TIM_Base_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80009ea:	f000 f92b 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80009ee:	2310      	movs	r3, #16
 80009f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <MX_TIM7_Init+0x64>)
 80009fc:	f004 fcea 	bl	80053d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000a06:	f000 f91d 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200001bc 	.word	0x200001bc
 8000a18:	40001400 	.word	0x40001400

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
 8000a36:	4b7d      	ldr	r3, [pc, #500]	; (8000c2c <MX_GPIO_Init+0x210>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a7c      	ldr	r2, [pc, #496]	; (8000c2c <MX_GPIO_Init+0x210>)
 8000a3c:	f043 0310 	orr.w	r3, r3, #16
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b7a      	ldr	r3, [pc, #488]	; (8000c2c <MX_GPIO_Init+0x210>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	61bb      	str	r3, [r7, #24]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	4b76      	ldr	r3, [pc, #472]	; (8000c2c <MX_GPIO_Init+0x210>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a75      	ldr	r2, [pc, #468]	; (8000c2c <MX_GPIO_Init+0x210>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b73      	ldr	r3, [pc, #460]	; (8000c2c <MX_GPIO_Init+0x210>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b6f      	ldr	r3, [pc, #444]	; (8000c2c <MX_GPIO_Init+0x210>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a6e      	ldr	r2, [pc, #440]	; (8000c2c <MX_GPIO_Init+0x210>)
 8000a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b6c      	ldr	r3, [pc, #432]	; (8000c2c <MX_GPIO_Init+0x210>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b68      	ldr	r3, [pc, #416]	; (8000c2c <MX_GPIO_Init+0x210>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a67      	ldr	r2, [pc, #412]	; (8000c2c <MX_GPIO_Init+0x210>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b65      	ldr	r3, [pc, #404]	; (8000c2c <MX_GPIO_Init+0x210>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b61      	ldr	r3, [pc, #388]	; (8000c2c <MX_GPIO_Init+0x210>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a60      	ldr	r2, [pc, #384]	; (8000c2c <MX_GPIO_Init+0x210>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b5e      	ldr	r3, [pc, #376]	; (8000c2c <MX_GPIO_Init+0x210>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b5a      	ldr	r3, [pc, #360]	; (8000c2c <MX_GPIO_Init+0x210>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a59      	ldr	r2, [pc, #356]	; (8000c2c <MX_GPIO_Init+0x210>)
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b57      	ldr	r3, [pc, #348]	; (8000c2c <MX_GPIO_Init+0x210>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2108      	movs	r1, #8
 8000ade:	4854      	ldr	r0, [pc, #336]	; (8000c30 <MX_GPIO_Init+0x214>)
 8000ae0:	f000 fe9a 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4852      	ldr	r0, [pc, #328]	; (8000c34 <MX_GPIO_Init+0x218>)
 8000aea:	f000 fe95 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000aee:	2200      	movs	r2, #0
 8000af0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000af4:	4850      	ldr	r0, [pc, #320]	; (8000c38 <MX_GPIO_Init+0x21c>)
 8000af6:	f000 fe8f 	bl	8001818 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000afa:	2308      	movs	r3, #8
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4847      	ldr	r0, [pc, #284]	; (8000c30 <MX_GPIO_Init+0x214>)
 8000b12:	f000 fccd 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4841      	ldr	r0, [pc, #260]	; (8000c34 <MX_GPIO_Init+0x218>)
 8000b2e:	f000 fcbf 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b32:	2308      	movs	r3, #8
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b42:	2305      	movs	r3, #5
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4839      	ldr	r0, [pc, #228]	; (8000c34 <MX_GPIO_Init+0x218>)
 8000b4e:	f000 fcaf 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b52:	2301      	movs	r3, #1
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b56:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4835      	ldr	r0, [pc, #212]	; (8000c3c <MX_GPIO_Init+0x220>)
 8000b68:	f000 fca2 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4830      	ldr	r0, [pc, #192]	; (8000c40 <MX_GPIO_Init+0x224>)
 8000b80:	f000 fc96 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 8000b84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4825      	ldr	r0, [pc, #148]	; (8000c30 <MX_GPIO_Init+0x214>)
 8000b9c:	f000 fc88 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bb2:	2305      	movs	r3, #5
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4820      	ldr	r0, [pc, #128]	; (8000c40 <MX_GPIO_Init+0x224>)
 8000bbe:	f000 fc77 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bc2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000bc6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4817      	ldr	r0, [pc, #92]	; (8000c38 <MX_GPIO_Init+0x21c>)
 8000bdc:	f000 fc68 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000be0:	2320      	movs	r3, #32
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4811      	ldr	r0, [pc, #68]	; (8000c38 <MX_GPIO_Init+0x21c>)
 8000bf4:	f000 fc5c 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bfc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4808      	ldr	r0, [pc, #32]	; (8000c30 <MX_GPIO_Init+0x214>)
 8000c0e:	f000 fc4f 	bl	80014b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2028      	movs	r0, #40	; 0x28
 8000c18:	f000 fc13 	bl	8001442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c1c:	2028      	movs	r0, #40	; 0x28
 8000c1e:	f000 fc2c 	bl	800147a <HAL_NVIC_EnableIRQ>

}
 8000c22:	bf00      	nop
 8000c24:	3730      	adds	r7, #48	; 0x30
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40020800 	.word	0x40020800
 8000c38:	40020c00 	.word	0x40020c00
 8000c3c:	40020000 	.word	0x40020000
 8000c40:	40020400 	.word	0x40020400

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <Error_Handler+0x8>
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c64:	6453      	str	r3, [r2, #68]	; 0x44
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c8e:	2007      	movs	r0, #7
 8000c90:	f000 fbcc 	bl	800142c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <HAL_I2C_MspInit+0x84>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d12c      	bne.n	8000d1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cde:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce4:	2312      	movs	r3, #18
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480c      	ldr	r0, [pc, #48]	; (8000d2c <HAL_I2C_MspInit+0x8c>)
 8000cfc:	f000 fbd8 	bl	80014b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000d0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d1c:	bf00      	nop
 8000d1e:	3728      	adds	r7, #40	; 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40005400 	.word	0x40005400
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020400 	.word	0x40020400

08000d30 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08e      	sub	sp, #56	; 0x38
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a31      	ldr	r2, [pc, #196]	; (8000e20 <HAL_I2S_MspInit+0xf0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d15a      	bne.n	8000e16 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d60:	2301      	movs	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d64:	23c0      	movs	r3, #192	; 0xc0
 8000d66:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4618      	mov	r0, r3
 8000d72:	f003 fd43 	bl	80047fc <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d7c:	f7ff ff62 	bl	8000c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <HAL_I2S_MspInit+0xf4>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	4a26      	ldr	r2, [pc, #152]	; (8000e24 <HAL_I2S_MspInit+0xf4>)
 8000d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d90:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <HAL_I2S_MspInit+0xf4>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <HAL_I2S_MspInit+0xf4>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <HAL_I2S_MspInit+0xf4>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <HAL_I2S_MspInit+0xf4>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <HAL_I2S_MspInit+0xf4>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	4a18      	ldr	r2, [pc, #96]	; (8000e24 <HAL_I2S_MspInit+0xf4>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <HAL_I2S_MspInit+0xf4>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000de4:	2306      	movs	r3, #6
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	480e      	ldr	r0, [pc, #56]	; (8000e28 <HAL_I2S_MspInit+0xf8>)
 8000df0:	f000 fb5e 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000df4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e06:	2306      	movs	r3, #6
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4806      	ldr	r0, [pc, #24]	; (8000e2c <HAL_I2S_MspInit+0xfc>)
 8000e12:	f000 fb4d 	bl	80014b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3738      	adds	r7, #56	; 0x38
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40003c00 	.word	0x40003c00
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	40020800 	.word	0x40020800

08000e30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a19      	ldr	r2, [pc, #100]	; (8000eb4 <HAL_SPI_MspInit+0x84>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d12b      	bne.n	8000eaa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_SPI_MspInit+0x88>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <HAL_SPI_MspInit+0x88>)
 8000e5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e60:	6453      	str	r3, [r2, #68]	; 0x44
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_SPI_MspInit+0x88>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_SPI_MspInit+0x88>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <HAL_SPI_MspInit+0x88>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_SPI_MspInit+0x88>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e8a:	23e0      	movs	r3, #224	; 0xe0
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e9a:	2305      	movs	r3, #5
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <HAL_SPI_MspInit+0x8c>)
 8000ea6:	f000 fb03 	bl	80014b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40013000 	.word	0x40013000
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a19      	ldr	r2, [pc, #100]	; (8000f44 <HAL_TIM_Encoder_MspInit+0x84>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d12c      	bne.n	8000f3c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a17      	ldr	r2, [pc, #92]	; (8000f48 <HAL_TIM_Encoder_MspInit+0x88>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f08:	f043 0310 	orr.w	r3, r3, #16
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0310 	and.w	r3, r3, #16
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000f1a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x8c>)
 8000f38:	f000 faba 	bl	80014b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	; 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40010000 	.word	0x40010000
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40021000 	.word	0x40021000

08000f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <HAL_TIM_Base_MspInit+0x48>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d115      	bne.n	8000f8e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_TIM_Base_MspInit+0x4c>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	4a0c      	ldr	r2, [pc, #48]	; (8000f9c <HAL_TIM_Base_MspInit+0x4c>)
 8000f6c:	f043 0320 	orr.w	r3, r3, #32
 8000f70:	6413      	str	r3, [r2, #64]	; 0x40
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_TIM_Base_MspInit+0x4c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f003 0320 	and.w	r3, r3, #32
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	2037      	movs	r0, #55	; 0x37
 8000f84:	f000 fa5d 	bl	8001442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f88:	2037      	movs	r0, #55	; 0x37
 8000f8a:	f000 fa76 	bl	800147a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40001400 	.word	0x40001400
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fec:	f000 f90a 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_TIM_Base_Start_IT(&htim7);
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <EXTI15_10_IRQHandler+0x18>)
 8000ffa:	f003 fe17 	bl	8004c2c <HAL_TIM_Base_Start_IT>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC15_OSC32_OUT_Pin);
 8000ffe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001002:	f000 fc23 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200001bc 	.word	0x200001bc

08001010 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	//HAL_GPIO_TogglePin(GPIOD, LD5_Pin);


	if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)	// If button pressed
 8001014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001018:	4810      	ldr	r0, [pc, #64]	; (800105c <TIM7_IRQHandler+0x4c>)
 800101a:	f000 fbe5 	bl	80017e8 <HAL_GPIO_ReadPin>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d112      	bne.n	800104a <TIM7_IRQHandler+0x3a>
	{
		klick++;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <TIM7_IRQHandler+0x50>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <TIM7_IRQHandler+0x50>)
 800102c:	6013      	str	r3, [r2, #0]
		if(klick >= 4)
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <TIM7_IRQHandler+0x50>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b03      	cmp	r3, #3
 8001034:	dd06      	ble.n	8001044 <TIM7_IRQHandler+0x34>
		{
			klick = 0;
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <TIM7_IRQHandler+0x50>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim7);
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <TIM7_IRQHandler+0x54>)
 800103e:	f003 fe65 	bl	8004d0c <HAL_TIM_Base_Stop_IT>
 8001042:	e002      	b.n	800104a <TIM7_IRQHandler+0x3a>
		}
		else
		{
			HAL_TIM_Base_Stop_IT(&htim7);
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <TIM7_IRQHandler+0x54>)
 8001046:	f003 fe61 	bl	8004d0c <HAL_TIM_Base_Stop_IT>
		}
	}
	HAL_TIM_Base_Stop_IT(&htim7);
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <TIM7_IRQHandler+0x54>)
 800104c:	f003 fe5e 	bl	8004d0c <HAL_TIM_Base_Stop_IT>

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <TIM7_IRQHandler+0x54>)
 8001052:	f003 ffbe 	bl	8004fd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000
 8001060:	200000b4 	.word	0x200000b4
 8001064:	200001bc 	.word	0x200001bc

08001068 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */


  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <OTG_FS_IRQHandler+0x10>)
 800106e:	f000 fe7b 	bl	8001d68 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000628 	.word	0x20000628

0800107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001084:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d207      	bcs.n	80010bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ac:	f007 fbd6 	bl	800885c <__errno>
 80010b0:	4603      	mov	r3, r0
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20020000 	.word	0x20020000
 80010dc:	00000400 	.word	0x00000400
 80010e0:	200000b8 	.word	0x200000b8
 80010e4:	20000940 	.word	0x20000940

080010e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <SystemInit+0x20>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <SystemInit+0x20>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001144 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001112:	490e      	ldr	r1, [pc, #56]	; (800114c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001114:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001128:	4c0b      	ldr	r4, [pc, #44]	; (8001158 <LoopFillZerobss+0x26>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001136:	f7ff ffd7 	bl	80010e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113a:	f007 fb95 	bl	8008868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113e:	f7ff f9bf 	bl	80004c0 <main>
  bx  lr    
 8001142:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001144:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001150:	08008ab4 	.word	0x08008ab4
  ldr r2, =_sbss
 8001154:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001158:	2000093c 	.word	0x2000093c

0800115c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC_IRQHandler>
	...

08001160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <HAL_Init+0x40>)
 800116a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800116e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <HAL_Init+0x40>)
 8001176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800117a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_Init+0x40>)
 8001182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 f94f 	bl	800142c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118e:	2000      	movs	r0, #0
 8001190:	f000 f808 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001194:	f7ff fd5c 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023c00 	.word	0x40023c00

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_InitTick+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_InitTick+0x58>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f967 	bl	8001496 <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011e0:	f000 f92f 	bl	8001442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	; (8001200 <HAL_InitTick+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000004 	.word	0x20000004

08001204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008
 8001228:	2000024c 	.word	0x2000024c

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	2000024c 	.word	0x2000024c

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff ffee 	bl	800122c <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffde 	bl	800122c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012be:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60d3      	str	r3, [r2, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	db0b      	blt.n	800131a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	f003 021f 	and.w	r2, r3, #31
 8001308:	4907      	ldr	r1, [pc, #28]	; (8001328 <__NVIC_EnableIRQ+0x38>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	2001      	movs	r0, #1
 8001312:	fa00 f202 	lsl.w	r2, r0, r2
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e100 	.word	0xe000e100

0800132c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	2b00      	cmp	r3, #0
 800133e:	db0a      	blt.n	8001356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	490c      	ldr	r1, [pc, #48]	; (8001378 <__NVIC_SetPriority+0x4c>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	0112      	lsls	r2, r2, #4
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	440b      	add	r3, r1
 8001350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001354:	e00a      	b.n	800136c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4908      	ldr	r1, [pc, #32]	; (800137c <__NVIC_SetPriority+0x50>)
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	3b04      	subs	r3, #4
 8001364:	0112      	lsls	r2, r2, #4
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	440b      	add	r3, r1
 800136a:	761a      	strb	r2, [r3, #24]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	; 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f1c3 0307 	rsb	r3, r3, #7
 800139a:	2b04      	cmp	r3, #4
 800139c:	bf28      	it	cs
 800139e:	2304      	movcs	r3, #4
 80013a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3304      	adds	r3, #4
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d902      	bls.n	80013b0 <NVIC_EncodePriority+0x30>
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3b03      	subs	r3, #3
 80013ae:	e000      	b.n	80013b2 <NVIC_EncodePriority+0x32>
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43da      	mvns	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	401a      	ands	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	4313      	orrs	r3, r2
         );
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	; 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f8:	d301      	bcc.n	80013fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00f      	b.n	800141e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <SysTick_Config+0x40>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001406:	210f      	movs	r1, #15
 8001408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800140c:	f7ff ff8e 	bl	800132c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <SysTick_Config+0x40>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <SysTick_Config+0x40>)
 8001418:	2207      	movs	r2, #7
 800141a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff29 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001454:	f7ff ff3e 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 8001458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	6978      	ldr	r0, [r7, #20]
 8001460:	f7ff ff8e 	bl	8001380 <NVIC_EncodePriority>
 8001464:	4602      	mov	r2, r0
 8001466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff5d 	bl	800132c <__NVIC_SetPriority>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff31 	bl	80012f0 <__NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ffa2 	bl	80013e8 <SysTick_Config>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	e16b      	b.n	80017a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014cc:	2201      	movs	r2, #1
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f040 815a 	bne.w	800179e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d005      	beq.n	8001502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d130      	bne.n	8001564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001538:	2201      	movs	r2, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f003 0201 	and.w	r2, r3, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b03      	cmp	r3, #3
 800156e:	d017      	beq.n	80015a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d123      	bne.n	80015f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	08da      	lsrs	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3208      	adds	r2, #8
 80015b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	220f      	movs	r2, #15
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3208      	adds	r2, #8
 80015ee:	69b9      	ldr	r1, [r7, #24]
 80015f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0203 	and.w	r2, r3, #3
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80b4 	beq.w	800179e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b60      	ldr	r3, [pc, #384]	; (80017bc <HAL_GPIO_Init+0x30c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a5f      	ldr	r2, [pc, #380]	; (80017bc <HAL_GPIO_Init+0x30c>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b5d      	ldr	r3, [pc, #372]	; (80017bc <HAL_GPIO_Init+0x30c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001652:	4a5b      	ldr	r2, [pc, #364]	; (80017c0 <HAL_GPIO_Init+0x310>)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	220f      	movs	r2, #15
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a52      	ldr	r2, [pc, #328]	; (80017c4 <HAL_GPIO_Init+0x314>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d02b      	beq.n	80016d6 <HAL_GPIO_Init+0x226>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a51      	ldr	r2, [pc, #324]	; (80017c8 <HAL_GPIO_Init+0x318>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d025      	beq.n	80016d2 <HAL_GPIO_Init+0x222>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a50      	ldr	r2, [pc, #320]	; (80017cc <HAL_GPIO_Init+0x31c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d01f      	beq.n	80016ce <HAL_GPIO_Init+0x21e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4f      	ldr	r2, [pc, #316]	; (80017d0 <HAL_GPIO_Init+0x320>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d019      	beq.n	80016ca <HAL_GPIO_Init+0x21a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4e      	ldr	r2, [pc, #312]	; (80017d4 <HAL_GPIO_Init+0x324>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_GPIO_Init+0x216>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4d      	ldr	r2, [pc, #308]	; (80017d8 <HAL_GPIO_Init+0x328>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00d      	beq.n	80016c2 <HAL_GPIO_Init+0x212>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4c      	ldr	r2, [pc, #304]	; (80017dc <HAL_GPIO_Init+0x32c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d007      	beq.n	80016be <HAL_GPIO_Init+0x20e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4b      	ldr	r2, [pc, #300]	; (80017e0 <HAL_GPIO_Init+0x330>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <HAL_GPIO_Init+0x20a>
 80016b6:	2307      	movs	r3, #7
 80016b8:	e00e      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016ba:	2308      	movs	r3, #8
 80016bc:	e00c      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016be:	2306      	movs	r3, #6
 80016c0:	e00a      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016c2:	2305      	movs	r3, #5
 80016c4:	e008      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016c6:	2304      	movs	r3, #4
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016ca:	2303      	movs	r3, #3
 80016cc:	e004      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e002      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <HAL_GPIO_Init+0x228>
 80016d6:	2300      	movs	r3, #0
 80016d8:	69fa      	ldr	r2, [r7, #28]
 80016da:	f002 0203 	and.w	r2, r2, #3
 80016de:	0092      	lsls	r2, r2, #2
 80016e0:	4093      	lsls	r3, r2
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e8:	4935      	ldr	r1, [pc, #212]	; (80017c0 <HAL_GPIO_Init+0x310>)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	3302      	adds	r3, #2
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f6:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <HAL_GPIO_Init+0x334>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800171a:	4a32      	ldr	r2, [pc, #200]	; (80017e4 <HAL_GPIO_Init+0x334>)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001720:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <HAL_GPIO_Init+0x334>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001744:	4a27      	ldr	r2, [pc, #156]	; (80017e4 <HAL_GPIO_Init+0x334>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <HAL_GPIO_Init+0x334>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800176e:	4a1d      	ldr	r2, [pc, #116]	; (80017e4 <HAL_GPIO_Init+0x334>)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_GPIO_Init+0x334>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001798:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <HAL_GPIO_Init+0x334>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3301      	adds	r3, #1
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	2b0f      	cmp	r3, #15
 80017a8:	f67f ae90 	bls.w	80014cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40013800 	.word	0x40013800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40020400 	.word	0x40020400
 80017cc:	40020800 	.word	0x40020800
 80017d0:	40020c00 	.word	0x40020c00
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40021400 	.word	0x40021400
 80017dc:	40021800 	.word	0x40021800
 80017e0:	40021c00 	.word	0x40021c00
 80017e4:	40013c00 	.word	0x40013c00

080017e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691a      	ldr	r2, [r3, #16]
 80017f8:	887b      	ldrh	r3, [r7, #2]
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	e001      	b.n	800180a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
 8001824:	4613      	mov	r3, r2
 8001826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001828:	787b      	ldrb	r3, [r7, #1]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001834:	e003      	b.n	800183e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001836:	887b      	ldrh	r3, [r7, #2]
 8001838:	041a      	lsls	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	619a      	str	r2, [r3, #24]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	4013      	ands	r3, r2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f806 	bl	800187c <HAL_GPIO_EXTI_Callback>
  }
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40013c00 	.word	0x40013c00

0800187c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001892:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001894:	b08f      	sub	sp, #60	; 0x3c
 8001896:	af0a      	add	r7, sp, #40	; 0x28
 8001898:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e054      	b.n	800194e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f006 fd22 	bl	8008308 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2203      	movs	r2, #3
 80018c8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 fe78 	bl	80055d8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	687e      	ldr	r6, [r7, #4]
 80018f0:	466d      	mov	r5, sp
 80018f2:	f106 0410 	add.w	r4, r6, #16
 80018f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001902:	e885 0003 	stmia.w	r5, {r0, r1}
 8001906:	1d33      	adds	r3, r6, #4
 8001908:	cb0e      	ldmia	r3, {r1, r2, r3}
 800190a:	6838      	ldr	r0, [r7, #0]
 800190c:	f003 fdf2 	bl	80054f4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2101      	movs	r1, #1
 8001916:	4618      	mov	r0, r3
 8001918:	f003 fe6f 	bl	80055fa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	687e      	ldr	r6, [r7, #4]
 8001924:	466d      	mov	r5, sp
 8001926:	f106 0410 	add.w	r4, r6, #16
 800192a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001932:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001936:	e885 0003 	stmia.w	r5, {r0, r1}
 800193a:	1d33      	adds	r3, r6, #4
 800193c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800193e:	6838      	ldr	r0, [r7, #0]
 8001940:	f003 ffd6 	bl	80058f0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001956 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001956:	b590      	push	{r4, r7, lr}
 8001958:	b089      	sub	sp, #36	; 0x24
 800195a:	af04      	add	r7, sp, #16
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	4608      	mov	r0, r1
 8001960:	4611      	mov	r1, r2
 8001962:	461a      	mov	r2, r3
 8001964:	4603      	mov	r3, r0
 8001966:	70fb      	strb	r3, [r7, #3]
 8001968:	460b      	mov	r3, r1
 800196a:	70bb      	strb	r3, [r7, #2]
 800196c:	4613      	mov	r3, r2
 800196e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_HCD_HC_Init+0x28>
 800197a:	2302      	movs	r3, #2
 800197c:	e076      	b.n	8001a6c <HAL_HCD_HC_Init+0x116>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	212c      	movs	r1, #44	; 0x2c
 800198c:	fb01 f303 	mul.w	r3, r1, r3
 8001990:	4413      	add	r3, r2
 8001992:	333d      	adds	r3, #61	; 0x3d
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	212c      	movs	r1, #44	; 0x2c
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	3338      	adds	r3, #56	; 0x38
 80019a6:	787a      	ldrb	r2, [r7, #1]
 80019a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	212c      	movs	r1, #44	; 0x2c
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	3340      	adds	r3, #64	; 0x40
 80019b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019ba:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	212c      	movs	r1, #44	; 0x2c
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	3339      	adds	r3, #57	; 0x39
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	212c      	movs	r1, #44	; 0x2c
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	4413      	add	r3, r2
 80019da:	333f      	adds	r3, #63	; 0x3f
 80019dc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80019e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	78ba      	ldrb	r2, [r7, #2]
 80019e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019ea:	b2d0      	uxtb	r0, r2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	212c      	movs	r1, #44	; 0x2c
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	333a      	adds	r3, #58	; 0x3a
 80019f8:	4602      	mov	r2, r0
 80019fa:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80019fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	da09      	bge.n	8001a18 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	212c      	movs	r1, #44	; 0x2c
 8001a0a:	fb01 f303 	mul.w	r3, r1, r3
 8001a0e:	4413      	add	r3, r2
 8001a10:	333b      	adds	r3, #59	; 0x3b
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
 8001a16:	e008      	b.n	8001a2a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	212c      	movs	r1, #44	; 0x2c
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	333b      	adds	r3, #59	; 0x3b
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	212c      	movs	r1, #44	; 0x2c
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	333c      	adds	r3, #60	; 0x3c
 8001a38:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a3c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	787c      	ldrb	r4, [r7, #1]
 8001a44:	78ba      	ldrb	r2, [r7, #2]
 8001a46:	78f9      	ldrb	r1, [r7, #3]
 8001a48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a4a:	9302      	str	r3, [sp, #8]
 8001a4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	4623      	mov	r3, r4
 8001a5a:	f004 f8c3 	bl	8005be4 <USB_HC_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd90      	pop	{r4, r7, pc}

08001a74 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_HCD_HC_Halt+0x1e>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e00f      	b.n	8001ab2 <HAL_HCD_HC_Halt+0x3e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f004 faff 	bl	80060a6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	4608      	mov	r0, r1
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4603      	mov	r3, r0
 8001acc:	70fb      	strb	r3, [r7, #3]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	70bb      	strb	r3, [r7, #2]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ad6:	78fb      	ldrb	r3, [r7, #3]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	212c      	movs	r1, #44	; 0x2c
 8001adc:	fb01 f303 	mul.w	r3, r1, r3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	333b      	adds	r3, #59	; 0x3b
 8001ae4:	78ba      	ldrb	r2, [r7, #2]
 8001ae6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	212c      	movs	r1, #44	; 0x2c
 8001aee:	fb01 f303 	mul.w	r3, r1, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	333f      	adds	r3, #63	; 0x3f
 8001af6:	787a      	ldrb	r2, [r7, #1]
 8001af8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001afa:	7c3b      	ldrb	r3, [r7, #16]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d112      	bne.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	212c      	movs	r1, #44	; 0x2c
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3342      	adds	r3, #66	; 0x42
 8001b0e:	2203      	movs	r2, #3
 8001b10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	212c      	movs	r1, #44	; 0x2c
 8001b18:	fb01 f303 	mul.w	r3, r1, r3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	333d      	adds	r3, #61	; 0x3d
 8001b20:	7f3a      	ldrb	r2, [r7, #28]
 8001b22:	701a      	strb	r2, [r3, #0]
 8001b24:	e008      	b.n	8001b38 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	212c      	movs	r1, #44	; 0x2c
 8001b2c:	fb01 f303 	mul.w	r3, r1, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	3342      	adds	r3, #66	; 0x42
 8001b34:	2202      	movs	r2, #2
 8001b36:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b38:	787b      	ldrb	r3, [r7, #1]
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	f200 80c6 	bhi.w	8001ccc <HAL_HCD_HC_SubmitRequest+0x210>
 8001b40:	a201      	add	r2, pc, #4	; (adr r2, 8001b48 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b46:	bf00      	nop
 8001b48:	08001b59 	.word	0x08001b59
 8001b4c:	08001cb9 	.word	0x08001cb9
 8001b50:	08001bbd 	.word	0x08001bbd
 8001b54:	08001c3b 	.word	0x08001c3b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b58:	7c3b      	ldrb	r3, [r7, #16]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	f040 80b8 	bne.w	8001cd0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b60:	78bb      	ldrb	r3, [r7, #2]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f040 80b4 	bne.w	8001cd0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b68:	8b3b      	ldrh	r3, [r7, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d108      	bne.n	8001b80 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	212c      	movs	r1, #44	; 0x2c
 8001b74:	fb01 f303 	mul.w	r3, r1, r3
 8001b78:	4413      	add	r3, r2
 8001b7a:	3355      	adds	r3, #85	; 0x55
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	212c      	movs	r1, #44	; 0x2c
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3355      	adds	r3, #85	; 0x55
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d109      	bne.n	8001ba8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	212c      	movs	r1, #44	; 0x2c
 8001b9a:	fb01 f303 	mul.w	r3, r1, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3342      	adds	r3, #66	; 0x42
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ba6:	e093      	b.n	8001cd0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	212c      	movs	r1, #44	; 0x2c
 8001bae:	fb01 f303 	mul.w	r3, r1, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3342      	adds	r3, #66	; 0x42
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	701a      	strb	r2, [r3, #0]
      break;
 8001bba:	e089      	b.n	8001cd0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001bbc:	78bb      	ldrb	r3, [r7, #2]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d11d      	bne.n	8001bfe <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	212c      	movs	r1, #44	; 0x2c
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	3355      	adds	r3, #85	; 0x55
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	212c      	movs	r1, #44	; 0x2c
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	3342      	adds	r3, #66	; 0x42
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001be8:	e073      	b.n	8001cd2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	212c      	movs	r1, #44	; 0x2c
 8001bf0:	fb01 f303 	mul.w	r3, r1, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3342      	adds	r3, #66	; 0x42
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	701a      	strb	r2, [r3, #0]
      break;
 8001bfc:	e069      	b.n	8001cd2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	212c      	movs	r1, #44	; 0x2c
 8001c04:	fb01 f303 	mul.w	r3, r1, r3
 8001c08:	4413      	add	r3, r2
 8001c0a:	3354      	adds	r3, #84	; 0x54
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d109      	bne.n	8001c26 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	212c      	movs	r1, #44	; 0x2c
 8001c18:	fb01 f303 	mul.w	r3, r1, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3342      	adds	r3, #66	; 0x42
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
      break;
 8001c24:	e055      	b.n	8001cd2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	212c      	movs	r1, #44	; 0x2c
 8001c2c:	fb01 f303 	mul.w	r3, r1, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	3342      	adds	r3, #66	; 0x42
 8001c34:	2202      	movs	r2, #2
 8001c36:	701a      	strb	r2, [r3, #0]
      break;
 8001c38:	e04b      	b.n	8001cd2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c3a:	78bb      	ldrb	r3, [r7, #2]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d11d      	bne.n	8001c7c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	212c      	movs	r1, #44	; 0x2c
 8001c46:	fb01 f303 	mul.w	r3, r1, r3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3355      	adds	r3, #85	; 0x55
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	212c      	movs	r1, #44	; 0x2c
 8001c5a:	fb01 f303 	mul.w	r3, r1, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	3342      	adds	r3, #66	; 0x42
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c66:	e034      	b.n	8001cd2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	212c      	movs	r1, #44	; 0x2c
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	3342      	adds	r3, #66	; 0x42
 8001c76:	2202      	movs	r2, #2
 8001c78:	701a      	strb	r2, [r3, #0]
      break;
 8001c7a:	e02a      	b.n	8001cd2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	212c      	movs	r1, #44	; 0x2c
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	3354      	adds	r3, #84	; 0x54
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d109      	bne.n	8001ca4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	212c      	movs	r1, #44	; 0x2c
 8001c96:	fb01 f303 	mul.w	r3, r1, r3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3342      	adds	r3, #66	; 0x42
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
      break;
 8001ca2:	e016      	b.n	8001cd2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	212c      	movs	r1, #44	; 0x2c
 8001caa:	fb01 f303 	mul.w	r3, r1, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	3342      	adds	r3, #66	; 0x42
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	701a      	strb	r2, [r3, #0]
      break;
 8001cb6:	e00c      	b.n	8001cd2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	212c      	movs	r1, #44	; 0x2c
 8001cbe:	fb01 f303 	mul.w	r3, r1, r3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3342      	adds	r3, #66	; 0x42
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
      break;
 8001cca:	e002      	b.n	8001cd2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001ccc:	bf00      	nop
 8001cce:	e000      	b.n	8001cd2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001cd0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	212c      	movs	r1, #44	; 0x2c
 8001cd8:	fb01 f303 	mul.w	r3, r1, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	3344      	adds	r3, #68	; 0x44
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	8b3a      	ldrh	r2, [r7, #24]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	202c      	movs	r0, #44	; 0x2c
 8001cec:	fb00 f303 	mul.w	r3, r0, r3
 8001cf0:	440b      	add	r3, r1
 8001cf2:	334c      	adds	r3, #76	; 0x4c
 8001cf4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	212c      	movs	r1, #44	; 0x2c
 8001cfc:	fb01 f303 	mul.w	r3, r1, r3
 8001d00:	4413      	add	r3, r2
 8001d02:	3360      	adds	r3, #96	; 0x60
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	212c      	movs	r1, #44	; 0x2c
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	3350      	adds	r3, #80	; 0x50
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	212c      	movs	r1, #44	; 0x2c
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	3339      	adds	r3, #57	; 0x39
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	212c      	movs	r1, #44	; 0x2c
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	3361      	adds	r3, #97	; 0x61
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	222c      	movs	r2, #44	; 0x2c
 8001d46:	fb02 f303 	mul.w	r3, r2, r3
 8001d4a:	3338      	adds	r3, #56	; 0x38
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	18d1      	adds	r1, r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	f004 f852 	bl	8005e00 <USB_HC_StartXfer>
 8001d5c:	4603      	mov	r3, r0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop

08001d68 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 fd75 	bl	800586e <USB_GetMode>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	f040 80f6 	bne.w	8001f78 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 fd59 	bl	8005848 <USB_ReadInterrupts>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80ec 	beq.w	8001f76 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f003 fd50 	bl	8005848 <USB_ReadInterrupts>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001db2:	d104      	bne.n	8001dbe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001dbc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 fd40 	bl	8005848 <USB_ReadInterrupts>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dd2:	d104      	bne.n	8001dde <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ddc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 fd30 	bl	8005848 <USB_ReadInterrupts>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001df2:	d104      	bne.n	8001dfe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dfc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 fd20 	bl	8005848 <USB_ReadInterrupts>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d103      	bne.n	8001e1a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2202      	movs	r2, #2
 8001e18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f003 fd12 	bl	8005848 <USB_ReadInterrupts>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e2e:	d11c      	bne.n	8001e6a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e38:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10f      	bne.n	8001e6a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e4a:	2110      	movs	r1, #16
 8001e4c:	6938      	ldr	r0, [r7, #16]
 8001e4e:	f003 fc21 	bl	8005694 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e52:	6938      	ldr	r0, [r7, #16]
 8001e54:	f003 fc42 	bl	80056dc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f003 fdfa 	bl	8005a58 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f006 facd 	bl	8008404 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 fcea 	bl	8005848 <USB_ReadInterrupts>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e7e:	d102      	bne.n	8001e86 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f001 fa03 	bl	800328c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 fcdc 	bl	8005848 <USB_ReadInterrupts>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d106      	bne.n	8001ea8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f006 fa96 	bl	80083cc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f003 fccb 	bl	8005848 <USB_ReadInterrupts>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b10      	cmp	r3, #16
 8001eba:	d101      	bne.n	8001ec0 <HAL_HCD_IRQHandler+0x158>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <HAL_HCD_IRQHandler+0x15a>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d012      	beq.n	8001eec <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699a      	ldr	r2, [r3, #24]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0210 	bic.w	r2, r2, #16
 8001ed4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f001 f906 	bl	80030e8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0210 	orr.w	r2, r2, #16
 8001eea:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 fca9 	bl	8005848 <USB_ReadInterrupts>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f00:	d13a      	bne.n	8001f78 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f004 f8bc 	bl	8006084 <USB_HC_ReadInterrupt>
 8001f0c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	e025      	b.n	8001f60 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d018      	beq.n	8001f5a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f3e:	d106      	bne.n	8001f4e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	4619      	mov	r1, r3
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f8ab 	bl	80020a2 <HCD_HC_IN_IRQHandler>
 8001f4c:	e005      	b.n	8001f5a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	4619      	mov	r1, r3
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fcc6 	bl	80028e6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d3d4      	bcc.n	8001f14 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f72:	615a      	str	r2, [r3, #20]
 8001f74:	e000      	b.n	8001f78 <HAL_HCD_IRQHandler+0x210>
      return;
 8001f76:	bf00      	nop
    }
  }
}
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_HCD_Start+0x16>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e013      	b.n	8001fbc <HAL_HCD_Start+0x3e>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 fdbc 	bl	8005b20 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f003 fb02 	bl	80055b6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_HCD_Stop+0x16>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e00d      	b.n	8001ff6 <HAL_HCD_Stop+0x32>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f004 f9b6 	bl	8006358 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f003 fd5e 	bl	8005acc <USB_ResetPort>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	460b      	mov	r3, r1
 8002024:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	212c      	movs	r1, #44	; 0x2c
 800202c:	fb01 f303 	mul.w	r3, r1, r3
 8002030:	4413      	add	r3, r2
 8002032:	3360      	adds	r3, #96	; 0x60
 8002034:	781b      	ldrb	r3, [r3, #0]
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	3350      	adds	r3, #80	; 0x50
 800205c:	681b      	ldr	r3, [r3, #0]
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f003 fda2 	bl	8005bc0 <USB_GetCurrentFrame>
 800207c:	4603      	mov	r3, r0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f003 fd7d 	bl	8005b92 <USB_GetHostSpeed>
 8002098:	4603      	mov	r3, r0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	460b      	mov	r3, r1
 80020ac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	015a      	lsls	r2, r3, #5
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d119      	bne.n	8002106 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020de:	461a      	mov	r2, r3
 80020e0:	2304      	movs	r3, #4
 80020e2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	0151      	lsls	r1, r2, #5
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	440a      	add	r2, r1
 80020fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020fe:	f043 0302 	orr.w	r3, r3, #2
 8002102:	60d3      	str	r3, [r2, #12]
 8002104:	e101      	b.n	800230a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4413      	add	r3, r2
 800210e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800211c:	d12b      	bne.n	8002176 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212a:	461a      	mov	r2, r3
 800212c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002130:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	212c      	movs	r1, #44	; 0x2c
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	4413      	add	r3, r2
 800213e:	3361      	adds	r3, #97	; 0x61
 8002140:	2207      	movs	r2, #7
 8002142:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	0151      	lsls	r1, r2, #5
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	440a      	add	r2, r1
 800215a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	4611      	mov	r1, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f003 ff99 	bl	80060a6 <USB_HC_Halt>
 8002174:	e0c9      	b.n	800230a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4413      	add	r3, r2
 800217e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b20      	cmp	r3, #32
 800218a:	d109      	bne.n	80021a0 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	015a      	lsls	r2, r3, #5
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4413      	add	r3, r2
 8002194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002198:	461a      	mov	r2, r3
 800219a:	2320      	movs	r3, #32
 800219c:	6093      	str	r3, [r2, #8]
 800219e:	e0b4      	b.n	800230a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d133      	bne.n	800221e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	0151      	lsls	r1, r2, #5
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	440a      	add	r2, r1
 80021cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	212c      	movs	r1, #44	; 0x2c
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	3361      	adds	r3, #97	; 0x61
 80021e4:	2205      	movs	r2, #5
 80021e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f4:	461a      	mov	r2, r3
 80021f6:	2310      	movs	r3, #16
 80021f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4413      	add	r3, r2
 8002202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002206:	461a      	mov	r2, r3
 8002208:	2308      	movs	r3, #8
 800220a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	4611      	mov	r1, r2
 8002216:	4618      	mov	r0, r3
 8002218:	f003 ff45 	bl	80060a6 <USB_HC_Halt>
 800221c:	e075      	b.n	800230a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4413      	add	r3, r2
 8002226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002234:	d134      	bne.n	80022a0 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4413      	add	r3, r2
 800223e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	0151      	lsls	r1, r2, #5
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	440a      	add	r2, r1
 800224c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	212c      	movs	r1, #44	; 0x2c
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	4413      	add	r3, r2
 8002262:	3361      	adds	r3, #97	; 0x61
 8002264:	2208      	movs	r2, #8
 8002266:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002274:	461a      	mov	r2, r3
 8002276:	2310      	movs	r3, #16
 8002278:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4413      	add	r3, r2
 8002282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002286:	461a      	mov	r2, r3
 8002288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800228c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f003 ff04 	bl	80060a6 <USB_HC_Halt>
 800229e:	e034      	b.n	800230a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b2:	2b80      	cmp	r3, #128	; 0x80
 80022b4:	d129      	bne.n	800230a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	0151      	lsls	r1, r2, #5
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	440a      	add	r2, r1
 80022cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	212c      	movs	r1, #44	; 0x2c
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	3361      	adds	r3, #97	; 0x61
 80022e4:	2206      	movs	r2, #6
 80022e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 fed7 	bl	80060a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002304:	461a      	mov	r2, r3
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4413      	add	r3, r2
 8002312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800231c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002320:	d122      	bne.n	8002368 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4413      	add	r3, r2
 800232a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	0151      	lsls	r1, r2, #5
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	440a      	add	r2, r1
 8002338:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f003 feaa 	bl	80060a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4413      	add	r3, r2
 800235a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235e:	461a      	mov	r2, r3
 8002360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002364:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002366:	e2ba      	b.n	80028de <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	f040 811b 	bne.w	80025b6 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d019      	beq.n	80023bc <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	212c      	movs	r1, #44	; 0x2c
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	4413      	add	r3, r2
 8002394:	3348      	adds	r3, #72	; 0x48
 8002396:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	0159      	lsls	r1, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	440b      	add	r3, r1
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023aa:	1ad2      	subs	r2, r2, r3
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	202c      	movs	r0, #44	; 0x2c
 80023b2:	fb00 f303 	mul.w	r3, r0, r3
 80023b6:	440b      	add	r3, r1
 80023b8:	3350      	adds	r3, #80	; 0x50
 80023ba:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	3361      	adds	r3, #97	; 0x61
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	212c      	movs	r1, #44	; 0x2c
 80023d4:	fb01 f303 	mul.w	r3, r1, r3
 80023d8:	4413      	add	r3, r2
 80023da:	335c      	adds	r3, #92	; 0x5c
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ec:	461a      	mov	r2, r3
 80023ee:	2301      	movs	r3, #1
 80023f0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	333f      	adds	r3, #63	; 0x3f
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	333f      	adds	r3, #63	; 0x3f
 8002414:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002416:	2b02      	cmp	r3, #2
 8002418:	d121      	bne.n	800245e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	0151      	lsls	r1, r2, #5
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	440a      	add	r2, r1
 8002430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002434:	f043 0302 	orr.w	r3, r3, #2
 8002438:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f003 fe2e 	bl	80060a6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4413      	add	r3, r2
 8002452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002456:	461a      	mov	r2, r3
 8002458:	2310      	movs	r3, #16
 800245a:	6093      	str	r3, [r2, #8]
 800245c:	e066      	b.n	800252c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	212c      	movs	r1, #44	; 0x2c
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	4413      	add	r3, r2
 800246a:	333f      	adds	r3, #63	; 0x3f
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b03      	cmp	r3, #3
 8002470:	d127      	bne.n	80024c2 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	0151      	lsls	r1, r2, #5
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	440a      	add	r2, r1
 8002488:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800248c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002490:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	3360      	adds	r3, #96	; 0x60
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	b2d9      	uxtb	r1, r3
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	202c      	movs	r0, #44	; 0x2c
 80024ae:	fb00 f303 	mul.w	r3, r0, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	3360      	adds	r3, #96	; 0x60
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f005 ffb0 	bl	8008420 <HAL_HCD_HC_NotifyURBChange_Callback>
 80024c0:	e034      	b.n	800252c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	212c      	movs	r1, #44	; 0x2c
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	333f      	adds	r3, #63	; 0x3f
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d12a      	bne.n	800252c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	3360      	adds	r3, #96	; 0x60
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	3354      	adds	r3, #84	; 0x54
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	f083 0301 	eor.w	r3, r3, #1
 80024fc:	b2d8      	uxtb	r0, r3
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	212c      	movs	r1, #44	; 0x2c
 8002504:	fb01 f303 	mul.w	r3, r1, r3
 8002508:	4413      	add	r3, r2
 800250a:	3354      	adds	r3, #84	; 0x54
 800250c:	4602      	mov	r2, r0
 800250e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	b2d9      	uxtb	r1, r3
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	202c      	movs	r0, #44	; 0x2c
 800251a:	fb00 f303 	mul.w	r3, r0, r3
 800251e:	4413      	add	r3, r2
 8002520:	3360      	adds	r3, #96	; 0x60
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f005 ff7a 	bl	8008420 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d12b      	bne.n	800258c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	212c      	movs	r1, #44	; 0x2c
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	4413      	add	r3, r2
 8002540:	3348      	adds	r3, #72	; 0x48
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	202c      	movs	r0, #44	; 0x2c
 800254a:	fb00 f202 	mul.w	r2, r0, r2
 800254e:	440a      	add	r2, r1
 8002550:	3240      	adds	r2, #64	; 0x40
 8002552:	8812      	ldrh	r2, [r2, #0]
 8002554:	fbb3 f3f2 	udiv	r3, r3, r2
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 81be 	beq.w	80028de <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	3354      	adds	r3, #84	; 0x54
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	f083 0301 	eor.w	r3, r3, #1
 8002576:	b2d8      	uxtb	r0, r3
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	3354      	adds	r3, #84	; 0x54
 8002586:	4602      	mov	r2, r0
 8002588:	701a      	strb	r2, [r3, #0]
}
 800258a:	e1a8      	b.n	80028de <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	212c      	movs	r1, #44	; 0x2c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	3354      	adds	r3, #84	; 0x54
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	f083 0301 	eor.w	r3, r3, #1
 80025a0:	b2d8      	uxtb	r0, r3
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	3354      	adds	r3, #84	; 0x54
 80025b0:	4602      	mov	r2, r0
 80025b2:	701a      	strb	r2, [r3, #0]
}
 80025b4:	e193      	b.n	80028de <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	f040 8106 	bne.w	80027da <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	0151      	lsls	r1, r2, #5
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	440a      	add	r2, r1
 80025e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025e8:	f023 0302 	bic.w	r3, r3, #2
 80025ec:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	3361      	adds	r3, #97	; 0x61
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d109      	bne.n	8002616 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	3360      	adds	r3, #96	; 0x60
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
 8002614:	e0c9      	b.n	80027aa <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3361      	adds	r3, #97	; 0x61
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b05      	cmp	r3, #5
 8002628:	d109      	bne.n	800263e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	3360      	adds	r3, #96	; 0x60
 8002638:	2205      	movs	r2, #5
 800263a:	701a      	strb	r2, [r3, #0]
 800263c:	e0b5      	b.n	80027aa <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	3361      	adds	r3, #97	; 0x61
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b06      	cmp	r3, #6
 8002650:	d009      	beq.n	8002666 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	212c      	movs	r1, #44	; 0x2c
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	3361      	adds	r3, #97	; 0x61
 8002660:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002662:	2b08      	cmp	r3, #8
 8002664:	d150      	bne.n	8002708 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	335c      	adds	r3, #92	; 0x5c
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	202c      	movs	r0, #44	; 0x2c
 800267e:	fb00 f303 	mul.w	r3, r0, r3
 8002682:	440b      	add	r3, r1
 8002684:	335c      	adds	r3, #92	; 0x5c
 8002686:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	335c      	adds	r3, #92	; 0x5c
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d912      	bls.n	80026c2 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	335c      	adds	r3, #92	; 0x5c
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	212c      	movs	r1, #44	; 0x2c
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	3360      	adds	r3, #96	; 0x60
 80026bc:	2204      	movs	r2, #4
 80026be:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026c0:	e073      	b.n	80027aa <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	3360      	adds	r3, #96	; 0x60
 80026d0:	2202      	movs	r2, #2
 80026d2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026ea:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026f2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002700:	461a      	mov	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002706:	e050      	b.n	80027aa <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	212c      	movs	r1, #44	; 0x2c
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	3361      	adds	r3, #97	; 0x61
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d122      	bne.n	8002762 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	212c      	movs	r1, #44	; 0x2c
 8002722:	fb01 f303 	mul.w	r3, r1, r3
 8002726:	4413      	add	r3, r2
 8002728:	3360      	adds	r3, #96	; 0x60
 800272a:	2202      	movs	r2, #2
 800272c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002744:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800274c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275a:	461a      	mov	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	e023      	b.n	80027aa <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	3361      	adds	r3, #97	; 0x61
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b07      	cmp	r3, #7
 8002774:	d119      	bne.n	80027aa <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	212c      	movs	r1, #44	; 0x2c
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	335c      	adds	r3, #92	; 0x5c
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	202c      	movs	r0, #44	; 0x2c
 800278e:	fb00 f303 	mul.w	r3, r0, r3
 8002792:	440b      	add	r3, r1
 8002794:	335c      	adds	r3, #92	; 0x5c
 8002796:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	212c      	movs	r1, #44	; 0x2c
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	3360      	adds	r3, #96	; 0x60
 80027a6:	2204      	movs	r2, #4
 80027a8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b6:	461a      	mov	r2, r3
 80027b8:	2302      	movs	r3, #2
 80027ba:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	b2d9      	uxtb	r1, r3
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	202c      	movs	r0, #44	; 0x2c
 80027c6:	fb00 f303 	mul.w	r3, r0, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	3360      	adds	r3, #96	; 0x60
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f005 fe24 	bl	8008420 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80027d8:	e081      	b.n	80028de <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b10      	cmp	r3, #16
 80027ee:	d176      	bne.n	80028de <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	212c      	movs	r1, #44	; 0x2c
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	333f      	adds	r3, #63	; 0x3f
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d121      	bne.n	8002848 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	212c      	movs	r1, #44	; 0x2c
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	4413      	add	r3, r2
 8002810:	335c      	adds	r3, #92	; 0x5c
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	0151      	lsls	r1, r2, #5
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	440a      	add	r2, r1
 800282c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002830:	f043 0302 	orr.w	r3, r3, #2
 8002834:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f003 fc30 	bl	80060a6 <USB_HC_Halt>
 8002846:	e041      	b.n	80028cc <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	212c      	movs	r1, #44	; 0x2c
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	4413      	add	r3, r2
 8002854:	333f      	adds	r3, #63	; 0x3f
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d009      	beq.n	8002870 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	212c      	movs	r1, #44	; 0x2c
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	4413      	add	r3, r2
 8002868:	333f      	adds	r3, #63	; 0x3f
 800286a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800286c:	2b02      	cmp	r3, #2
 800286e:	d12d      	bne.n	80028cc <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	212c      	movs	r1, #44	; 0x2c
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	4413      	add	r3, r2
 800287c:	335c      	adds	r3, #92	; 0x5c
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d120      	bne.n	80028cc <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	3361      	adds	r3, #97	; 0x61
 8002898:	2203      	movs	r2, #3
 800289a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	0151      	lsls	r1, r2, #5
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	440a      	add	r2, r1
 80028b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028b6:	f043 0302 	orr.w	r3, r3, #2
 80028ba:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f003 fbed 	bl	80060a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	461a      	mov	r2, r3
 80028da:	2310      	movs	r3, #16
 80028dc:	6093      	str	r3, [r2, #8]
}
 80028de:	bf00      	nop
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b088      	sub	sp, #32
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	4413      	add	r3, r2
 8002908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b04      	cmp	r3, #4
 8002914:	d119      	bne.n	800294a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	4413      	add	r3, r2
 800291e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002922:	461a      	mov	r2, r3
 8002924:	2304      	movs	r3, #4
 8002926:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	015a      	lsls	r2, r3, #5
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	4413      	add	r3, r2
 8002930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	0151      	lsls	r1, r2, #5
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	440a      	add	r2, r1
 800293e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002942:	f043 0302 	orr.w	r3, r3, #2
 8002946:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002948:	e3ca      	b.n	80030e0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b20      	cmp	r3, #32
 800295e:	d13e      	bne.n	80029de <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296c:	461a      	mov	r2, r3
 800296e:	2320      	movs	r3, #32
 8002970:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	212c      	movs	r1, #44	; 0x2c
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	333d      	adds	r3, #61	; 0x3d
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b01      	cmp	r3, #1
 8002984:	f040 83ac 	bne.w	80030e0 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	333d      	adds	r3, #61	; 0x3d
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3360      	adds	r3, #96	; 0x60
 80029a8:	2202      	movs	r2, #2
 80029aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	0151      	lsls	r1, r2, #5
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	440a      	add	r2, r1
 80029c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029c6:	f043 0302 	orr.w	r3, r3, #2
 80029ca:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	4611      	mov	r1, r2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f003 fb65 	bl	80060a6 <USB_HC_Halt>
}
 80029dc:	e380      	b.n	80030e0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f4:	d122      	bne.n	8002a3c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	0151      	lsls	r1, r2, #5
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	440a      	add	r2, r1
 8002a0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a10:	f043 0302 	orr.w	r3, r3, #2
 8002a14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f003 fb40 	bl	80060a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a32:	461a      	mov	r2, r3
 8002a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a38:	6093      	str	r3, [r2, #8]
}
 8002a3a:	e351      	b.n	80030e0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d150      	bne.n	8002af4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	212c      	movs	r1, #44	; 0x2c
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	335c      	adds	r3, #92	; 0x5c
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b40      	cmp	r3, #64	; 0x40
 8002a78:	d111      	bne.n	8002a9e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	333d      	adds	r3, #61	; 0x3d
 8002a88:	2201      	movs	r2, #1
 8002a8a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	461a      	mov	r2, r3
 8002a9a:	2340      	movs	r3, #64	; 0x40
 8002a9c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	0151      	lsls	r1, r2, #5
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	440a      	add	r2, r1
 8002ab4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f003 faec 	bl	80060a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ada:	461a      	mov	r2, r3
 8002adc:	2301      	movs	r3, #1
 8002ade:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	212c      	movs	r1, #44	; 0x2c
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	3361      	adds	r3, #97	; 0x61
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
}
 8002af2:	e2f5      	b.n	80030e0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b06:	2b40      	cmp	r3, #64	; 0x40
 8002b08:	d13c      	bne.n	8002b84 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	212c      	movs	r1, #44	; 0x2c
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	3361      	adds	r3, #97	; 0x61
 8002b18:	2204      	movs	r2, #4
 8002b1a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	333d      	adds	r3, #61	; 0x3d
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	335c      	adds	r3, #92	; 0x5c
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	0151      	lsls	r1, r2, #5
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	440a      	add	r2, r1
 8002b56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b5a:	f043 0302 	orr.w	r3, r3, #2
 8002b5e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f003 fa9b 	bl	80060a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2340      	movs	r3, #64	; 0x40
 8002b80:	6093      	str	r3, [r2, #8]
}
 8002b82:	e2ad      	b.n	80030e0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d12a      	bne.n	8002bf0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	2308      	movs	r3, #8
 8002baa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	0151      	lsls	r1, r2, #5
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	440a      	add	r2, r1
 8002bc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bc6:	f043 0302 	orr.w	r3, r3, #2
 8002bca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f003 fa65 	bl	80060a6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3361      	adds	r3, #97	; 0x61
 8002bea:	2205      	movs	r2, #5
 8002bec:	701a      	strb	r2, [r3, #0]
}
 8002bee:	e277      	b.n	80030e0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b10      	cmp	r3, #16
 8002c04:	d150      	bne.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	335c      	adds	r3, #92	; 0x5c
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	3361      	adds	r3, #97	; 0x61
 8002c26:	2203      	movs	r2, #3
 8002c28:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	333d      	adds	r3, #61	; 0x3d
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d112      	bne.n	8002c64 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	212c      	movs	r1, #44	; 0x2c
 8002c44:	fb01 f303 	mul.w	r3, r1, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	333c      	adds	r3, #60	; 0x3c
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d108      	bne.n	8002c64 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	333d      	adds	r3, #61	; 0x3d
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	0151      	lsls	r1, r2, #5
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	440a      	add	r2, r1
 8002c7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c7e:	f043 0302 	orr.w	r3, r3, #2
 8002c82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f003 fa09 	bl	80060a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2310      	movs	r3, #16
 8002ca4:	6093      	str	r3, [r2, #8]
}
 8002ca6:	e21b      	b.n	80030e0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cba:	2b80      	cmp	r3, #128	; 0x80
 8002cbc:	d174      	bne.n	8002da8 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d121      	bne.n	8002d0a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3361      	adds	r3, #97	; 0x61
 8002cd4:	2206      	movs	r2, #6
 8002cd6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	0151      	lsls	r1, r2, #5
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	440a      	add	r2, r1
 8002cee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cf2:	f043 0302 	orr.w	r3, r3, #2
 8002cf6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f003 f9cf 	bl	80060a6 <USB_HC_Halt>
 8002d08:	e044      	b.n	8002d94 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	335c      	adds	r3, #92	; 0x5c
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	202c      	movs	r0, #44	; 0x2c
 8002d22:	fb00 f303 	mul.w	r3, r0, r3
 8002d26:	440b      	add	r3, r1
 8002d28:	335c      	adds	r3, #92	; 0x5c
 8002d2a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	335c      	adds	r3, #92	; 0x5c
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d920      	bls.n	8002d82 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	335c      	adds	r3, #92	; 0x5c
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	212c      	movs	r1, #44	; 0x2c
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3360      	adds	r3, #96	; 0x60
 8002d60:	2204      	movs	r2, #4
 8002d62:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	b2d9      	uxtb	r1, r3
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	202c      	movs	r0, #44	; 0x2c
 8002d6e:	fb00 f303 	mul.w	r3, r0, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	3360      	adds	r3, #96	; 0x60
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f005 fb50 	bl	8008420 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d80:	e008      	b.n	8002d94 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3360      	adds	r3, #96	; 0x60
 8002d90:	2202      	movs	r2, #2
 8002d92:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da0:	461a      	mov	r2, r3
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	6093      	str	r3, [r2, #8]
}
 8002da6:	e19b      	b.n	80030e0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dbe:	d134      	bne.n	8002e2a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	0151      	lsls	r1, r2, #5
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	440a      	add	r2, r1
 8002dd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dda:	f043 0302 	orr.w	r3, r3, #2
 8002dde:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	4611      	mov	r1, r2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f003 f95b 	bl	80060a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2310      	movs	r3, #16
 8002e00:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	3361      	adds	r3, #97	; 0x61
 8002e24:	2208      	movs	r2, #8
 8002e26:	701a      	strb	r2, [r3, #0]
}
 8002e28:	e15a      	b.n	80030e0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	f040 814f 	bne.w	80030e0 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	0151      	lsls	r1, r2, #5
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	440a      	add	r2, r1
 8002e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e5c:	f023 0302 	bic.w	r3, r3, #2
 8002e60:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3361      	adds	r3, #97	; 0x61
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d17d      	bne.n	8002f72 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	212c      	movs	r1, #44	; 0x2c
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	4413      	add	r3, r2
 8002e82:	3360      	adds	r3, #96	; 0x60
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	212c      	movs	r1, #44	; 0x2c
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	333f      	adds	r3, #63	; 0x3f
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d00a      	beq.n	8002eb2 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	212c      	movs	r1, #44	; 0x2c
 8002ea2:	fb01 f303 	mul.w	r3, r1, r3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	333f      	adds	r3, #63	; 0x3f
 8002eaa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	f040 8100 	bne.w	80030b2 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d113      	bne.n	8002ee2 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	212c      	movs	r1, #44	; 0x2c
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3355      	adds	r3, #85	; 0x55
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	f083 0301 	eor.w	r3, r3, #1
 8002ece:	b2d8      	uxtb	r0, r3
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3355      	adds	r3, #85	; 0x55
 8002ede:	4602      	mov	r2, r0
 8002ee0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	f040 80e3 	bne.w	80030b2 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	334c      	adds	r3, #76	; 0x4c
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80d8 	beq.w	80030b2 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	212c      	movs	r1, #44	; 0x2c
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	334c      	adds	r3, #76	; 0x4c
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	202c      	movs	r0, #44	; 0x2c
 8002f18:	fb00 f202 	mul.w	r2, r0, r2
 8002f1c:	440a      	add	r2, r1
 8002f1e:	3240      	adds	r2, #64	; 0x40
 8002f20:	8812      	ldrh	r2, [r2, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	3b01      	subs	r3, #1
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	202c      	movs	r0, #44	; 0x2c
 8002f2c:	fb00 f202 	mul.w	r2, r0, r2
 8002f30:	440a      	add	r2, r1
 8002f32:	3240      	adds	r2, #64	; 0x40
 8002f34:	8812      	ldrh	r2, [r2, #0]
 8002f36:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80b5 	beq.w	80030b2 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	212c      	movs	r1, #44	; 0x2c
 8002f4e:	fb01 f303 	mul.w	r3, r1, r3
 8002f52:	4413      	add	r3, r2
 8002f54:	3355      	adds	r3, #85	; 0x55
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	f083 0301 	eor.w	r3, r3, #1
 8002f5c:	b2d8      	uxtb	r0, r3
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	212c      	movs	r1, #44	; 0x2c
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	3355      	adds	r3, #85	; 0x55
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	701a      	strb	r2, [r3, #0]
 8002f70:	e09f      	b.n	80030b2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	212c      	movs	r1, #44	; 0x2c
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3361      	adds	r3, #97	; 0x61
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d109      	bne.n	8002f9a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	3360      	adds	r3, #96	; 0x60
 8002f94:	2202      	movs	r2, #2
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e08b      	b.n	80030b2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3361      	adds	r3, #97	; 0x61
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d109      	bne.n	8002fc2 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	212c      	movs	r1, #44	; 0x2c
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	4413      	add	r3, r2
 8002fba:	3360      	adds	r3, #96	; 0x60
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	701a      	strb	r2, [r3, #0]
 8002fc0:	e077      	b.n	80030b2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	3361      	adds	r3, #97	; 0x61
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b05      	cmp	r3, #5
 8002fd4:	d109      	bne.n	8002fea <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	212c      	movs	r1, #44	; 0x2c
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3360      	adds	r3, #96	; 0x60
 8002fe4:	2205      	movs	r2, #5
 8002fe6:	701a      	strb	r2, [r3, #0]
 8002fe8:	e063      	b.n	80030b2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3361      	adds	r3, #97	; 0x61
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d009      	beq.n	8003012 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	3361      	adds	r3, #97	; 0x61
 800300c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800300e:	2b08      	cmp	r3, #8
 8003010:	d14f      	bne.n	80030b2 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	212c      	movs	r1, #44	; 0x2c
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	4413      	add	r3, r2
 800301e:	335c      	adds	r3, #92	; 0x5c
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	202c      	movs	r0, #44	; 0x2c
 800302a:	fb00 f303 	mul.w	r3, r0, r3
 800302e:	440b      	add	r3, r1
 8003030:	335c      	adds	r3, #92	; 0x5c
 8003032:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	212c      	movs	r1, #44	; 0x2c
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	4413      	add	r3, r2
 8003040:	335c      	adds	r3, #92	; 0x5c
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d912      	bls.n	800306e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	212c      	movs	r1, #44	; 0x2c
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	335c      	adds	r3, #92	; 0x5c
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	212c      	movs	r1, #44	; 0x2c
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	4413      	add	r3, r2
 8003066:	3360      	adds	r3, #96	; 0x60
 8003068:	2204      	movs	r2, #4
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e021      	b.n	80030b2 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	212c      	movs	r1, #44	; 0x2c
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	4413      	add	r3, r2
 800307a:	3360      	adds	r3, #96	; 0x60
 800307c:	2202      	movs	r2, #2
 800307e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	4413      	add	r3, r2
 8003088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003096:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800309e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ac:	461a      	mov	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030be:	461a      	mov	r2, r3
 80030c0:	2302      	movs	r3, #2
 80030c2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	b2d9      	uxtb	r1, r3
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	202c      	movs	r0, #44	; 0x2c
 80030ce:	fb00 f303 	mul.w	r3, r0, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	3360      	adds	r3, #96	; 0x60
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f005 f9a0 	bl	8008420 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80030e0:	bf00      	nop
 80030e2:	3720      	adds	r7, #32
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f003 030f 	and.w	r3, r3, #15
 8003108:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	0c5b      	lsrs	r3, r3, #17
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800311c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b02      	cmp	r3, #2
 8003122:	d004      	beq.n	800312e <HCD_RXQLVL_IRQHandler+0x46>
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2b05      	cmp	r3, #5
 8003128:	f000 80a9 	beq.w	800327e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800312c:	e0aa      	b.n	8003284 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80a6 	beq.w	8003282 <HCD_RXQLVL_IRQHandler+0x19a>
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	212c      	movs	r1, #44	; 0x2c
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	4413      	add	r3, r2
 8003142:	3344      	adds	r3, #68	; 0x44
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 809b 	beq.w	8003282 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3350      	adds	r3, #80	; 0x50
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	441a      	add	r2, r3
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	202c      	movs	r0, #44	; 0x2c
 8003166:	fb00 f303 	mul.w	r3, r0, r3
 800316a:	440b      	add	r3, r1
 800316c:	334c      	adds	r3, #76	; 0x4c
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d87a      	bhi.n	800326a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	fb01 f303 	mul.w	r3, r1, r3
 8003182:	4413      	add	r3, r2
 8003184:	3344      	adds	r3, #68	; 0x44
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	b292      	uxth	r2, r2
 800318c:	4619      	mov	r1, r3
 800318e:	f002 fb03 	bl	8005798 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	3344      	adds	r3, #68	; 0x44
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	441a      	add	r2, r3
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	202c      	movs	r0, #44	; 0x2c
 80031ac:	fb00 f303 	mul.w	r3, r0, r3
 80031b0:	440b      	add	r3, r1
 80031b2:	3344      	adds	r3, #68	; 0x44
 80031b4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	212c      	movs	r1, #44	; 0x2c
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	4413      	add	r3, r2
 80031c2:	3350      	adds	r3, #80	; 0x50
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	441a      	add	r2, r3
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	202c      	movs	r0, #44	; 0x2c
 80031d0:	fb00 f303 	mul.w	r3, r0, r3
 80031d4:	440b      	add	r3, r1
 80031d6:	3350      	adds	r3, #80	; 0x50
 80031d8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	0cdb      	lsrs	r3, r3, #19
 80031ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ee:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	3340      	adds	r3, #64	; 0x40
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4293      	cmp	r3, r2
 8003206:	d13c      	bne.n	8003282 <HCD_RXQLVL_IRQHandler+0x19a>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d039      	beq.n	8003282 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	4413      	add	r3, r2
 8003216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003224:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800322c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	4413      	add	r3, r2
 8003236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323a:	461a      	mov	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	212c      	movs	r1, #44	; 0x2c
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	3354      	adds	r3, #84	; 0x54
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	f083 0301 	eor.w	r3, r3, #1
 8003254:	b2d8      	uxtb	r0, r3
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	3354      	adds	r3, #84	; 0x54
 8003264:	4602      	mov	r2, r0
 8003266:	701a      	strb	r2, [r3, #0]
      break;
 8003268:	e00b      	b.n	8003282 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	212c      	movs	r1, #44	; 0x2c
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	3360      	adds	r3, #96	; 0x60
 8003278:	2204      	movs	r2, #4
 800327a:	701a      	strb	r2, [r3, #0]
      break;
 800327c:	e001      	b.n	8003282 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003282:	bf00      	nop
  }
}
 8003284:	bf00      	nop
 8003286:	3728      	adds	r7, #40	; 0x28
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80032b8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d10b      	bne.n	80032dc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d102      	bne.n	80032d4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f005 f88a 	bl	80083e8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f043 0302 	orr.w	r3, r3, #2
 80032da:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d132      	bne.n	800334c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f043 0308 	orr.w	r3, r3, #8
 80032ec:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d126      	bne.n	8003346 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d113      	bne.n	8003328 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003306:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800330a:	d106      	bne.n	800331a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2102      	movs	r1, #2
 8003312:	4618      	mov	r0, r3
 8003314:	f002 fba0 	bl	8005a58 <USB_InitFSLSPClkSel>
 8003318:	e011      	b.n	800333e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2101      	movs	r1, #1
 8003320:	4618      	mov	r0, r3
 8003322:	f002 fb99 	bl	8005a58 <USB_InitFSLSPClkSel>
 8003326:	e00a      	b.n	800333e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d106      	bne.n	800333e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003336:	461a      	mov	r2, r3
 8003338:	f64e 2360 	movw	r3, #60000	; 0xea60
 800333c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f005 f87c 	bl	800843c <HAL_HCD_PortEnabled_Callback>
 8003344:	e002      	b.n	800334c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f005 f886 	bl	8008458 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b20      	cmp	r3, #32
 8003354:	d103      	bne.n	800335e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f043 0320 	orr.w	r3, r3, #32
 800335c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003364:	461a      	mov	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	6013      	str	r3, [r2, #0]
}
 800336a:	bf00      	nop
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e12b      	b.n	80035de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fd fc80 	bl	8000ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	; 0x24
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033d8:	f001 f9fc 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 80033dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4a81      	ldr	r2, [pc, #516]	; (80035e8 <HAL_I2C_Init+0x274>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d807      	bhi.n	80033f8 <HAL_I2C_Init+0x84>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a80      	ldr	r2, [pc, #512]	; (80035ec <HAL_I2C_Init+0x278>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	bf94      	ite	ls
 80033f0:	2301      	movls	r3, #1
 80033f2:	2300      	movhi	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e006      	b.n	8003406 <HAL_I2C_Init+0x92>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4a7d      	ldr	r2, [pc, #500]	; (80035f0 <HAL_I2C_Init+0x27c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	bf94      	ite	ls
 8003400:	2301      	movls	r3, #1
 8003402:	2300      	movhi	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e0e7      	b.n	80035de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a78      	ldr	r2, [pc, #480]	; (80035f4 <HAL_I2C_Init+0x280>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	0c9b      	lsrs	r3, r3, #18
 8003418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	430a      	orrs	r2, r1
 800342c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4a6a      	ldr	r2, [pc, #424]	; (80035e8 <HAL_I2C_Init+0x274>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d802      	bhi.n	8003448 <HAL_I2C_Init+0xd4>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3301      	adds	r3, #1
 8003446:	e009      	b.n	800345c <HAL_I2C_Init+0xe8>
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	4a69      	ldr	r2, [pc, #420]	; (80035f8 <HAL_I2C_Init+0x284>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	3301      	adds	r3, #1
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	430b      	orrs	r3, r1
 8003462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800346e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	495c      	ldr	r1, [pc, #368]	; (80035e8 <HAL_I2C_Init+0x274>)
 8003478:	428b      	cmp	r3, r1
 800347a:	d819      	bhi.n	80034b0 <HAL_I2C_Init+0x13c>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1e59      	subs	r1, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	fbb1 f3f3 	udiv	r3, r1, r3
 800348a:	1c59      	adds	r1, r3, #1
 800348c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003490:	400b      	ands	r3, r1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <HAL_I2C_Init+0x138>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1e59      	subs	r1, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034aa:	e051      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 80034ac:	2304      	movs	r3, #4
 80034ae:	e04f      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d111      	bne.n	80034dc <HAL_I2C_Init+0x168>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1e58      	subs	r0, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	440b      	add	r3, r1
 80034c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	e012      	b.n	8003502 <HAL_I2C_Init+0x18e>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1e58      	subs	r0, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	0099      	lsls	r1, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f2:	3301      	adds	r3, #1
 80034f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_Init+0x196>
 8003506:	2301      	movs	r3, #1
 8003508:	e022      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10e      	bne.n	8003530 <HAL_I2C_Init+0x1bc>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1e58      	subs	r0, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6859      	ldr	r1, [r3, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	440b      	add	r3, r1
 8003520:	fbb0 f3f3 	udiv	r3, r0, r3
 8003524:	3301      	adds	r3, #1
 8003526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800352e:	e00f      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1e58      	subs	r0, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6859      	ldr	r1, [r3, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	0099      	lsls	r1, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	fbb0 f3f3 	udiv	r3, r0, r3
 8003546:	3301      	adds	r3, #1
 8003548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	6809      	ldr	r1, [r1, #0]
 8003554:	4313      	orrs	r3, r2
 8003556:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69da      	ldr	r2, [r3, #28]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800357e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6911      	ldr	r1, [r2, #16]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	68d2      	ldr	r2, [r2, #12]
 800358a:	4311      	orrs	r1, r2
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	430b      	orrs	r3, r1
 8003592:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	000186a0 	.word	0x000186a0
 80035ec:	001e847f 	.word	0x001e847f
 80035f0:	003d08ff 	.word	0x003d08ff
 80035f4:	431bde83 	.word	0x431bde83
 80035f8:	10624dd3 	.word	0x10624dd3

080035fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e128      	b.n	8003860 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a90      	ldr	r2, [pc, #576]	; (8003868 <HAL_I2S_Init+0x26c>)
 8003626:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7fd fb81 	bl	8000d30 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003644:	f023 030f 	bic.w	r3, r3, #15
 8003648:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2202      	movs	r2, #2
 8003650:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d060      	beq.n	800371c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d102      	bne.n	8003668 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003662:	2310      	movs	r3, #16
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	e001      	b.n	800366c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003668:	2320      	movs	r3, #32
 800366a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b20      	cmp	r3, #32
 8003672:	d802      	bhi.n	800367a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800367a:	2001      	movs	r0, #1
 800367c:	f001 f9a0 	bl	80049c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003680:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800368a:	d125      	bne.n	80036d8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d010      	beq.n	80036b6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	fbb2 f2f3 	udiv	r2, r2, r3
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	461a      	mov	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	3305      	adds	r3, #5
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	e01f      	b.n	80036f6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	461a      	mov	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d2:	3305      	adds	r3, #5
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	e00e      	b.n	80036f6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	461a      	mov	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f2:	3305      	adds	r3, #5
 80036f4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4a5c      	ldr	r2, [pc, #368]	; (800386c <HAL_I2S_Init+0x270>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	08db      	lsrs	r3, r3, #3
 8003700:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	085b      	lsrs	r3, r3, #1
 8003712:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	e003      	b.n	8003724 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800371c:	2302      	movs	r3, #2
 800371e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d902      	bls.n	8003730 <HAL_I2S_Init+0x134>
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	2bff      	cmp	r3, #255	; 0xff
 800372e:	d907      	bls.n	8003740 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003734:	f043 0210 	orr.w	r2, r3, #16
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e08f      	b.n	8003860 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	ea42 0103 	orr.w	r1, r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	430a      	orrs	r2, r1
 8003752:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800375e:	f023 030f 	bic.w	r3, r3, #15
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6851      	ldr	r1, [r2, #4]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6892      	ldr	r2, [r2, #8]
 800376a:	4311      	orrs	r1, r2
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	68d2      	ldr	r2, [r2, #12]
 8003770:	4311      	orrs	r1, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6992      	ldr	r2, [r2, #24]
 8003776:	430a      	orrs	r2, r1
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003782:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d161      	bne.n	8003850 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a38      	ldr	r2, [pc, #224]	; (8003870 <HAL_I2S_Init+0x274>)
 8003790:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a37      	ldr	r2, [pc, #220]	; (8003874 <HAL_I2S_Init+0x278>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d101      	bne.n	80037a0 <HAL_I2S_Init+0x1a4>
 800379c:	4b36      	ldr	r3, [pc, #216]	; (8003878 <HAL_I2S_Init+0x27c>)
 800379e:	e001      	b.n	80037a4 <HAL_I2S_Init+0x1a8>
 80037a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	4932      	ldr	r1, [pc, #200]	; (8003874 <HAL_I2S_Init+0x278>)
 80037ac:	428a      	cmp	r2, r1
 80037ae:	d101      	bne.n	80037b4 <HAL_I2S_Init+0x1b8>
 80037b0:	4a31      	ldr	r2, [pc, #196]	; (8003878 <HAL_I2S_Init+0x27c>)
 80037b2:	e001      	b.n	80037b8 <HAL_I2S_Init+0x1bc>
 80037b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80037b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037bc:	f023 030f 	bic.w	r3, r3, #15
 80037c0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a2b      	ldr	r2, [pc, #172]	; (8003874 <HAL_I2S_Init+0x278>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d101      	bne.n	80037d0 <HAL_I2S_Init+0x1d4>
 80037cc:	4b2a      	ldr	r3, [pc, #168]	; (8003878 <HAL_I2S_Init+0x27c>)
 80037ce:	e001      	b.n	80037d4 <HAL_I2S_Init+0x1d8>
 80037d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d4:	2202      	movs	r2, #2
 80037d6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a25      	ldr	r2, [pc, #148]	; (8003874 <HAL_I2S_Init+0x278>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d101      	bne.n	80037e6 <HAL_I2S_Init+0x1ea>
 80037e2:	4b25      	ldr	r3, [pc, #148]	; (8003878 <HAL_I2S_Init+0x27c>)
 80037e4:	e001      	b.n	80037ea <HAL_I2S_Init+0x1ee>
 80037e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f6:	d003      	beq.n	8003800 <HAL_I2S_Init+0x204>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d103      	bne.n	8003808 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	e001      	b.n	800380c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003816:	4313      	orrs	r3, r2
 8003818:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003820:	4313      	orrs	r3, r2
 8003822:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800382a:	4313      	orrs	r3, r2
 800382c:	b29a      	uxth	r2, r3
 800382e:	897b      	ldrh	r3, [r7, #10]
 8003830:	4313      	orrs	r3, r2
 8003832:	b29b      	uxth	r3, r3
 8003834:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003838:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a0d      	ldr	r2, [pc, #52]	; (8003874 <HAL_I2S_Init+0x278>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d101      	bne.n	8003848 <HAL_I2S_Init+0x24c>
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <HAL_I2S_Init+0x27c>)
 8003846:	e001      	b.n	800384c <HAL_I2S_Init+0x250>
 8003848:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800384c:	897a      	ldrh	r2, [r7, #10]
 800384e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3720      	adds	r7, #32
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	08003973 	.word	0x08003973
 800386c:	cccccccd 	.word	0xcccccccd
 8003870:	08003a89 	.word	0x08003a89
 8003874:	40003800 	.word	0x40003800
 8003878:	40003400 	.word	0x40003400

0800387c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	881a      	ldrh	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	1c9a      	adds	r2, r3, #2
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10e      	bne.n	800390c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff ffb8 	bl	800387c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	b292      	uxth	r2, r2
 8003928:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	1c9a      	adds	r2, r3, #2
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10e      	bne.n	800396a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800395a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff ff93 	bl	8003890 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b086      	sub	sp, #24
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b04      	cmp	r3, #4
 800398c:	d13a      	bne.n	8003a04 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b01      	cmp	r3, #1
 8003996:	d109      	bne.n	80039ac <I2S_IRQHandler+0x3a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d102      	bne.n	80039ac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff ffb4 	bl	8003914 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d126      	bne.n	8003a04 <I2S_IRQHandler+0x92>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b20      	cmp	r3, #32
 80039c2:	d11f      	bne.n	8003a04 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039d4:	2300      	movs	r3, #0
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f043 0202 	orr.w	r2, r3, #2
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7ff ff50 	bl	80038a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d136      	bne.n	8003a7e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d109      	bne.n	8003a2e <I2S_IRQHandler+0xbc>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a24:	2b80      	cmp	r3, #128	; 0x80
 8003a26:	d102      	bne.n	8003a2e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff ff45 	bl	80038b8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d122      	bne.n	8003a7e <I2S_IRQHandler+0x10c>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d11b      	bne.n	8003a7e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a54:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a70:	f043 0204 	orr.w	r2, r3, #4
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff ff13 	bl	80038a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a7e:	bf00      	nop
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4aa2      	ldr	r2, [pc, #648]	; (8003d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d101      	bne.n	8003aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003aa2:	4ba2      	ldr	r3, [pc, #648]	; (8003d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003aa4:	e001      	b.n	8003aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003aa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a9b      	ldr	r2, [pc, #620]	; (8003d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d101      	bne.n	8003ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ac0:	4b9a      	ldr	r3, [pc, #616]	; (8003d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ac2:	e001      	b.n	8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ac4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad4:	d004      	beq.n	8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f040 8099 	bne.w	8003c12 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d107      	bne.n	8003afa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f925 	bl	8003d44 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d107      	bne.n	8003b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f9c8 	bl	8003ea4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1a:	2b40      	cmp	r3, #64	; 0x40
 8003b1c:	d13a      	bne.n	8003b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d035      	beq.n	8003b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a7e      	ldr	r2, [pc, #504]	; (8003d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d101      	bne.n	8003b36 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003b32:	4b7e      	ldr	r3, [pc, #504]	; (8003d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b34:	e001      	b.n	8003b3a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003b36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4979      	ldr	r1, [pc, #484]	; (8003d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b42:	428b      	cmp	r3, r1
 8003b44:	d101      	bne.n	8003b4a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003b46:	4b79      	ldr	r3, [pc, #484]	; (8003d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b48:	e001      	b.n	8003b4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003b4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b52:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	f043 0202 	orr.w	r2, r3, #2
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff fe88 	bl	80038a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	f040 80be 	bne.w	8003d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80b8 	beq.w	8003d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a59      	ldr	r2, [pc, #356]	; (8003d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d101      	bne.n	8003bca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003bc6:	4b59      	ldr	r3, [pc, #356]	; (8003d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bc8:	e001      	b.n	8003bce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003bca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4954      	ldr	r1, [pc, #336]	; (8003d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bd6:	428b      	cmp	r3, r1
 8003bd8:	d101      	bne.n	8003bde <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003bda:	4b54      	ldr	r3, [pc, #336]	; (8003d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bdc:	e001      	b.n	8003be2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003bde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003be2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003be6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003be8:	2300      	movs	r3, #0
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	f043 0204 	orr.w	r2, r3, #4
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff fe4a 	bl	80038a4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c10:	e084      	b.n	8003d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d107      	bne.n	8003c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f8be 	bl	8003da8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d107      	bne.n	8003c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f8fd 	bl	8003e40 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d12f      	bne.n	8003cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d02a      	beq.n	8003cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c68:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a2e      	ldr	r2, [pc, #184]	; (8003d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d101      	bne.n	8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003c74:	4b2d      	ldr	r3, [pc, #180]	; (8003d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c76:	e001      	b.n	8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003c78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4929      	ldr	r1, [pc, #164]	; (8003d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c84:	428b      	cmp	r3, r1
 8003c86:	d101      	bne.n	8003c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003c88:	4b28      	ldr	r3, [pc, #160]	; (8003d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c8a:	e001      	b.n	8003c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003c8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c94:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca2:	f043 0202 	orr.w	r2, r3, #2
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff fdfa 	bl	80038a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d131      	bne.n	8003d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d02c      	beq.n	8003d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a17      	ldr	r2, [pc, #92]	; (8003d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d101      	bne.n	8003cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003cce:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cd0:	e001      	b.n	8003cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003cd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4912      	ldr	r1, [pc, #72]	; (8003d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cde:	428b      	cmp	r3, r1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003ce2:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ce4:	e001      	b.n	8003cea <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003ce6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cfe:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0c:	f043 0204 	orr.w	r2, r3, #4
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff fdc5 	bl	80038a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d1a:	e000      	b.n	8003d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d1c:	bf00      	nop
}
 8003d1e:	bf00      	nop
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40003800 	.word	0x40003800
 8003d2c:	40003400 	.word	0x40003400

08003d30 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	1c99      	adds	r1, r3, #2
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6251      	str	r1, [r2, #36]	; 0x24
 8003d56:	881a      	ldrh	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d113      	bne.n	8003d9e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d84:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d106      	bne.n	8003d9e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ffc9 	bl	8003d30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	1c99      	adds	r1, r3, #2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6251      	str	r1, [r2, #36]	; 0x24
 8003dba:	8819      	ldrh	r1, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1d      	ldr	r2, [pc, #116]	; (8003e38 <I2SEx_TxISR_I2SExt+0x90>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d101      	bne.n	8003dca <I2SEx_TxISR_I2SExt+0x22>
 8003dc6:	4b1d      	ldr	r3, [pc, #116]	; (8003e3c <I2SEx_TxISR_I2SExt+0x94>)
 8003dc8:	e001      	b.n	8003dce <I2SEx_TxISR_I2SExt+0x26>
 8003dca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dce:	460a      	mov	r2, r1
 8003dd0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d121      	bne.n	8003e2e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a12      	ldr	r2, [pc, #72]	; (8003e38 <I2SEx_TxISR_I2SExt+0x90>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d101      	bne.n	8003df8 <I2SEx_TxISR_I2SExt+0x50>
 8003df4:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <I2SEx_TxISR_I2SExt+0x94>)
 8003df6:	e001      	b.n	8003dfc <I2SEx_TxISR_I2SExt+0x54>
 8003df8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	490d      	ldr	r1, [pc, #52]	; (8003e38 <I2SEx_TxISR_I2SExt+0x90>)
 8003e04:	428b      	cmp	r3, r1
 8003e06:	d101      	bne.n	8003e0c <I2SEx_TxISR_I2SExt+0x64>
 8003e08:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <I2SEx_TxISR_I2SExt+0x94>)
 8003e0a:	e001      	b.n	8003e10 <I2SEx_TxISR_I2SExt+0x68>
 8003e0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d106      	bne.n	8003e2e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff ff81 	bl	8003d30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40003800 	.word	0x40003800
 8003e3c:	40003400 	.word	0x40003400

08003e40 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68d8      	ldr	r0, [r3, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	1c99      	adds	r1, r3, #2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e58:	b282      	uxth	r2, r0
 8003e5a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d113      	bne.n	8003e9c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e82:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff ff4a 	bl	8003d30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a20      	ldr	r2, [pc, #128]	; (8003f34 <I2SEx_RxISR_I2SExt+0x90>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <I2SEx_RxISR_I2SExt+0x16>
 8003eb6:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <I2SEx_RxISR_I2SExt+0x94>)
 8003eb8:	e001      	b.n	8003ebe <I2SEx_RxISR_I2SExt+0x1a>
 8003eba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ebe:	68d8      	ldr	r0, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	1c99      	adds	r1, r3, #2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003eca:	b282      	uxth	r2, r0
 8003ecc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d121      	bne.n	8003f2a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <I2SEx_RxISR_I2SExt+0x90>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d101      	bne.n	8003ef4 <I2SEx_RxISR_I2SExt+0x50>
 8003ef0:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <I2SEx_RxISR_I2SExt+0x94>)
 8003ef2:	e001      	b.n	8003ef8 <I2SEx_RxISR_I2SExt+0x54>
 8003ef4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	490d      	ldr	r1, [pc, #52]	; (8003f34 <I2SEx_RxISR_I2SExt+0x90>)
 8003f00:	428b      	cmp	r3, r1
 8003f02:	d101      	bne.n	8003f08 <I2SEx_RxISR_I2SExt+0x64>
 8003f04:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <I2SEx_RxISR_I2SExt+0x94>)
 8003f06:	e001      	b.n	8003f0c <I2SEx_RxISR_I2SExt+0x68>
 8003f08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f10:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d106      	bne.n	8003f2a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ff03 	bl	8003d30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40003800 	.word	0x40003800
 8003f38:	40003400 	.word	0x40003400

08003f3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e264      	b.n	8004418 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d075      	beq.n	8004046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f5a:	4ba3      	ldr	r3, [pc, #652]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d00c      	beq.n	8003f80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f66:	4ba0      	ldr	r3, [pc, #640]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d112      	bne.n	8003f98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f72:	4b9d      	ldr	r3, [pc, #628]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f7e:	d10b      	bne.n	8003f98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f80:	4b99      	ldr	r3, [pc, #612]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d05b      	beq.n	8004044 <HAL_RCC_OscConfig+0x108>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d157      	bne.n	8004044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e23f      	b.n	8004418 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa0:	d106      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x74>
 8003fa2:	4b91      	ldr	r3, [pc, #580]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a90      	ldr	r2, [pc, #576]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	e01d      	b.n	8003fec <HAL_RCC_OscConfig+0xb0>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x98>
 8003fba:	4b8b      	ldr	r3, [pc, #556]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a8a      	ldr	r2, [pc, #552]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	4b88      	ldr	r3, [pc, #544]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a87      	ldr	r2, [pc, #540]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8003fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e00b      	b.n	8003fec <HAL_RCC_OscConfig+0xb0>
 8003fd4:	4b84      	ldr	r3, [pc, #528]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a83      	ldr	r2, [pc, #524]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8003fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	4b81      	ldr	r3, [pc, #516]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a80      	ldr	r2, [pc, #512]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8003fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d013      	beq.n	800401c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff4:	f7fd f91a 	bl	800122c <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ffc:	f7fd f916 	bl	800122c <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e204      	b.n	8004418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400e:	4b76      	ldr	r3, [pc, #472]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0xc0>
 800401a:	e014      	b.n	8004046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401c:	f7fd f906 	bl	800122c <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004024:	f7fd f902 	bl	800122c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e1f0      	b.n	8004418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004036:	4b6c      	ldr	r3, [pc, #432]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0xe8>
 8004042:	e000      	b.n	8004046 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d063      	beq.n	800411a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004052:	4b65      	ldr	r3, [pc, #404]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00b      	beq.n	8004076 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800405e:	4b62      	ldr	r3, [pc, #392]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004066:	2b08      	cmp	r3, #8
 8004068:	d11c      	bne.n	80040a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800406a:	4b5f      	ldr	r3, [pc, #380]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d116      	bne.n	80040a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004076:	4b5c      	ldr	r3, [pc, #368]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <HAL_RCC_OscConfig+0x152>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d001      	beq.n	800408e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e1c4      	b.n	8004418 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408e:	4b56      	ldr	r3, [pc, #344]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	4952      	ldr	r1, [pc, #328]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a2:	e03a      	b.n	800411a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d020      	beq.n	80040ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040ac:	4b4f      	ldr	r3, [pc, #316]	; (80041ec <HAL_RCC_OscConfig+0x2b0>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b2:	f7fd f8bb 	bl	800122c <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ba:	f7fd f8b7 	bl	800122c <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e1a5      	b.n	8004418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040cc:	4b46      	ldr	r3, [pc, #280]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d8:	4b43      	ldr	r3, [pc, #268]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	4940      	ldr	r1, [pc, #256]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	600b      	str	r3, [r1, #0]
 80040ec:	e015      	b.n	800411a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ee:	4b3f      	ldr	r3, [pc, #252]	; (80041ec <HAL_RCC_OscConfig+0x2b0>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fd f89a 	bl	800122c <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040fc:	f7fd f896 	bl	800122c <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e184      	b.n	8004418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410e:	4b36      	ldr	r3, [pc, #216]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d030      	beq.n	8004188 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d016      	beq.n	800415c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800412e:	4b30      	ldr	r3, [pc, #192]	; (80041f0 <HAL_RCC_OscConfig+0x2b4>)
 8004130:	2201      	movs	r2, #1
 8004132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004134:	f7fd f87a 	bl	800122c <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800413c:	f7fd f876 	bl	800122c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e164      	b.n	8004418 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414e:	4b26      	ldr	r3, [pc, #152]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0x200>
 800415a:	e015      	b.n	8004188 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800415c:	4b24      	ldr	r3, [pc, #144]	; (80041f0 <HAL_RCC_OscConfig+0x2b4>)
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004162:	f7fd f863 	bl	800122c <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800416a:	f7fd f85f 	bl	800122c <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e14d      	b.n	8004418 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800417c:	4b1a      	ldr	r3, [pc, #104]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 800417e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1f0      	bne.n	800416a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 80a0 	beq.w	80042d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004196:	2300      	movs	r3, #0
 8004198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419a:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10f      	bne.n	80041c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a6:	2300      	movs	r3, #0
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	4a0e      	ldr	r2, [pc, #56]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b4:	6413      	str	r3, [r2, #64]	; 0x40
 80041b6:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c2:	2301      	movs	r3, #1
 80041c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c6:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <HAL_RCC_OscConfig+0x2b8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d121      	bne.n	8004216 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d2:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <HAL_RCC_OscConfig+0x2b8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a07      	ldr	r2, [pc, #28]	; (80041f4 <HAL_RCC_OscConfig+0x2b8>)
 80041d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041de:	f7fd f825 	bl	800122c <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e4:	e011      	b.n	800420a <HAL_RCC_OscConfig+0x2ce>
 80041e6:	bf00      	nop
 80041e8:	40023800 	.word	0x40023800
 80041ec:	42470000 	.word	0x42470000
 80041f0:	42470e80 	.word	0x42470e80
 80041f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f8:	f7fd f818 	bl	800122c <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e106      	b.n	8004418 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420a:	4b85      	ldr	r3, [pc, #532]	; (8004420 <HAL_RCC_OscConfig+0x4e4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d106      	bne.n	800422c <HAL_RCC_OscConfig+0x2f0>
 800421e:	4b81      	ldr	r3, [pc, #516]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	4a80      	ldr	r2, [pc, #512]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 8004224:	f043 0301 	orr.w	r3, r3, #1
 8004228:	6713      	str	r3, [r2, #112]	; 0x70
 800422a:	e01c      	b.n	8004266 <HAL_RCC_OscConfig+0x32a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b05      	cmp	r3, #5
 8004232:	d10c      	bne.n	800424e <HAL_RCC_OscConfig+0x312>
 8004234:	4b7b      	ldr	r3, [pc, #492]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004238:	4a7a      	ldr	r2, [pc, #488]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 800423a:	f043 0304 	orr.w	r3, r3, #4
 800423e:	6713      	str	r3, [r2, #112]	; 0x70
 8004240:	4b78      	ldr	r3, [pc, #480]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	4a77      	ldr	r2, [pc, #476]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6713      	str	r3, [r2, #112]	; 0x70
 800424c:	e00b      	b.n	8004266 <HAL_RCC_OscConfig+0x32a>
 800424e:	4b75      	ldr	r3, [pc, #468]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	4a74      	ldr	r2, [pc, #464]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	6713      	str	r3, [r2, #112]	; 0x70
 800425a:	4b72      	ldr	r3, [pc, #456]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	4a71      	ldr	r2, [pc, #452]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 8004260:	f023 0304 	bic.w	r3, r3, #4
 8004264:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d015      	beq.n	800429a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426e:	f7fc ffdd 	bl	800122c <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004274:	e00a      	b.n	800428c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004276:	f7fc ffd9 	bl	800122c <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	f241 3288 	movw	r2, #5000	; 0x1388
 8004284:	4293      	cmp	r3, r2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e0c5      	b.n	8004418 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428c:	4b65      	ldr	r3, [pc, #404]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0ee      	beq.n	8004276 <HAL_RCC_OscConfig+0x33a>
 8004298:	e014      	b.n	80042c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800429a:	f7fc ffc7 	bl	800122c <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a0:	e00a      	b.n	80042b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a2:	f7fc ffc3 	bl	800122c <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e0af      	b.n	8004418 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b8:	4b5a      	ldr	r3, [pc, #360]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1ee      	bne.n	80042a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d105      	bne.n	80042d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ca:	4b56      	ldr	r3, [pc, #344]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	4a55      	ldr	r2, [pc, #340]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 80042d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 809b 	beq.w	8004416 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042e0:	4b50      	ldr	r3, [pc, #320]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 030c 	and.w	r3, r3, #12
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d05c      	beq.n	80043a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d141      	bne.n	8004378 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f4:	4b4c      	ldr	r3, [pc, #304]	; (8004428 <HAL_RCC_OscConfig+0x4ec>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fa:	f7fc ff97 	bl	800122c <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004302:	f7fc ff93 	bl	800122c <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e081      	b.n	8004418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004314:	4b43      	ldr	r3, [pc, #268]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f0      	bne.n	8004302 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	69da      	ldr	r2, [r3, #28]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	019b      	lsls	r3, r3, #6
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	085b      	lsrs	r3, r3, #1
 8004338:	3b01      	subs	r3, #1
 800433a:	041b      	lsls	r3, r3, #16
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	061b      	lsls	r3, r3, #24
 8004344:	4937      	ldr	r1, [pc, #220]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 8004346:	4313      	orrs	r3, r2
 8004348:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800434a:	4b37      	ldr	r3, [pc, #220]	; (8004428 <HAL_RCC_OscConfig+0x4ec>)
 800434c:	2201      	movs	r2, #1
 800434e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7fc ff6c 	bl	800122c <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004358:	f7fc ff68 	bl	800122c <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e056      	b.n	8004418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436a:	4b2e      	ldr	r3, [pc, #184]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x41c>
 8004376:	e04e      	b.n	8004416 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004378:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <HAL_RCC_OscConfig+0x4ec>)
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437e:	f7fc ff55 	bl	800122c <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004386:	f7fc ff51 	bl	800122c <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e03f      	b.n	8004418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004398:	4b22      	ldr	r3, [pc, #136]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1f0      	bne.n	8004386 <HAL_RCC_OscConfig+0x44a>
 80043a4:	e037      	b.n	8004416 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e032      	b.n	8004418 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043b2:	4b1c      	ldr	r3, [pc, #112]	; (8004424 <HAL_RCC_OscConfig+0x4e8>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d028      	beq.n	8004412 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d121      	bne.n	8004412 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d8:	429a      	cmp	r2, r3
 80043da:	d11a      	bne.n	8004412 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043e2:	4013      	ands	r3, r2
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d111      	bne.n	8004412 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f8:	085b      	lsrs	r3, r3, #1
 80043fa:	3b01      	subs	r3, #1
 80043fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043fe:	429a      	cmp	r2, r3
 8004400:	d107      	bne.n	8004412 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800440e:	429a      	cmp	r2, r3
 8004410:	d001      	beq.n	8004416 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40007000 	.word	0x40007000
 8004424:	40023800 	.word	0x40023800
 8004428:	42470060 	.word	0x42470060

0800442c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e0cc      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004440:	4b68      	ldr	r3, [pc, #416]	; (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d90c      	bls.n	8004468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b65      	ldr	r3, [pc, #404]	; (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004456:	4b63      	ldr	r3, [pc, #396]	; (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d001      	beq.n	8004468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0b8      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d020      	beq.n	80044b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004480:	4b59      	ldr	r3, [pc, #356]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	4a58      	ldr	r2, [pc, #352]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800448a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004498:	4b53      	ldr	r3, [pc, #332]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	4a52      	ldr	r2, [pc, #328]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a4:	4b50      	ldr	r3, [pc, #320]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	494d      	ldr	r1, [pc, #308]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d044      	beq.n	800454c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d107      	bne.n	80044da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ca:	4b47      	ldr	r3, [pc, #284]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d119      	bne.n	800450a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e07f      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d003      	beq.n	80044ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d107      	bne.n	80044fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ea:	4b3f      	ldr	r3, [pc, #252]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e06f      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fa:	4b3b      	ldr	r3, [pc, #236]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e067      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800450a:	4b37      	ldr	r3, [pc, #220]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f023 0203 	bic.w	r2, r3, #3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4934      	ldr	r1, [pc, #208]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004518:	4313      	orrs	r3, r2
 800451a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800451c:	f7fc fe86 	bl	800122c <HAL_GetTick>
 8004520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004522:	e00a      	b.n	800453a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004524:	f7fc fe82 	bl	800122c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e04f      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	4b2b      	ldr	r3, [pc, #172]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 020c 	and.w	r2, r3, #12
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	429a      	cmp	r2, r3
 800454a:	d1eb      	bne.n	8004524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800454c:	4b25      	ldr	r3, [pc, #148]	; (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d20c      	bcs.n	8004574 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b22      	ldr	r3, [pc, #136]	; (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004562:	4b20      	ldr	r3, [pc, #128]	; (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0307 	and.w	r3, r3, #7
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d001      	beq.n	8004574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e032      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004580:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	4916      	ldr	r1, [pc, #88]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	4313      	orrs	r3, r2
 8004590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800459e:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	490e      	ldr	r1, [pc, #56]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045b2:	f000 f821 	bl	80045f8 <HAL_RCC_GetSysClockFreq>
 80045b6:	4602      	mov	r2, r0
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	091b      	lsrs	r3, r3, #4
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	490a      	ldr	r1, [pc, #40]	; (80045ec <HAL_RCC_ClockConfig+0x1c0>)
 80045c4:	5ccb      	ldrb	r3, [r1, r3]
 80045c6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ca:	4a09      	ldr	r2, [pc, #36]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045ce:	4b09      	ldr	r3, [pc, #36]	; (80045f4 <HAL_RCC_ClockConfig+0x1c8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fc fde6 	bl	80011a4 <HAL_InitTick>

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40023c00 	.word	0x40023c00
 80045e8:	40023800 	.word	0x40023800
 80045ec:	08008a8c 	.word	0x08008a8c
 80045f0:	20000000 	.word	0x20000000
 80045f4:	20000004 	.word	0x20000004

080045f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	607b      	str	r3, [r7, #4]
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	2300      	movs	r3, #0
 800460a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004610:	4b67      	ldr	r3, [pc, #412]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 030c 	and.w	r3, r3, #12
 8004618:	2b08      	cmp	r3, #8
 800461a:	d00d      	beq.n	8004638 <HAL_RCC_GetSysClockFreq+0x40>
 800461c:	2b08      	cmp	r3, #8
 800461e:	f200 80bd 	bhi.w	800479c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_RCC_GetSysClockFreq+0x34>
 8004626:	2b04      	cmp	r3, #4
 8004628:	d003      	beq.n	8004632 <HAL_RCC_GetSysClockFreq+0x3a>
 800462a:	e0b7      	b.n	800479c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800462c:	4b61      	ldr	r3, [pc, #388]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800462e:	60bb      	str	r3, [r7, #8]
       break;
 8004630:	e0b7      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004632:	4b61      	ldr	r3, [pc, #388]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004634:	60bb      	str	r3, [r7, #8]
      break;
 8004636:	e0b4      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004638:	4b5d      	ldr	r3, [pc, #372]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004640:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004642:	4b5b      	ldr	r3, [pc, #364]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d04d      	beq.n	80046ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800464e:	4b58      	ldr	r3, [pc, #352]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	099b      	lsrs	r3, r3, #6
 8004654:	461a      	mov	r2, r3
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800465e:	f04f 0100 	mov.w	r1, #0
 8004662:	ea02 0800 	and.w	r8, r2, r0
 8004666:	ea03 0901 	and.w	r9, r3, r1
 800466a:	4640      	mov	r0, r8
 800466c:	4649      	mov	r1, r9
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	014b      	lsls	r3, r1, #5
 8004678:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800467c:	0142      	lsls	r2, r0, #5
 800467e:	4610      	mov	r0, r2
 8004680:	4619      	mov	r1, r3
 8004682:	ebb0 0008 	subs.w	r0, r0, r8
 8004686:	eb61 0109 	sbc.w	r1, r1, r9
 800468a:	f04f 0200 	mov.w	r2, #0
 800468e:	f04f 0300 	mov.w	r3, #0
 8004692:	018b      	lsls	r3, r1, #6
 8004694:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004698:	0182      	lsls	r2, r0, #6
 800469a:	1a12      	subs	r2, r2, r0
 800469c:	eb63 0301 	sbc.w	r3, r3, r1
 80046a0:	f04f 0000 	mov.w	r0, #0
 80046a4:	f04f 0100 	mov.w	r1, #0
 80046a8:	00d9      	lsls	r1, r3, #3
 80046aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046ae:	00d0      	lsls	r0, r2, #3
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	eb12 0208 	adds.w	r2, r2, r8
 80046b8:	eb43 0309 	adc.w	r3, r3, r9
 80046bc:	f04f 0000 	mov.w	r0, #0
 80046c0:	f04f 0100 	mov.w	r1, #0
 80046c4:	0259      	lsls	r1, r3, #9
 80046c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80046ca:	0250      	lsls	r0, r2, #9
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4610      	mov	r0, r2
 80046d2:	4619      	mov	r1, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	461a      	mov	r2, r3
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	f7fb fd74 	bl	80001c8 <__aeabi_uldivmod>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4613      	mov	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	e04a      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ea:	4b31      	ldr	r3, [pc, #196]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	099b      	lsrs	r3, r3, #6
 80046f0:	461a      	mov	r2, r3
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046fa:	f04f 0100 	mov.w	r1, #0
 80046fe:	ea02 0400 	and.w	r4, r2, r0
 8004702:	ea03 0501 	and.w	r5, r3, r1
 8004706:	4620      	mov	r0, r4
 8004708:	4629      	mov	r1, r5
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	014b      	lsls	r3, r1, #5
 8004714:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004718:	0142      	lsls	r2, r0, #5
 800471a:	4610      	mov	r0, r2
 800471c:	4619      	mov	r1, r3
 800471e:	1b00      	subs	r0, r0, r4
 8004720:	eb61 0105 	sbc.w	r1, r1, r5
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	018b      	lsls	r3, r1, #6
 800472e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004732:	0182      	lsls	r2, r0, #6
 8004734:	1a12      	subs	r2, r2, r0
 8004736:	eb63 0301 	sbc.w	r3, r3, r1
 800473a:	f04f 0000 	mov.w	r0, #0
 800473e:	f04f 0100 	mov.w	r1, #0
 8004742:	00d9      	lsls	r1, r3, #3
 8004744:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004748:	00d0      	lsls	r0, r2, #3
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	1912      	adds	r2, r2, r4
 8004750:	eb45 0303 	adc.w	r3, r5, r3
 8004754:	f04f 0000 	mov.w	r0, #0
 8004758:	f04f 0100 	mov.w	r1, #0
 800475c:	0299      	lsls	r1, r3, #10
 800475e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004762:	0290      	lsls	r0, r2, #10
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4610      	mov	r0, r2
 800476a:	4619      	mov	r1, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	461a      	mov	r2, r3
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	f7fb fd28 	bl	80001c8 <__aeabi_uldivmod>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4613      	mov	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	0c1b      	lsrs	r3, r3, #16
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	3301      	adds	r3, #1
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	fbb2 f3f3 	udiv	r3, r2, r3
 8004798:	60bb      	str	r3, [r7, #8]
      break;
 800479a:	e002      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800479c:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800479e:	60bb      	str	r3, [r7, #8]
      break;
 80047a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047a2:	68bb      	ldr	r3, [r7, #8]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80047ae:	bf00      	nop
 80047b0:	40023800 	.word	0x40023800
 80047b4:	00f42400 	.word	0x00f42400
 80047b8:	007a1200 	.word	0x007a1200

080047bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047c0:	4b03      	ldr	r3, [pc, #12]	; (80047d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047c2:	681b      	ldr	r3, [r3, #0]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20000000 	.word	0x20000000

080047d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047d8:	f7ff fff0 	bl	80047bc <HAL_RCC_GetHCLKFreq>
 80047dc:	4602      	mov	r2, r0
 80047de:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	0a9b      	lsrs	r3, r3, #10
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	4903      	ldr	r1, [pc, #12]	; (80047f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ea:	5ccb      	ldrb	r3, [r1, r3]
 80047ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40023800 	.word	0x40023800
 80047f8:	08008a9c 	.word	0x08008a9c

080047fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d105      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004820:	2b00      	cmp	r3, #0
 8004822:	d035      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004824:	4b62      	ldr	r3, [pc, #392]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800482a:	f7fc fcff 	bl	800122c <HAL_GetTick>
 800482e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004830:	e008      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004832:	f7fc fcfb 	bl	800122c <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e0b0      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004844:	4b5b      	ldr	r3, [pc, #364]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f0      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	019a      	lsls	r2, r3, #6
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	071b      	lsls	r3, r3, #28
 800485c:	4955      	ldr	r1, [pc, #340]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004864:	4b52      	ldr	r3, [pc, #328]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800486a:	f7fc fcdf 	bl	800122c <HAL_GetTick>
 800486e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004872:	f7fc fcdb 	bl	800122c <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e090      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004884:	4b4b      	ldr	r3, [pc, #300]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 8083 	beq.w	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	4b44      	ldr	r3, [pc, #272]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	4a43      	ldr	r2, [pc, #268]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ac:	6413      	str	r3, [r2, #64]	; 0x40
 80048ae:	4b41      	ldr	r3, [pc, #260]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80048ba:	4b3f      	ldr	r3, [pc, #252]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a3e      	ldr	r2, [pc, #248]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048c6:	f7fc fcb1 	bl	800122c <HAL_GetTick>
 80048ca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80048cc:	e008      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80048ce:	f7fc fcad 	bl	800122c <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e062      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80048e0:	4b35      	ldr	r3, [pc, #212]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f0      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048ec:	4b31      	ldr	r3, [pc, #196]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d02f      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	429a      	cmp	r2, r3
 8004908:	d028      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800490a:	4b2a      	ldr	r3, [pc, #168]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004912:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004914:	4b29      	ldr	r3, [pc, #164]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004916:	2201      	movs	r2, #1
 8004918:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800491a:	4b28      	ldr	r3, [pc, #160]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004920:	4a24      	ldr	r2, [pc, #144]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004926:	4b23      	ldr	r3, [pc, #140]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b01      	cmp	r3, #1
 8004930:	d114      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004932:	f7fc fc7b 	bl	800122c <HAL_GetTick>
 8004936:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004938:	e00a      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800493a:	f7fc fc77 	bl	800122c <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	f241 3288 	movw	r2, #5000	; 0x1388
 8004948:	4293      	cmp	r3, r2
 800494a:	d901      	bls.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e02a      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004950:	4b18      	ldr	r3, [pc, #96]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0ee      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004968:	d10d      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800496a:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800497a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497e:	490d      	ldr	r1, [pc, #52]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004980:	4313      	orrs	r3, r2
 8004982:	608b      	str	r3, [r1, #8]
 8004984:	e005      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004986:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	4a0a      	ldr	r2, [pc, #40]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800498c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004990:	6093      	str	r3, [r2, #8]
 8004992:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004994:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800499e:	4905      	ldr	r1, [pc, #20]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	42470068 	.word	0x42470068
 80049b4:	40023800 	.word	0x40023800
 80049b8:	40007000 	.word	0x40007000
 80049bc:	42470e40 	.word	0x42470e40

080049c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d13e      	bne.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80049de:	4b23      	ldr	r3, [pc, #140]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d005      	beq.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d12f      	bne.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80049f4:	4b1e      	ldr	r3, [pc, #120]	; (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049f6:	617b      	str	r3, [r7, #20]
          break;
 80049f8:	e02f      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80049fa:	4b1c      	ldr	r3, [pc, #112]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a06:	d108      	bne.n	8004a1a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a08:	4b18      	ldr	r3, [pc, #96]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a10:	4a18      	ldr	r2, [pc, #96]	; (8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	e007      	b.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a1a:	4b14      	ldr	r3, [pc, #80]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a22:	4a15      	ldr	r2, [pc, #84]	; (8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004a2a:	4b10      	ldr	r3, [pc, #64]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a30:	099b      	lsrs	r3, r3, #6
 8004a32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	fb02 f303 	mul.w	r3, r2, r3
 8004a3c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004a3e:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a44:	0f1b      	lsrs	r3, r3, #28
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a50:	617b      	str	r3, [r7, #20]
          break;
 8004a52:	e002      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]
          break;
 8004a58:	bf00      	nop
        }
      }
      break;
 8004a5a:	bf00      	nop
    }
  }
  return frequency;
 8004a5c:	697b      	ldr	r3, [r7, #20]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	00bb8000 	.word	0x00bb8000
 8004a74:	007a1200 	.word	0x007a1200
 8004a78:	00f42400 	.word	0x00f42400

08004a7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e07b      	b.n	8004b86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d108      	bne.n	8004aa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a9e:	d009      	beq.n	8004ab4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	61da      	str	r2, [r3, #28]
 8004aa6:	e005      	b.n	8004ab4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d106      	bne.n	8004ad4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fc f9ae 	bl	8000e30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b38:	ea42 0103 	orr.w	r1, r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	0c1b      	lsrs	r3, r3, #16
 8004b52:	f003 0104 	and.w	r1, r3, #4
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	f003 0210 	and.w	r2, r3, #16
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e041      	b.n	8004c24 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d106      	bne.n	8004bba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7fc f9cb 	bl	8000f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4610      	mov	r0, r2
 8004bce:	f000 fb3b 	bl	8005248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d001      	beq.n	8004c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e04e      	b.n	8004ce2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a23      	ldr	r2, [pc, #140]	; (8004cf0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d022      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6e:	d01d      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1f      	ldr	r2, [pc, #124]	; (8004cf4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d018      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1e      	ldr	r2, [pc, #120]	; (8004cf8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d013      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a1c      	ldr	r2, [pc, #112]	; (8004cfc <HAL_TIM_Base_Start_IT+0xd0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00e      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a1b      	ldr	r2, [pc, #108]	; (8004d00 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d009      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a19      	ldr	r2, [pc, #100]	; (8004d04 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d111      	bne.n	8004cd0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b06      	cmp	r3, #6
 8004cbc:	d010      	beq.n	8004ce0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0201 	orr.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cce:	e007      	b.n	8004ce0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40010000 	.word	0x40010000
 8004cf4:	40000400 	.word	0x40000400
 8004cf8:	40000800 	.word	0x40000800
 8004cfc:	40000c00 	.word	0x40000c00
 8004d00:	40010400 	.word	0x40010400
 8004d04:	40014000 	.word	0x40014000
 8004d08:	40001800 	.word	0x40001800

08004d0c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0201 	bic.w	r2, r2, #1
 8004d22:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6a1a      	ldr	r2, [r3, #32]
 8004d2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10f      	bne.n	8004d54 <HAL_TIM_Base_Stop_IT+0x48>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6a1a      	ldr	r2, [r3, #32]
 8004d3a:	f240 4344 	movw	r3, #1092	; 0x444
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d107      	bne.n	8004d54 <HAL_TIM_Base_Stop_IT+0x48>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0201 	bic.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b086      	sub	sp, #24
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e097      	b.n	8004eae <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fc f894 	bl	8000ec0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dae:	f023 0307 	bic.w	r3, r3, #7
 8004db2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f000 fa42 	bl	8005248 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dec:	f023 0303 	bic.w	r3, r3, #3
 8004df0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004e0a:	f023 030c 	bic.w	r3, r3, #12
 8004e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	021b      	lsls	r3, r3, #8
 8004e26:	4313      	orrs	r3, r2
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	011a      	lsls	r2, r3, #4
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	031b      	lsls	r3, r3, #12
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e48:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004e50:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b084      	sub	sp, #16
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ec6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ece:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ed6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ede:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d110      	bne.n	8004f08 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d102      	bne.n	8004ef2 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004eec:	7b7b      	ldrb	r3, [r7, #13]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d001      	beq.n	8004ef6 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e069      	b.n	8004fca <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2202      	movs	r2, #2
 8004f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f06:	e031      	b.n	8004f6c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d110      	bne.n	8004f30 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f0e:	7bbb      	ldrb	r3, [r7, #14]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d102      	bne.n	8004f1a <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f14:	7b3b      	ldrb	r3, [r7, #12]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d001      	beq.n	8004f1e <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e055      	b.n	8004fca <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2202      	movs	r2, #2
 8004f22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f2e:	e01d      	b.n	8004f6c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d108      	bne.n	8004f48 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f36:	7bbb      	ldrb	r3, [r7, #14]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d105      	bne.n	8004f48 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f3c:	7b7b      	ldrb	r3, [r7, #13]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d102      	bne.n	8004f48 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f42:	7b3b      	ldrb	r3, [r7, #12]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d001      	beq.n	8004f4c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e03e      	b.n	8004fca <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_TIM_Encoder_Start+0xc4>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d008      	beq.n	8004f8a <HAL_TIM_Encoder_Start+0xd4>
 8004f78:	e00f      	b.n	8004f9a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	2100      	movs	r1, #0
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fa00 	bl	8005388 <TIM_CCxChannelCmd>
      break;
 8004f88:	e016      	b.n	8004fb8 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	2104      	movs	r1, #4
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 f9f8 	bl	8005388 <TIM_CCxChannelCmd>
      break;
 8004f98:	e00e      	b.n	8004fb8 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 f9f0 	bl	8005388 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2201      	movs	r2, #1
 8004fae:	2104      	movs	r1, #4
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 f9e9 	bl	8005388 <TIM_CCxChannelCmd>
      break;
 8004fb6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d122      	bne.n	800502e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d11b      	bne.n	800502e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f06f 0202 	mvn.w	r2, #2
 8004ffe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	f003 0303 	and.w	r3, r3, #3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f8f8 	bl	800520a <HAL_TIM_IC_CaptureCallback>
 800501a:	e005      	b.n	8005028 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f8ea 	bl	80051f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f8fb 	bl	800521e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b04      	cmp	r3, #4
 800503a:	d122      	bne.n	8005082 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b04      	cmp	r3, #4
 8005048:	d11b      	bne.n	8005082 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f06f 0204 	mvn.w	r2, #4
 8005052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f8ce 	bl	800520a <HAL_TIM_IC_CaptureCallback>
 800506e:	e005      	b.n	800507c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f8c0 	bl	80051f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f8d1 	bl	800521e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b08      	cmp	r3, #8
 800508e:	d122      	bne.n	80050d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b08      	cmp	r3, #8
 800509c:	d11b      	bne.n	80050d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f06f 0208 	mvn.w	r2, #8
 80050a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2204      	movs	r2, #4
 80050ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f8a4 	bl	800520a <HAL_TIM_IC_CaptureCallback>
 80050c2:	e005      	b.n	80050d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f896 	bl	80051f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f8a7 	bl	800521e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	2b10      	cmp	r3, #16
 80050e2:	d122      	bne.n	800512a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b10      	cmp	r3, #16
 80050f0:	d11b      	bne.n	800512a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f06f 0210 	mvn.w	r2, #16
 80050fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2208      	movs	r2, #8
 8005100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f87a 	bl	800520a <HAL_TIM_IC_CaptureCallback>
 8005116:	e005      	b.n	8005124 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f86c 	bl	80051f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f87d 	bl	800521e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b01      	cmp	r3, #1
 8005136:	d10e      	bne.n	8005156 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b01      	cmp	r3, #1
 8005144:	d107      	bne.n	8005156 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f06f 0201 	mvn.w	r2, #1
 800514e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f846 	bl	80051e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005160:	2b80      	cmp	r3, #128	; 0x80
 8005162:	d10e      	bne.n	8005182 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516e:	2b80      	cmp	r3, #128	; 0x80
 8005170:	d107      	bne.n	8005182 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800517a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f9af 	bl	80054e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518c:	2b40      	cmp	r3, #64	; 0x40
 800518e:	d10e      	bne.n	80051ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519a:	2b40      	cmp	r3, #64	; 0x40
 800519c:	d107      	bne.n	80051ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f842 	bl	8005232 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f003 0320 	and.w	r3, r3, #32
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d10e      	bne.n	80051da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d107      	bne.n	80051da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f06f 0220 	mvn.w	r2, #32
 80051d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f979 	bl	80054cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
	...

08005248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a40      	ldr	r2, [pc, #256]	; (800535c <TIM_Base_SetConfig+0x114>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d013      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005266:	d00f      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a3d      	ldr	r2, [pc, #244]	; (8005360 <TIM_Base_SetConfig+0x118>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00b      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a3c      	ldr	r2, [pc, #240]	; (8005364 <TIM_Base_SetConfig+0x11c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d007      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a3b      	ldr	r2, [pc, #236]	; (8005368 <TIM_Base_SetConfig+0x120>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d003      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a3a      	ldr	r2, [pc, #232]	; (800536c <TIM_Base_SetConfig+0x124>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d108      	bne.n	800529a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a2f      	ldr	r2, [pc, #188]	; (800535c <TIM_Base_SetConfig+0x114>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d02b      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a8:	d027      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a2c      	ldr	r2, [pc, #176]	; (8005360 <TIM_Base_SetConfig+0x118>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d023      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a2b      	ldr	r2, [pc, #172]	; (8005364 <TIM_Base_SetConfig+0x11c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d01f      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a2a      	ldr	r2, [pc, #168]	; (8005368 <TIM_Base_SetConfig+0x120>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01b      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a29      	ldr	r2, [pc, #164]	; (800536c <TIM_Base_SetConfig+0x124>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d017      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a28      	ldr	r2, [pc, #160]	; (8005370 <TIM_Base_SetConfig+0x128>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a27      	ldr	r2, [pc, #156]	; (8005374 <TIM_Base_SetConfig+0x12c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00f      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a26      	ldr	r2, [pc, #152]	; (8005378 <TIM_Base_SetConfig+0x130>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00b      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a25      	ldr	r2, [pc, #148]	; (800537c <TIM_Base_SetConfig+0x134>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d007      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a24      	ldr	r2, [pc, #144]	; (8005380 <TIM_Base_SetConfig+0x138>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d003      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a23      	ldr	r2, [pc, #140]	; (8005384 <TIM_Base_SetConfig+0x13c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d108      	bne.n	800530c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4313      	orrs	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a0a      	ldr	r2, [pc, #40]	; (800535c <TIM_Base_SetConfig+0x114>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_Base_SetConfig+0xf8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a0c      	ldr	r2, [pc, #48]	; (800536c <TIM_Base_SetConfig+0x124>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d103      	bne.n	8005348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	615a      	str	r2, [r3, #20]
}
 800534e:	bf00      	nop
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40010000 	.word	0x40010000
 8005360:	40000400 	.word	0x40000400
 8005364:	40000800 	.word	0x40000800
 8005368:	40000c00 	.word	0x40000c00
 800536c:	40010400 	.word	0x40010400
 8005370:	40014000 	.word	0x40014000
 8005374:	40014400 	.word	0x40014400
 8005378:	40014800 	.word	0x40014800
 800537c:	40001800 	.word	0x40001800
 8005380:	40001c00 	.word	0x40001c00
 8005384:	40002000 	.word	0x40002000

08005388 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f003 031f 	and.w	r3, r3, #31
 800539a:	2201      	movs	r2, #1
 800539c:	fa02 f303 	lsl.w	r3, r2, r3
 80053a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a1a      	ldr	r2, [r3, #32]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	43db      	mvns	r3, r3
 80053aa:	401a      	ands	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a1a      	ldr	r2, [r3, #32]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f003 031f 	and.w	r3, r3, #31
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	fa01 f303 	lsl.w	r3, r1, r3
 80053c0:	431a      	orrs	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	621a      	str	r2, [r3, #32]
}
 80053c6:	bf00      	nop
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e05a      	b.n	80054a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a21      	ldr	r2, [pc, #132]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d022      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005438:	d01d      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1d      	ldr	r2, [pc, #116]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d018      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1b      	ldr	r2, [pc, #108]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d013      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a1a      	ldr	r2, [pc, #104]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00e      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a18      	ldr	r2, [pc, #96]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d009      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a17      	ldr	r2, [pc, #92]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d004      	beq.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a15      	ldr	r2, [pc, #84]	; (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d10c      	bne.n	8005490 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800547c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	4313      	orrs	r3, r2
 8005486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40010000 	.word	0x40010000
 80054b4:	40000400 	.word	0x40000400
 80054b8:	40000800 	.word	0x40000800
 80054bc:	40000c00 	.word	0x40000c00
 80054c0:	40010400 	.word	0x40010400
 80054c4:	40014000 	.word	0x40014000
 80054c8:	40001800 	.word	0x40001800

080054cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054f4:	b084      	sub	sp, #16
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b084      	sub	sp, #16
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	f107 001c 	add.w	r0, r7, #28
 8005502:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005508:	2b01      	cmp	r3, #1
 800550a:	d122      	bne.n	8005552 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005536:	2b01      	cmp	r3, #1
 8005538:	d105      	bne.n	8005546 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f9a0 	bl	800588c <USB_CoreReset>
 800554c:	4603      	mov	r3, r0
 800554e:	73fb      	strb	r3, [r7, #15]
 8005550:	e01a      	b.n	8005588 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f994 	bl	800588c <USB_CoreReset>
 8005564:	4603      	mov	r3, r0
 8005566:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	639a      	str	r2, [r3, #56]	; 0x38
 800557a:	e005      	b.n	8005588 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	2b01      	cmp	r3, #1
 800558c:	d10b      	bne.n	80055a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f043 0206 	orr.w	r2, r3, #6
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f043 0220 	orr.w	r2, r3, #32
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055b2:	b004      	add	sp, #16
 80055b4:	4770      	bx	lr

080055b6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f043 0201 	orr.w	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f023 0201 	bic.w	r2, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	460b      	mov	r3, r1
 8005604:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005616:	78fb      	ldrb	r3, [r7, #3]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d115      	bne.n	8005648 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005628:	2001      	movs	r0, #1
 800562a:	f7fb fe0b 	bl	8001244 <HAL_Delay>
      ms++;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3301      	adds	r3, #1
 8005632:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f91a 	bl	800586e <USB_GetMode>
 800563a:	4603      	mov	r3, r0
 800563c:	2b01      	cmp	r3, #1
 800563e:	d01e      	beq.n	800567e <USB_SetCurrentMode+0x84>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b31      	cmp	r3, #49	; 0x31
 8005644:	d9f0      	bls.n	8005628 <USB_SetCurrentMode+0x2e>
 8005646:	e01a      	b.n	800567e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d115      	bne.n	800567a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800565a:	2001      	movs	r0, #1
 800565c:	f7fb fdf2 	bl	8001244 <HAL_Delay>
      ms++;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3301      	adds	r3, #1
 8005664:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f901 	bl	800586e <USB_GetMode>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d005      	beq.n	800567e <USB_SetCurrentMode+0x84>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b31      	cmp	r3, #49	; 0x31
 8005676:	d9f0      	bls.n	800565a <USB_SetCurrentMode+0x60>
 8005678:	e001      	b.n	800567e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e005      	b.n	800568a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b32      	cmp	r3, #50	; 0x32
 8005682:	d101      	bne.n	8005688 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e000      	b.n	800568a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	019b      	lsls	r3, r3, #6
 80056a6:	f043 0220 	orr.w	r2, r3, #32
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3301      	adds	r3, #1
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	4a08      	ldr	r2, [pc, #32]	; (80056d8 <USB_FlushTxFifo+0x44>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e006      	b.n	80056cc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d0f1      	beq.n	80056ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	00030d40 	.word	0x00030d40

080056dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2210      	movs	r2, #16
 80056ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3301      	adds	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	4a08      	ldr	r2, [pc, #32]	; (8005718 <USB_FlushRxFifo+0x3c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d901      	bls.n	80056fe <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e006      	b.n	800570c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0310 	and.w	r3, r3, #16
 8005706:	2b10      	cmp	r3, #16
 8005708:	d0f1      	beq.n	80056ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	00030d40 	.word	0x00030d40

0800571c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800571c:	b480      	push	{r7}
 800571e:	b089      	sub	sp, #36	; 0x24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	4611      	mov	r1, r2
 8005728:	461a      	mov	r2, r3
 800572a:	460b      	mov	r3, r1
 800572c:	71fb      	strb	r3, [r7, #7]
 800572e:	4613      	mov	r3, r2
 8005730:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800573a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800573e:	2b00      	cmp	r3, #0
 8005740:	d123      	bne.n	800578a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005742:	88bb      	ldrh	r3, [r7, #4]
 8005744:	3303      	adds	r3, #3
 8005746:	089b      	lsrs	r3, r3, #2
 8005748:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800574a:	2300      	movs	r3, #0
 800574c:	61bb      	str	r3, [r7, #24]
 800574e:	e018      	b.n	8005782 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005750:	79fb      	ldrb	r3, [r7, #7]
 8005752:	031a      	lsls	r2, r3, #12
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	4413      	add	r3, r2
 8005758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800575c:	461a      	mov	r2, r3
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	3301      	adds	r3, #1
 8005768:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	3301      	adds	r3, #1
 800576e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	3301      	adds	r3, #1
 8005774:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	3301      	adds	r3, #1
 800577a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	3301      	adds	r3, #1
 8005780:	61bb      	str	r3, [r7, #24]
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	429a      	cmp	r2, r3
 8005788:	d3e2      	bcc.n	8005750 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3724      	adds	r7, #36	; 0x24
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005798:	b480      	push	{r7}
 800579a:	b08b      	sub	sp, #44	; 0x2c
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	4613      	mov	r3, r2
 80057a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80057ae:	88fb      	ldrh	r3, [r7, #6]
 80057b0:	089b      	lsrs	r3, r3, #2
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80057b6:	88fb      	ldrh	r3, [r7, #6]
 80057b8:	f003 0303 	and.w	r3, r3, #3
 80057bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80057be:	2300      	movs	r3, #0
 80057c0:	623b      	str	r3, [r7, #32]
 80057c2:	e014      	b.n	80057ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	3301      	adds	r3, #1
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	3301      	adds	r3, #1
 80057da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	3301      	adds	r3, #1
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	3301      	adds	r3, #1
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	3301      	adds	r3, #1
 80057ec:	623b      	str	r3, [r7, #32]
 80057ee:	6a3a      	ldr	r2, [r7, #32]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d3e6      	bcc.n	80057c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80057f6:	8bfb      	ldrh	r3, [r7, #30]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01e      	beq.n	800583a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005806:	461a      	mov	r2, r3
 8005808:	f107 0310 	add.w	r3, r7, #16
 800580c:	6812      	ldr	r2, [r2, #0]
 800580e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	b2db      	uxtb	r3, r3
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	fa22 f303 	lsr.w	r3, r2, r3
 800581c:	b2da      	uxtb	r2, r3
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	701a      	strb	r2, [r3, #0]
      i++;
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	3301      	adds	r3, #1
 8005826:	623b      	str	r3, [r7, #32]
      pDest++;
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	3301      	adds	r3, #1
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800582e:	8bfb      	ldrh	r3, [r7, #30]
 8005830:	3b01      	subs	r3, #1
 8005832:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005834:	8bfb      	ldrh	r3, [r7, #30]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1ea      	bne.n	8005810 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800583c:	4618      	mov	r0, r3
 800583e:	372c      	adds	r7, #44	; 0x2c
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4013      	ands	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005860:	68fb      	ldr	r3, [r7, #12]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f003 0301 	and.w	r3, r3, #1
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	3301      	adds	r3, #1
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	4a13      	ldr	r2, [pc, #76]	; (80058ec <USB_CoreReset+0x60>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d901      	bls.n	80058a8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e01a      	b.n	80058de <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	daf3      	bge.n	8005898 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f043 0201 	orr.w	r2, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3301      	adds	r3, #1
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	4a09      	ldr	r2, [pc, #36]	; (80058ec <USB_CoreReset+0x60>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d901      	bls.n	80058d0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e006      	b.n	80058de <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d0f1      	beq.n	80058c0 <USB_CoreReset+0x34>

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	00030d40 	.word	0x00030d40

080058f0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058f0:	b084      	sub	sp, #16
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	f107 001c 	add.w	r0, r7, #28
 80058fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800590c:	461a      	mov	r2, r3
 800590e:	2300      	movs	r3, #0
 8005910:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593e:	2b00      	cmp	r3, #0
 8005940:	d018      	beq.n	8005974 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	2b01      	cmp	r3, #1
 8005946:	d10a      	bne.n	800595e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005956:	f043 0304 	orr.w	r3, r3, #4
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	e014      	b.n	8005988 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800596c:	f023 0304 	bic.w	r3, r3, #4
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	e009      	b.n	8005988 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005982:	f023 0304 	bic.w	r3, r3, #4
 8005986:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005988:	2110      	movs	r1, #16
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff fe82 	bl	8005694 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff fea3 	bl	80056dc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	e015      	b.n	80059c8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a8:	461a      	mov	r2, r3
 80059aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059ae:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059bc:	461a      	mov	r2, r3
 80059be:	2300      	movs	r3, #0
 80059c0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3301      	adds	r3, #1
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d3e5      	bcc.n	800599c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059dc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00b      	beq.n	8005a02 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059f0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a13      	ldr	r2, [pc, #76]	; (8005a44 <USB_HostInit+0x154>)
 80059f6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <USB_HostInit+0x158>)
 80059fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005a00:	e009      	b.n	8005a16 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2280      	movs	r2, #128	; 0x80
 8005a06:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a10      	ldr	r2, [pc, #64]	; (8005a4c <USB_HostInit+0x15c>)
 8005a0c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a0f      	ldr	r2, [pc, #60]	; (8005a50 <USB_HostInit+0x160>)
 8005a12:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d105      	bne.n	8005a28 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	f043 0210 	orr.w	r2, r3, #16
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699a      	ldr	r2, [r3, #24]
 8005a2c:	4b09      	ldr	r3, [pc, #36]	; (8005a54 <USB_HostInit+0x164>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a40:	b004      	add	sp, #16
 8005a42:	4770      	bx	lr
 8005a44:	01000200 	.word	0x01000200
 8005a48:	00e00300 	.word	0x00e00300
 8005a4c:	00600080 	.word	0x00600080
 8005a50:	004000e0 	.word	0x004000e0
 8005a54:	a3200008 	.word	0xa3200008

08005a58 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a76:	f023 0303 	bic.w	r3, r3, #3
 8005a7a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	68f9      	ldr	r1, [r7, #12]
 8005a8c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a90:	4313      	orrs	r3, r2
 8005a92:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d107      	bne.n	8005aaa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005aa6:	6053      	str	r3, [r2, #4]
 8005aa8:	e009      	b.n	8005abe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d106      	bne.n	8005abe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f241 7370 	movw	r3, #6000	; 0x1770
 8005abc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005aec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005afa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005afc:	2064      	movs	r0, #100	; 0x64
 8005afe:	f7fb fba1 	bl	8001244 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b0e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005b10:	200a      	movs	r0, #10
 8005b12:	f7fb fb97 	bl	8001244 <HAL_Delay>

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b44:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d109      	bne.n	8005b64 <USB_DriveVbus+0x44>
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d106      	bne.n	8005b64 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b62:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6e:	d109      	bne.n	8005b84 <USB_DriveVbus+0x64>
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d106      	bne.n	8005b84 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b82:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	0c5b      	lsrs	r3, r3, #17
 8005bb0:	f003 0303 	and.w	r3, r3, #3
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	b29b      	uxth	r3, r3
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
	...

08005be4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b088      	sub	sp, #32
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	4608      	mov	r0, r1
 8005bee:	4611      	mov	r1, r2
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	70fb      	strb	r3, [r7, #3]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	70bb      	strb	r3, [r7, #2]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005c06:	78fb      	ldrb	r3, [r7, #3]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c12:	461a      	mov	r2, r3
 8005c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c18:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005c1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d87e      	bhi.n	8005d20 <USB_HC_Init+0x13c>
 8005c22:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <USB_HC_Init+0x44>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c39 	.word	0x08005c39
 8005c2c:	08005ce3 	.word	0x08005ce3
 8005c30:	08005c39 	.word	0x08005c39
 8005c34:	08005ca5 	.word	0x08005ca5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c44:	461a      	mov	r2, r3
 8005c46:	f240 439d 	movw	r3, #1181	; 0x49d
 8005c4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005c4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	da10      	bge.n	8005c76 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	78fa      	ldrb	r2, [r7, #3]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c72:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005c74:	e057      	b.n	8005d26 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d051      	beq.n	8005d26 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	78fa      	ldrb	r2, [r7, #3]
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ca0:	60d3      	str	r3, [r2, #12]
      break;
 8005ca2:	e040      	b.n	8005d26 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	f240 639d 	movw	r3, #1693	; 0x69d
 8005cb6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005cb8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	da34      	bge.n	8005d2a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005cc0:	78fb      	ldrb	r3, [r7, #3]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	78fa      	ldrb	r2, [r7, #3]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cde:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ce0:	e023      	b.n	8005d2a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ce2:	78fb      	ldrb	r3, [r7, #3]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f240 2325 	movw	r3, #549	; 0x225
 8005cf4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005cf6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	da17      	bge.n	8005d2e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005cfe:	78fb      	ldrb	r3, [r7, #3]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	78fa      	ldrb	r2, [r7, #3]
 8005d0e:	0151      	lsls	r1, r2, #5
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	440a      	add	r2, r1
 8005d14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d18:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005d1c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005d1e:	e006      	b.n	8005d2e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	77fb      	strb	r3, [r7, #31]
      break;
 8005d24:	e004      	b.n	8005d30 <USB_HC_Init+0x14c>
      break;
 8005d26:	bf00      	nop
 8005d28:	e002      	b.n	8005d30 <USB_HC_Init+0x14c>
      break;
 8005d2a:	bf00      	nop
 8005d2c:	e000      	b.n	8005d30 <USB_HC_Init+0x14c>
      break;
 8005d2e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d36:	699a      	ldr	r2, [r3, #24]
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	f003 030f 	and.w	r3, r3, #15
 8005d3e:	2101      	movs	r1, #1
 8005d40:	fa01 f303 	lsl.w	r3, r1, r3
 8005d44:	6939      	ldr	r1, [r7, #16]
 8005d46:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005d5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	da03      	bge.n	8005d6a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d66:	61bb      	str	r3, [r7, #24]
 8005d68:	e001      	b.n	8005d6e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7ff ff0f 	bl	8005b92 <USB_GetHostSpeed>
 8005d74:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005d76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d106      	bne.n	8005d8c <USB_HC_Init+0x1a8>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d003      	beq.n	8005d8c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	e001      	b.n	8005d90 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d90:	787b      	ldrb	r3, [r7, #1]
 8005d92:	059b      	lsls	r3, r3, #22
 8005d94:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d98:	78bb      	ldrb	r3, [r7, #2]
 8005d9a:	02db      	lsls	r3, r3, #11
 8005d9c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005da0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005da2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005da6:	049b      	lsls	r3, r3, #18
 8005da8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005dac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005dae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005db0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005db4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dba:	78fb      	ldrb	r3, [r7, #3]
 8005dbc:	0159      	lsls	r1, r3, #5
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	440b      	add	r3, r1
 8005dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dcc:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005dce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d10f      	bne.n	8005df6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005dd6:	78fb      	ldrb	r3, [r7, #3]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	78fa      	ldrb	r2, [r7, #3]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005df4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005df6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3720      	adds	r7, #32
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08c      	sub	sp, #48	; 0x30
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	785b      	ldrb	r3, [r3, #1]
 8005e16:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e1c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d02d      	beq.n	8005e86 <USB_HC_StartXfer+0x86>
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	791b      	ldrb	r3, [r3, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d129      	bne.n	8005e86 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005e32:	79fb      	ldrb	r3, [r7, #7]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d117      	bne.n	8005e68 <USB_HC_StartXfer+0x68>
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	79db      	ldrb	r3, [r3, #7]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <USB_HC_StartXfer+0x48>
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	79db      	ldrb	r3, [r3, #7]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d10f      	bne.n	8005e68 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	0151      	lsls	r1, r2, #5
 8005e5a:	6a3a      	ldr	r2, [r7, #32]
 8005e5c:	440a      	add	r2, r1
 8005e5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e66:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10b      	bne.n	8005e86 <USB_HC_StartXfer+0x86>
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	795b      	ldrb	r3, [r3, #5]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d107      	bne.n	8005e86 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	785b      	ldrb	r3, [r3, #1]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fa2f 	bl	80062e0 <USB_DoPing>
      return HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	e0f8      	b.n	8006078 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d018      	beq.n	8005ec0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	8912      	ldrh	r2, [r2, #8]
 8005e96:	4413      	add	r3, r2
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	8912      	ldrh	r2, [r2, #8]
 8005e9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ea2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005ea4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005ea6:	8b7b      	ldrh	r3, [r7, #26]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d90b      	bls.n	8005ec4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005eac:	8b7b      	ldrh	r3, [r7, #26]
 8005eae:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005eb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	8912      	ldrh	r2, [r2, #8]
 8005eb6:	fb02 f203 	mul.w	r2, r2, r3
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	611a      	str	r2, [r3, #16]
 8005ebe:	e001      	b.n	8005ec4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	78db      	ldrb	r3, [r3, #3]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d007      	beq.n	8005edc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ecc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	8912      	ldrh	r2, [r2, #8]
 8005ed2:	fb02 f203 	mul.w	r2, r2, r3
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	611a      	str	r2, [r3, #16]
 8005eda:	e003      	b.n	8005ee4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	695a      	ldr	r2, [r3, #20]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005eec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005eee:	04d9      	lsls	r1, r3, #19
 8005ef0:	4b63      	ldr	r3, [pc, #396]	; (8006080 <USB_HC_StartXfer+0x280>)
 8005ef2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ef4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	7a9b      	ldrb	r3, [r3, #10]
 8005efa:	075b      	lsls	r3, r3, #29
 8005efc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f00:	69f9      	ldr	r1, [r7, #28]
 8005f02:	0148      	lsls	r0, r1, #5
 8005f04:	6a39      	ldr	r1, [r7, #32]
 8005f06:	4401      	add	r1, r0
 8005f08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f0c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f0e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005f10:	79fb      	ldrb	r3, [r7, #7]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d009      	beq.n	8005f2a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	68d9      	ldr	r1, [r3, #12]
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f26:	460a      	mov	r2, r1
 8005f28:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	bf0c      	ite	eq
 8005f3a:	2301      	moveq	r3, #1
 8005f3c:	2300      	movne	r3, #0
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	0151      	lsls	r1, r2, #5
 8005f54:	6a3a      	ldr	r2, [r7, #32]
 8005f56:	440a      	add	r2, r1
 8005f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f60:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	7e7b      	ldrb	r3, [r7, #25]
 8005f72:	075b      	lsls	r3, r3, #29
 8005f74:	69f9      	ldr	r1, [r7, #28]
 8005f76:	0148      	lsls	r0, r1, #5
 8005f78:	6a39      	ldr	r1, [r7, #32]
 8005f7a:	4401      	add	r1, r0
 8005f7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005f80:	4313      	orrs	r3, r2
 8005f82:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	6a3b      	ldr	r3, [r7, #32]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f9a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	78db      	ldrb	r3, [r3, #3]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d004      	beq.n	8005fae <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005faa:	613b      	str	r3, [r7, #16]
 8005fac:	e003      	b.n	8005fb6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fb4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fbc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fca:	461a      	mov	r2, r3
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005fd0:	79fb      	ldrb	r3, [r7, #7]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e04e      	b.n	8006078 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	78db      	ldrb	r3, [r3, #3]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d149      	bne.n	8006076 <USB_HC_StartXfer+0x276>
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d045      	beq.n	8006076 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	79db      	ldrb	r3, [r3, #7]
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d830      	bhi.n	8006054 <USB_HC_StartXfer+0x254>
 8005ff2:	a201      	add	r2, pc, #4	; (adr r2, 8005ff8 <USB_HC_StartXfer+0x1f8>)
 8005ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff8:	08006009 	.word	0x08006009
 8005ffc:	0800602d 	.word	0x0800602d
 8006000:	08006009 	.word	0x08006009
 8006004:	0800602d 	.word	0x0800602d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	3303      	adds	r3, #3
 800600e:	089b      	lsrs	r3, r3, #2
 8006010:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006012:	8afa      	ldrh	r2, [r7, #22]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006018:	b29b      	uxth	r3, r3
 800601a:	429a      	cmp	r2, r3
 800601c:	d91c      	bls.n	8006058 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	f043 0220 	orr.w	r2, r3, #32
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	619a      	str	r2, [r3, #24]
        }
        break;
 800602a:	e015      	b.n	8006058 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	3303      	adds	r3, #3
 8006032:	089b      	lsrs	r3, r3, #2
 8006034:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006036:	8afa      	ldrh	r2, [r7, #22]
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	b29b      	uxth	r3, r3
 8006042:	429a      	cmp	r2, r3
 8006044:	d90a      	bls.n	800605c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	619a      	str	r2, [r3, #24]
        }
        break;
 8006052:	e003      	b.n	800605c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006054:	bf00      	nop
 8006056:	e002      	b.n	800605e <USB_HC_StartXfer+0x25e>
        break;
 8006058:	bf00      	nop
 800605a:	e000      	b.n	800605e <USB_HC_StartXfer+0x25e>
        break;
 800605c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	68d9      	ldr	r1, [r3, #12]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	785a      	ldrb	r2, [r3, #1]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	b29b      	uxth	r3, r3
 800606c:	2000      	movs	r0, #0
 800606e:	9000      	str	r0, [sp, #0]
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f7ff fb53 	bl	800571c <USB_WritePacket>
  }

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3728      	adds	r7, #40	; 0x28
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	1ff80000 	.word	0x1ff80000

08006084 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	b29b      	uxth	r3, r3
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b089      	sub	sp, #36	; 0x24
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	460b      	mov	r3, r1
 80060b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80060b6:	78fb      	ldrb	r3, [r7, #3]
 80060b8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	0c9b      	lsrs	r3, r3, #18
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	0fdb      	lsrs	r3, r3, #31
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b20      	cmp	r3, #32
 80060f4:	d104      	bne.n	8006100 <USB_HC_Halt+0x5a>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	e0e8      	b.n	80062d2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <USB_HC_Halt+0x66>
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d173      	bne.n	80061f4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	4413      	add	r3, r2
 8006114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	0151      	lsls	r1, r2, #5
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	440a      	add	r2, r1
 8006122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006126:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800612a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 0320 	and.w	r3, r3, #32
 8006134:	2b00      	cmp	r3, #0
 8006136:	f040 80cb 	bne.w	80062d0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d143      	bne.n	80061ce <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	4413      	add	r3, r2
 800614e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	0151      	lsls	r1, r2, #5
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	440a      	add	r2, r1
 800615c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006160:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006164:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	4413      	add	r3, r2
 800616e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	440a      	add	r2, r1
 800617c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006180:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006184:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	4413      	add	r3, r2
 800618e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	0151      	lsls	r1, r2, #5
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	440a      	add	r2, r1
 800619c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061a4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	3301      	adds	r3, #1
 80061aa:	61fb      	str	r3, [r7, #28]
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061b2:	d81d      	bhi.n	80061f0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ca:	d0ec      	beq.n	80061a6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061cc:	e080      	b.n	80062d0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061ec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061ee:	e06f      	b.n	80062d0 <USB_HC_Halt+0x22a>
            break;
 80061f0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061f2:	e06d      	b.n	80062d0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	0151      	lsls	r1, r2, #5
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	440a      	add	r2, r1
 800620a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800620e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006212:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d143      	bne.n	80062ac <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	4413      	add	r3, r2
 800622c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	0151      	lsls	r1, r2, #5
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	440a      	add	r2, r1
 800623a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800623e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006242:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	4413      	add	r3, r2
 800624c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	0151      	lsls	r1, r2, #5
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	440a      	add	r2, r1
 800625a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800625e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006262:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	4413      	add	r3, r2
 800626c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	0151      	lsls	r1, r2, #5
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	440a      	add	r2, r1
 800627a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800627e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006282:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	3301      	adds	r3, #1
 8006288:	61fb      	str	r3, [r7, #28]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006290:	d81d      	bhi.n	80062ce <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	4413      	add	r3, r2
 800629a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062a8:	d0ec      	beq.n	8006284 <USB_HC_Halt+0x1de>
 80062aa:	e011      	b.n	80062d0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	0151      	lsls	r1, r2, #5
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	440a      	add	r2, r1
 80062c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062ca:	6013      	str	r3, [r2, #0]
 80062cc:	e000      	b.n	80062d0 <USB_HC_Halt+0x22a>
          break;
 80062ce:	bf00      	nop
    }
  }

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3724      	adds	r7, #36	; 0x24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
	...

080062e0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80062f0:	78fb      	ldrb	r3, [r7, #3]
 80062f2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80062f4:	2301      	movs	r3, #1
 80062f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	04da      	lsls	r2, r3, #19
 80062fc:	4b15      	ldr	r3, [pc, #84]	; (8006354 <USB_DoPing+0x74>)
 80062fe:	4013      	ands	r3, r2
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	0151      	lsls	r1, r2, #5
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	440a      	add	r2, r1
 8006308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800630c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006310:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	4413      	add	r3, r2
 800631a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006328:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006330:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	4413      	add	r3, r2
 800633a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633e:	461a      	mov	r2, r3
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	1ff80000 	.word	0x1ff80000

08006358 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff f935 	bl	80055d8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800636e:	2110      	movs	r1, #16
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7ff f98f 	bl	8005694 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff f9b0 	bl	80056dc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800637c:	2300      	movs	r3, #0
 800637e:	613b      	str	r3, [r7, #16]
 8006380:	e01f      	b.n	80063c2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4413      	add	r3, r2
 800638a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006398:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063a8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b6:	461a      	mov	r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	3301      	adds	r3, #1
 80063c0:	613b      	str	r3, [r7, #16]
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	2b0f      	cmp	r3, #15
 80063c6:	d9dc      	bls.n	8006382 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80063c8:	2300      	movs	r3, #0
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	e034      	b.n	8006438 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063e4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063f4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006402:	461a      	mov	r2, r3
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	3301      	adds	r3, #1
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006414:	d80c      	bhi.n	8006430 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4413      	add	r3, r2
 800641e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800642c:	d0ec      	beq.n	8006408 <USB_StopHost+0xb0>
 800642e:	e000      	b.n	8006432 <USB_StopHost+0xda>
        break;
 8006430:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	3301      	adds	r3, #1
 8006436:	613b      	str	r3, [r7, #16]
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	2b0f      	cmp	r3, #15
 800643c:	d9c7      	bls.n	80063ce <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006444:	461a      	mov	r2, r3
 8006446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800644a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006452:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff f8ae 	bl	80055b6 <USB_EnableGlobalInt>

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006464:	b590      	push	{r4, r7, lr}
 8006466:	b089      	sub	sp, #36	; 0x24
 8006468:	af04      	add	r7, sp, #16
 800646a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800646c:	2301      	movs	r3, #1
 800646e:	2202      	movs	r2, #2
 8006470:	2102      	movs	r1, #2
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fc66 	bl	8006d44 <USBH_FindInterface>
 8006478:	4603      	mov	r3, r0
 800647a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	2bff      	cmp	r3, #255	; 0xff
 8006480:	d002      	beq.n	8006488 <USBH_CDC_InterfaceInit+0x24>
 8006482:	7bfb      	ldrb	r3, [r7, #15]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d901      	bls.n	800648c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006488:	2302      	movs	r3, #2
 800648a:	e13d      	b.n	8006708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fc3b 	bl	8006d0c <USBH_SelectInterface>
 8006496:	4603      	mov	r3, r0
 8006498:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800649a:	7bbb      	ldrb	r3, [r7, #14]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80064a0:	2302      	movs	r3, #2
 80064a2:	e131      	b.n	8006708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80064aa:	2050      	movs	r0, #80	; 0x50
 80064ac:	f002 fa00 	bl	80088b0 <malloc>
 80064b0:	4603      	mov	r3, r0
 80064b2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80064c4:	2302      	movs	r3, #2
 80064c6:	e11f      	b.n	8006708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80064c8:	2250      	movs	r2, #80	; 0x50
 80064ca:	2100      	movs	r1, #0
 80064cc:	68b8      	ldr	r0, [r7, #8]
 80064ce:	f002 f9ff 	bl	80088d0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	211a      	movs	r1, #26
 80064d8:	fb01 f303 	mul.w	r3, r1, r3
 80064dc:	4413      	add	r3, r2
 80064de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	b25b      	sxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	da15      	bge.n	8006516 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	211a      	movs	r1, #26
 80064f0:	fb01 f303 	mul.w	r3, r1, r3
 80064f4:	4413      	add	r3, r2
 80064f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064fa:	781a      	ldrb	r2, [r3, #0]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	211a      	movs	r1, #26
 8006506:	fb01 f303 	mul.w	r3, r1, r3
 800650a:	4413      	add	r3, r2
 800650c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006510:	881a      	ldrh	r2, [r3, #0]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	785b      	ldrb	r3, [r3, #1]
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f001 fe32 	bl	8008186 <USBH_AllocPipe>
 8006522:	4603      	mov	r3, r0
 8006524:	461a      	mov	r2, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	7819      	ldrb	r1, [r3, #0]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	7858      	ldrb	r0, [r3, #1]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	8952      	ldrh	r2, [r2, #10]
 8006542:	9202      	str	r2, [sp, #8]
 8006544:	2203      	movs	r2, #3
 8006546:	9201      	str	r2, [sp, #4]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	4623      	mov	r3, r4
 800654c:	4602      	mov	r2, r0
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 fdea 	bl	8008128 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2200      	movs	r2, #0
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f002 f8f9 	bl	8008754 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006562:	2300      	movs	r3, #0
 8006564:	2200      	movs	r2, #0
 8006566:	210a      	movs	r1, #10
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fbeb 	bl	8006d44 <USBH_FindInterface>
 800656e:	4603      	mov	r3, r0
 8006570:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	2bff      	cmp	r3, #255	; 0xff
 8006576:	d002      	beq.n	800657e <USBH_CDC_InterfaceInit+0x11a>
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d901      	bls.n	8006582 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800657e:	2302      	movs	r3, #2
 8006580:	e0c2      	b.n	8006708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	211a      	movs	r1, #26
 8006588:	fb01 f303 	mul.w	r3, r1, r3
 800658c:	4413      	add	r3, r2
 800658e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	b25b      	sxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	da16      	bge.n	80065c8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	211a      	movs	r1, #26
 80065a0:	fb01 f303 	mul.w	r3, r1, r3
 80065a4:	4413      	add	r3, r2
 80065a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065aa:	781a      	ldrb	r2, [r3, #0]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	211a      	movs	r1, #26
 80065b6:	fb01 f303 	mul.w	r3, r1, r3
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80065c0:	881a      	ldrh	r2, [r3, #0]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	835a      	strh	r2, [r3, #26]
 80065c6:	e015      	b.n	80065f4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	211a      	movs	r1, #26
 80065ce:	fb01 f303 	mul.w	r3, r1, r3
 80065d2:	4413      	add	r3, r2
 80065d4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065d8:	781a      	ldrb	r2, [r3, #0]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065de:	7bfb      	ldrb	r3, [r7, #15]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	211a      	movs	r1, #26
 80065e4:	fb01 f303 	mul.w	r3, r1, r3
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80065ee:	881a      	ldrh	r2, [r3, #0]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	211a      	movs	r1, #26
 80065fa:	fb01 f303 	mul.w	r3, r1, r3
 80065fe:	4413      	add	r3, r2
 8006600:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	b25b      	sxtb	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	da16      	bge.n	800663a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	211a      	movs	r1, #26
 8006612:	fb01 f303 	mul.w	r3, r1, r3
 8006616:	4413      	add	r3, r2
 8006618:	f203 3356 	addw	r3, r3, #854	; 0x356
 800661c:	781a      	ldrb	r2, [r3, #0]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	211a      	movs	r1, #26
 8006628:	fb01 f303 	mul.w	r3, r1, r3
 800662c:	4413      	add	r3, r2
 800662e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006632:	881a      	ldrh	r2, [r3, #0]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	835a      	strh	r2, [r3, #26]
 8006638:	e015      	b.n	8006666 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800663a:	7bfb      	ldrb	r3, [r7, #15]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	211a      	movs	r1, #26
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	4413      	add	r3, r2
 8006646:	f203 3356 	addw	r3, r3, #854	; 0x356
 800664a:	781a      	ldrb	r2, [r3, #0]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	211a      	movs	r1, #26
 8006656:	fb01 f303 	mul.w	r3, r1, r3
 800665a:	4413      	add	r3, r2
 800665c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006660:	881a      	ldrh	r2, [r3, #0]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	7b9b      	ldrb	r3, [r3, #14]
 800666a:	4619      	mov	r1, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 fd8a 	bl	8008186 <USBH_AllocPipe>
 8006672:	4603      	mov	r3, r0
 8006674:	461a      	mov	r2, r3
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	7bdb      	ldrb	r3, [r3, #15]
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 fd80 	bl	8008186 <USBH_AllocPipe>
 8006686:	4603      	mov	r3, r0
 8006688:	461a      	mov	r2, r3
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	7b59      	ldrb	r1, [r3, #13]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	7b98      	ldrb	r0, [r3, #14]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	8b12      	ldrh	r2, [r2, #24]
 80066a6:	9202      	str	r2, [sp, #8]
 80066a8:	2202      	movs	r2, #2
 80066aa:	9201      	str	r2, [sp, #4]
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	4623      	mov	r3, r4
 80066b0:	4602      	mov	r2, r0
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 fd38 	bl	8008128 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	7b19      	ldrb	r1, [r3, #12]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	7bd8      	ldrb	r0, [r3, #15]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	8b52      	ldrh	r2, [r2, #26]
 80066d0:	9202      	str	r2, [sp, #8]
 80066d2:	2202      	movs	r2, #2
 80066d4:	9201      	str	r2, [sp, #4]
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	4623      	mov	r3, r4
 80066da:	4602      	mov	r2, r0
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f001 fd23 	bl	8008128 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	7b5b      	ldrb	r3, [r3, #13]
 80066ee:	2200      	movs	r2, #0
 80066f0:	4619      	mov	r1, r3
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f002 f82e 	bl	8008754 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	7b1b      	ldrb	r3, [r3, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f002 f827 	bl	8008754 <USBH_LL_SetToggle>

  return USBH_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	bd90      	pop	{r4, r7, pc}

08006710 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00e      	beq.n	8006748 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 fd18 	bl	8008166 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 fd43 	bl	80081c8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	7b1b      	ldrb	r3, [r3, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00e      	beq.n	800676e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	7b1b      	ldrb	r3, [r3, #12]
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 fd05 	bl	8008166 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	7b1b      	ldrb	r3, [r3, #12]
 8006760:	4619      	mov	r1, r3
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 fd30 	bl	80081c8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	7b5b      	ldrb	r3, [r3, #13]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00e      	beq.n	8006794 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	7b5b      	ldrb	r3, [r3, #13]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 fcf2 	bl	8008166 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	7b5b      	ldrb	r3, [r3, #13]
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 fd1d 	bl	80081c8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f002 f889 	bl	80088c0 <free>
    phost->pActiveClass->pData = 0U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067b4:	2200      	movs	r2, #0
 80067b6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3340      	adds	r3, #64	; 0x40
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f8b1 	bl	8006942 <GetLineCoding>
 80067e0:	4603      	mov	r3, r0
 80067e2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80067e4:	7afb      	ldrb	r3, [r7, #11]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d105      	bne.n	80067f6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067f0:	2102      	movs	r1, #2
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80067f6:	7afb      	ldrb	r3, [r7, #11]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006808:	2301      	movs	r3, #1
 800680a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006820:	2b04      	cmp	r3, #4
 8006822:	d877      	bhi.n	8006914 <USBH_CDC_Process+0x114>
 8006824:	a201      	add	r2, pc, #4	; (adr r2, 800682c <USBH_CDC_Process+0x2c>)
 8006826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682a:	bf00      	nop
 800682c:	08006841 	.word	0x08006841
 8006830:	08006847 	.word	0x08006847
 8006834:	08006877 	.word	0x08006877
 8006838:	080068eb 	.word	0x080068eb
 800683c:	080068f9 	.word	0x080068f9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	73fb      	strb	r3, [r7, #15]
      break;
 8006844:	e06d      	b.n	8006922 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f897 	bl	8006980 <SetLineCoding>
 8006852:	4603      	mov	r3, r0
 8006854:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006856:	7bbb      	ldrb	r3, [r7, #14]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d104      	bne.n	8006866 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006864:	e058      	b.n	8006918 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006866:	7bbb      	ldrb	r3, [r7, #14]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d055      	beq.n	8006918 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2204      	movs	r2, #4
 8006870:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006874:	e050      	b.n	8006918 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	3340      	adds	r3, #64	; 0x40
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f860 	bl	8006942 <GetLineCoding>
 8006882:	4603      	mov	r3, r0
 8006884:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006886:	7bbb      	ldrb	r3, [r7, #14]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d126      	bne.n	80068da <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800689e:	791b      	ldrb	r3, [r3, #4]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d13b      	bne.n	800691c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ae:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d133      	bne.n	800691c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068be:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d12b      	bne.n	800691c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068cc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d124      	bne.n	800691c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f958 	bl	8006b88 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80068d8:	e020      	b.n	800691c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80068da:	7bbb      	ldrb	r3, [r7, #14]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d01d      	beq.n	800691c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2204      	movs	r2, #4
 80068e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80068e8:	e018      	b.n	800691c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f867 	bl	80069be <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f8da 	bl	8006aaa <CDC_ProcessReception>
      break;
 80068f6:	e014      	b.n	8006922 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80068f8:	2100      	movs	r1, #0
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 ffe3 	bl	80078c6 <USBH_ClrFeature>
 8006900:	4603      	mov	r3, r0
 8006902:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006904:	7bbb      	ldrb	r3, [r7, #14]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10a      	bne.n	8006920 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006912:	e005      	b.n	8006920 <USBH_CDC_Process+0x120>

    default:
      break;
 8006914:	bf00      	nop
 8006916:	e004      	b.n	8006922 <USBH_CDC_Process+0x122>
      break;
 8006918:	bf00      	nop
 800691a:	e002      	b.n	8006922 <USBH_CDC_Process+0x122>
      break;
 800691c:	bf00      	nop
 800691e:	e000      	b.n	8006922 <USBH_CDC_Process+0x122>
      break;
 8006920:	bf00      	nop

  }

  return status;
 8006922:	7bfb      	ldrb	r3, [r7, #15]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b082      	sub	sp, #8
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	22a1      	movs	r2, #161	; 0xa1
 8006950:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2221      	movs	r2, #33	; 0x21
 8006956:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2207      	movs	r2, #7
 8006968:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2207      	movs	r2, #7
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f001 f988 	bl	8007c86 <USBH_CtlReq>
 8006976:	4603      	mov	r3, r0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2221      	movs	r2, #33	; 0x21
 800698e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2220      	movs	r2, #32
 8006994:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2207      	movs	r2, #7
 80069a6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2207      	movs	r2, #7
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f001 f969 	bl	8007c86 <USBH_CtlReq>
 80069b4:	4603      	mov	r3, r0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b086      	sub	sp, #24
 80069c2:	af02      	add	r7, sp, #8
 80069c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069d0:	2300      	movs	r3, #0
 80069d2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d002      	beq.n	80069e4 <CDC_ProcessTransmission+0x26>
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d023      	beq.n	8006a2a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80069e2:	e05e      	b.n	8006aa2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	8b12      	ldrh	r2, [r2, #24]
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d90b      	bls.n	8006a08 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	69d9      	ldr	r1, [r3, #28]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8b1a      	ldrh	r2, [r3, #24]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	7b5b      	ldrb	r3, [r3, #13]
 80069fc:	2001      	movs	r0, #1
 80069fe:	9000      	str	r0, [sp, #0]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 fb4e 	bl	80080a2 <USBH_BulkSendData>
 8006a06:	e00b      	b.n	8006a20 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	7b5b      	ldrb	r3, [r3, #13]
 8006a16:	2001      	movs	r0, #1
 8006a18:	9000      	str	r0, [sp, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f001 fb41 	bl	80080a2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006a28:	e03b      	b.n	8006aa2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	7b5b      	ldrb	r3, [r3, #13]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f001 fe65 	bl	8008700 <USBH_LL_GetURBState>
 8006a36:	4603      	mov	r3, r0
 8006a38:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006a3a:	7afb      	ldrb	r3, [r7, #11]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d128      	bne.n	8006a92 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	8b12      	ldrh	r2, [r2, #24]
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d90e      	bls.n	8006a6a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	8b12      	ldrh	r2, [r2, #24]
 8006a54:	1a9a      	subs	r2, r3, r2
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	8b12      	ldrh	r2, [r2, #24]
 8006a62:	441a      	add	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	61da      	str	r2, [r3, #28]
 8006a68:	e002      	b.n	8006a70 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d004      	beq.n	8006a82 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006a80:	e00e      	b.n	8006aa0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f868 	bl	8006b60 <USBH_CDC_TransmitCallback>
      break;
 8006a90:	e006      	b.n	8006aa0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006a92:	7afb      	ldrb	r3, [r7, #11]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d103      	bne.n	8006aa0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006aa0:	bf00      	nop
  }
}
 8006aa2:	bf00      	nop
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b086      	sub	sp, #24
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006abc:	2300      	movs	r3, #0
 8006abe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d002      	beq.n	8006ad0 <CDC_ProcessReception+0x26>
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d00e      	beq.n	8006aec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006ace:	e043      	b.n	8006b58 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	6a19      	ldr	r1, [r3, #32]
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	8b5a      	ldrh	r2, [r3, #26]
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	7b1b      	ldrb	r3, [r3, #12]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 fb05 	bl	80080ec <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2204      	movs	r2, #4
 8006ae6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006aea:	e035      	b.n	8006b58 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	7b1b      	ldrb	r3, [r3, #12]
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 fe04 	bl	8008700 <USBH_LL_GetURBState>
 8006af8:	4603      	mov	r3, r0
 8006afa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006afc:	7cfb      	ldrb	r3, [r7, #19]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d129      	bne.n	8006b56 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	7b1b      	ldrb	r3, [r3, #12]
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f001 fd67 	bl	80085dc <USBH_LL_GetLastXferSize>
 8006b0e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d016      	beq.n	8006b48 <CDC_ProcessReception+0x9e>
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	8b5b      	ldrh	r3, [r3, #26]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d910      	bls.n	8006b48 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	1ad2      	subs	r2, r2, r3
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	6a1a      	ldr	r2, [r3, #32]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	441a      	add	r2, r3
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2203      	movs	r2, #3
 8006b42:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006b46:	e006      	b.n	8006b56 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f80f 	bl	8006b74 <USBH_CDC_ReceiveCallback>
      break;
 8006b56:	bf00      	nop
  }
}
 8006b58:	bf00      	nop
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	e029      	b.n	8006c08 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	79fa      	ldrb	r2, [r7, #7]
 8006bb8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 f81f 	bl	8006c10 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f001 fc37 	bl	8008474 <USBH_LL_Init>

  return USBH_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	e009      	b.n	8006c36 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	33e0      	adds	r3, #224	; 0xe0
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	3301      	adds	r3, #1
 8006c34:	60fb      	str	r3, [r7, #12]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b0e      	cmp	r3, #14
 8006c3a:	d9f2      	bls.n	8006c22 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60fb      	str	r3, [r7, #12]
 8006c40:	e009      	b.n	8006c56 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3301      	adds	r3, #1
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c5c:	d3f1      	bcc.n	8006c42 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2240      	movs	r2, #64	; 0x40
 8006c82:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d016      	beq.n	8006cfa <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10e      	bne.n	8006cf4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006cdc:	1c59      	adds	r1, r3, #1
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	33de      	adds	r3, #222	; 0xde
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	73fb      	strb	r3, [r7, #15]
 8006cf2:	e004      	b.n	8006cfe <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	73fb      	strb	r3, [r7, #15]
 8006cf8:	e001      	b.n	8006cfe <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006d22:	78fa      	ldrb	r2, [r7, #3]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d204      	bcs.n	8006d32 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	78fa      	ldrb	r2, [r7, #3]
 8006d2c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006d30:	e001      	b.n	8006d36 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006d32:	2302      	movs	r3, #2
 8006d34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	4608      	mov	r0, r1
 8006d4e:	4611      	mov	r1, r2
 8006d50:	461a      	mov	r2, r3
 8006d52:	4603      	mov	r3, r0
 8006d54:	70fb      	strb	r3, [r7, #3]
 8006d56:	460b      	mov	r3, r1
 8006d58:	70bb      	strb	r3, [r7, #2]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006d6c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d6e:	e025      	b.n	8006dbc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006d70:	7dfb      	ldrb	r3, [r7, #23]
 8006d72:	221a      	movs	r2, #26
 8006d74:	fb02 f303 	mul.w	r3, r2, r3
 8006d78:	3308      	adds	r3, #8
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	3302      	adds	r3, #2
 8006d80:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	795b      	ldrb	r3, [r3, #5]
 8006d86:	78fa      	ldrb	r2, [r7, #3]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d002      	beq.n	8006d92 <USBH_FindInterface+0x4e>
 8006d8c:	78fb      	ldrb	r3, [r7, #3]
 8006d8e:	2bff      	cmp	r3, #255	; 0xff
 8006d90:	d111      	bne.n	8006db6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006d96:	78ba      	ldrb	r2, [r7, #2]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d002      	beq.n	8006da2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d9c:	78bb      	ldrb	r3, [r7, #2]
 8006d9e:	2bff      	cmp	r3, #255	; 0xff
 8006da0:	d109      	bne.n	8006db6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006da6:	787a      	ldrb	r2, [r7, #1]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d002      	beq.n	8006db2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006dac:	787b      	ldrb	r3, [r7, #1]
 8006dae:	2bff      	cmp	r3, #255	; 0xff
 8006db0:	d101      	bne.n	8006db6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006db2:	7dfb      	ldrb	r3, [r7, #23]
 8006db4:	e006      	b.n	8006dc4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	3301      	adds	r3, #1
 8006dba:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006dbc:	7dfb      	ldrb	r3, [r7, #23]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d9d6      	bls.n	8006d70 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006dc2:	23ff      	movs	r3, #255	; 0xff
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	371c      	adds	r7, #28
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 fb87 	bl	80084ec <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006dde:	2101      	movs	r1, #1
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 fca0 	bl	8008726 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af04      	add	r7, sp, #16
 8006df6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006df8:	2302      	movs	r3, #2
 8006dfa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d102      	bne.n	8006e12 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2203      	movs	r2, #3
 8006e10:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b0b      	cmp	r3, #11
 8006e1a:	f200 81b3 	bhi.w	8007184 <USBH_Process+0x394>
 8006e1e:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <USBH_Process+0x34>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e55 	.word	0x08006e55
 8006e28:	08006e87 	.word	0x08006e87
 8006e2c:	08006eef 	.word	0x08006eef
 8006e30:	0800711f 	.word	0x0800711f
 8006e34:	08007185 	.word	0x08007185
 8006e38:	08006f93 	.word	0x08006f93
 8006e3c:	080070c5 	.word	0x080070c5
 8006e40:	08006fc9 	.word	0x08006fc9
 8006e44:	08006fe9 	.word	0x08006fe9
 8006e48:	08007009 	.word	0x08007009
 8006e4c:	08007037 	.word	0x08007037
 8006e50:	08007107 	.word	0x08007107
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 8193 	beq.w	8007188 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006e68:	20c8      	movs	r0, #200	; 0xc8
 8006e6a:	f001 fca3 	bl	80087b4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f001 fb99 	bl	80085a6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006e84:	e180      	b.n	8007188 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d107      	bne.n	8006ea0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e9e:	e182      	b.n	80071a6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eaa:	d914      	bls.n	8006ed6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d903      	bls.n	8006ece <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	220d      	movs	r2, #13
 8006eca:	701a      	strb	r2, [r3, #0]
      break;
 8006ecc:	e16b      	b.n	80071a6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	701a      	strb	r2, [r3, #0]
      break;
 8006ed4:	e167      	b.n	80071a6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006edc:	f103 020a 	add.w	r2, r3, #10
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006ee6:	200a      	movs	r0, #10
 8006ee8:	f001 fc64 	bl	80087b4 <USBH_Delay>
      break;
 8006eec:	e15b      	b.n	80071a6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d005      	beq.n	8006f04 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006efe:	2104      	movs	r1, #4
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006f04:	2064      	movs	r0, #100	; 0x64
 8006f06:	f001 fc55 	bl	80087b4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f001 fb24 	bl	8008558 <USBH_LL_GetSpeed>
 8006f10:	4603      	mov	r3, r0
 8006f12:	461a      	mov	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2205      	movs	r2, #5
 8006f1e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006f20:	2100      	movs	r1, #0
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f001 f92f 	bl	8008186 <USBH_AllocPipe>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006f30:	2180      	movs	r1, #128	; 0x80
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f001 f927 	bl	8008186 <USBH_AllocPipe>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	7919      	ldrb	r1, [r3, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006f54:	b292      	uxth	r2, r2
 8006f56:	9202      	str	r2, [sp, #8]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	9201      	str	r2, [sp, #4]
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2280      	movs	r2, #128	; 0x80
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f001 f8e0 	bl	8008128 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	7959      	ldrb	r1, [r3, #5]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006f7c:	b292      	uxth	r2, r2
 8006f7e:	9202      	str	r2, [sp, #8]
 8006f80:	2200      	movs	r2, #0
 8006f82:	9201      	str	r2, [sp, #4]
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	4603      	mov	r3, r0
 8006f88:	2200      	movs	r2, #0
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f001 f8cc 	bl	8008128 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f90:	e109      	b.n	80071a6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f90c 	bl	80071b0 <USBH_HandleEnum>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f040 80f3 	bne.w	800718c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d103      	bne.n	8006fc0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2208      	movs	r2, #8
 8006fbc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006fbe:	e0e5      	b.n	800718c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2207      	movs	r2, #7
 8006fc4:	701a      	strb	r2, [r3, #0]
      break;
 8006fc6:	e0e1      	b.n	800718c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 80de 	beq.w	8007190 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fda:	2101      	movs	r1, #1
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2208      	movs	r2, #8
 8006fe4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006fe6:	e0d3      	b.n	8007190 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fc20 	bl	8007838 <USBH_SetCfg>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f040 80ca 	bne.w	8007194 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2209      	movs	r2, #9
 8007004:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007006:	e0c5      	b.n	8007194 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800700e:	f003 0320 	and.w	r3, r3, #32
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00b      	beq.n	800702e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007016:	2101      	movs	r1, #1
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fc30 	bl	800787e <USBH_SetFeature>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	f040 80b9 	bne.w	8007198 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	220a      	movs	r2, #10
 800702a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800702c:	e0b4      	b.n	8007198 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	220a      	movs	r2, #10
 8007032:	701a      	strb	r2, [r3, #0]
      break;
 8007034:	e0b0      	b.n	8007198 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 80ad 	beq.w	800719c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]
 800704e:	e016      	b.n	800707e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007050:	7bfa      	ldrb	r2, [r7, #15]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	32de      	adds	r2, #222	; 0xde
 8007056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705a:	791a      	ldrb	r2, [r3, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007062:	429a      	cmp	r2, r3
 8007064:	d108      	bne.n	8007078 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007066:	7bfa      	ldrb	r2, [r7, #15]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	32de      	adds	r2, #222	; 0xde
 800706c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007076:	e005      	b.n	8007084 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	3301      	adds	r3, #1
 800707c:	73fb      	strb	r3, [r7, #15]
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d0e5      	beq.n	8007050 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800708a:	2b00      	cmp	r3, #0
 800708c:	d016      	beq.n	80070bc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	4798      	blx	r3
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d109      	bne.n	80070b4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2206      	movs	r2, #6
 80070a4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070ac:	2103      	movs	r1, #3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80070b2:	e073      	b.n	800719c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	220d      	movs	r2, #13
 80070b8:	701a      	strb	r2, [r3, #0]
      break;
 80070ba:	e06f      	b.n	800719c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	220d      	movs	r2, #13
 80070c0:	701a      	strb	r2, [r3, #0]
      break;
 80070c2:	e06b      	b.n	800719c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d017      	beq.n	80070fe <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	4798      	blx	r3
 80070da:	4603      	mov	r3, r0
 80070dc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80070de:	7bbb      	ldrb	r3, [r7, #14]
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d103      	bne.n	80070ee <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	220b      	movs	r2, #11
 80070ea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80070ec:	e058      	b.n	80071a0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80070ee:	7bbb      	ldrb	r3, [r7, #14]
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d154      	bne.n	80071a0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	220d      	movs	r2, #13
 80070fa:	701a      	strb	r2, [r3, #0]
      break;
 80070fc:	e050      	b.n	80071a0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	220d      	movs	r2, #13
 8007102:	701a      	strb	r2, [r3, #0]
      break;
 8007104:	e04c      	b.n	80071a0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800710c:	2b00      	cmp	r3, #0
 800710e:	d049      	beq.n	80071a4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	4798      	blx	r3
      }
      break;
 800711c:	e042      	b.n	80071a4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff fd72 	bl	8006c10 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007132:	2b00      	cmp	r3, #0
 8007134:	d009      	beq.n	800714a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800715a:	2105      	movs	r1, #5
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b01      	cmp	r3, #1
 800716a:	d107      	bne.n	800717c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7ff fe2b 	bl	8006dd0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800717a:	e014      	b.n	80071a6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f001 f9b5 	bl	80084ec <USBH_LL_Start>
      break;
 8007182:	e010      	b.n	80071a6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007184:	bf00      	nop
 8007186:	e00e      	b.n	80071a6 <USBH_Process+0x3b6>
      break;
 8007188:	bf00      	nop
 800718a:	e00c      	b.n	80071a6 <USBH_Process+0x3b6>
      break;
 800718c:	bf00      	nop
 800718e:	e00a      	b.n	80071a6 <USBH_Process+0x3b6>
    break;
 8007190:	bf00      	nop
 8007192:	e008      	b.n	80071a6 <USBH_Process+0x3b6>
      break;
 8007194:	bf00      	nop
 8007196:	e006      	b.n	80071a6 <USBH_Process+0x3b6>
      break;
 8007198:	bf00      	nop
 800719a:	e004      	b.n	80071a6 <USBH_Process+0x3b6>
      break;
 800719c:	bf00      	nop
 800719e:	e002      	b.n	80071a6 <USBH_Process+0x3b6>
      break;
 80071a0:	bf00      	nop
 80071a2:	e000      	b.n	80071a6 <USBH_Process+0x3b6>
      break;
 80071a4:	bf00      	nop
  }
  return USBH_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af04      	add	r7, sp, #16
 80071b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80071b8:	2301      	movs	r3, #1
 80071ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80071bc:	2301      	movs	r3, #1
 80071be:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	785b      	ldrb	r3, [r3, #1]
 80071c4:	2b07      	cmp	r3, #7
 80071c6:	f200 81c1 	bhi.w	800754c <USBH_HandleEnum+0x39c>
 80071ca:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <USBH_HandleEnum+0x20>)
 80071cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d0:	080071f1 	.word	0x080071f1
 80071d4:	080072af 	.word	0x080072af
 80071d8:	08007319 	.word	0x08007319
 80071dc:	080073a7 	.word	0x080073a7
 80071e0:	08007411 	.word	0x08007411
 80071e4:	08007481 	.word	0x08007481
 80071e8:	080074c7 	.word	0x080074c7
 80071ec:	0800750d 	.word	0x0800750d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80071f0:	2108      	movs	r1, #8
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fa50 	bl	8007698 <USBH_Get_DevDesc>
 80071f8:	4603      	mov	r3, r0
 80071fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071fc:	7bbb      	ldrb	r3, [r7, #14]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d130      	bne.n	8007264 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	7919      	ldrb	r1, [r3, #4]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007226:	b292      	uxth	r2, r2
 8007228:	9202      	str	r2, [sp, #8]
 800722a:	2200      	movs	r2, #0
 800722c:	9201      	str	r2, [sp, #4]
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	4603      	mov	r3, r0
 8007232:	2280      	movs	r2, #128	; 0x80
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 ff77 	bl	8008128 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	7959      	ldrb	r1, [r3, #5]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800724e:	b292      	uxth	r2, r2
 8007250:	9202      	str	r2, [sp, #8]
 8007252:	2200      	movs	r2, #0
 8007254:	9201      	str	r2, [sp, #4]
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	4603      	mov	r3, r0
 800725a:	2200      	movs	r2, #0
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 ff63 	bl	8008128 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007262:	e175      	b.n	8007550 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	2b03      	cmp	r3, #3
 8007268:	f040 8172 	bne.w	8007550 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007272:	3301      	adds	r3, #1
 8007274:	b2da      	uxtb	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007282:	2b03      	cmp	r3, #3
 8007284:	d903      	bls.n	800728e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	220d      	movs	r2, #13
 800728a:	701a      	strb	r2, [r3, #0]
      break;
 800728c:	e160      	b.n	8007550 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	795b      	ldrb	r3, [r3, #5]
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 ff97 	bl	80081c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	791b      	ldrb	r3, [r3, #4]
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 ff91 	bl	80081c8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	701a      	strb	r2, [r3, #0]
      break;
 80072ac:	e150      	b.n	8007550 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80072ae:	2112      	movs	r1, #18
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f9f1 	bl	8007698 <USBH_Get_DevDesc>
 80072b6:	4603      	mov	r3, r0
 80072b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072ba:	7bbb      	ldrb	r3, [r7, #14]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d103      	bne.n	80072c8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072c6:	e145      	b.n	8007554 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072c8:	7bbb      	ldrb	r3, [r7, #14]
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	f040 8142 	bne.w	8007554 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072d6:	3301      	adds	r3, #1
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d903      	bls.n	80072f2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	220d      	movs	r2, #13
 80072ee:	701a      	strb	r2, [r3, #0]
      break;
 80072f0:	e130      	b.n	8007554 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	795b      	ldrb	r3, [r3, #5]
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 ff65 	bl	80081c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	791b      	ldrb	r3, [r3, #4]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 ff5f 	bl	80081c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	701a      	strb	r2, [r3, #0]
      break;
 8007316:	e11d      	b.n	8007554 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007318:	2101      	movs	r1, #1
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fa68 	bl	80077f0 <USBH_SetAddress>
 8007320:	4603      	mov	r3, r0
 8007322:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007324:	7bbb      	ldrb	r3, [r7, #14]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d132      	bne.n	8007390 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800732a:	2002      	movs	r0, #2
 800732c:	f001 fa42 	bl	80087b4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2203      	movs	r2, #3
 800733c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	7919      	ldrb	r1, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007352:	b292      	uxth	r2, r2
 8007354:	9202      	str	r2, [sp, #8]
 8007356:	2200      	movs	r2, #0
 8007358:	9201      	str	r2, [sp, #4]
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	4603      	mov	r3, r0
 800735e:	2280      	movs	r2, #128	; 0x80
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fee1 	bl	8008128 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	7959      	ldrb	r1, [r3, #5]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800737a:	b292      	uxth	r2, r2
 800737c:	9202      	str	r2, [sp, #8]
 800737e:	2200      	movs	r2, #0
 8007380:	9201      	str	r2, [sp, #4]
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	4603      	mov	r3, r0
 8007386:	2200      	movs	r2, #0
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fecd 	bl	8008128 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800738e:	e0e3      	b.n	8007558 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007390:	7bbb      	ldrb	r3, [r7, #14]
 8007392:	2b03      	cmp	r3, #3
 8007394:	f040 80e0 	bne.w	8007558 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	220d      	movs	r2, #13
 800739c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	705a      	strb	r2, [r3, #1]
      break;
 80073a4:	e0d8      	b.n	8007558 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80073a6:	2109      	movs	r1, #9
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f99d 	bl	80076e8 <USBH_Get_CfgDesc>
 80073ae:	4603      	mov	r3, r0
 80073b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d103      	bne.n	80073c0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2204      	movs	r2, #4
 80073bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80073be:	e0cd      	b.n	800755c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	f040 80ca 	bne.w	800755c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073ce:	3301      	adds	r3, #1
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d903      	bls.n	80073ea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	220d      	movs	r2, #13
 80073e6:	701a      	strb	r2, [r3, #0]
      break;
 80073e8:	e0b8      	b.n	800755c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	795b      	ldrb	r3, [r3, #5]
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fee9 	bl	80081c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	791b      	ldrb	r3, [r3, #4]
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fee3 	bl	80081c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	701a      	strb	r2, [r3, #0]
      break;
 800740e:	e0a5      	b.n	800755c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f965 	bl	80076e8 <USBH_Get_CfgDesc>
 800741e:	4603      	mov	r3, r0
 8007420:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d103      	bne.n	8007430 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2205      	movs	r2, #5
 800742c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800742e:	e097      	b.n	8007560 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	2b03      	cmp	r3, #3
 8007434:	f040 8094 	bne.w	8007560 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800743e:	3301      	adds	r3, #1
 8007440:	b2da      	uxtb	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800744e:	2b03      	cmp	r3, #3
 8007450:	d903      	bls.n	800745a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	220d      	movs	r2, #13
 8007456:	701a      	strb	r2, [r3, #0]
      break;
 8007458:	e082      	b.n	8007560 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	795b      	ldrb	r3, [r3, #5]
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 feb1 	bl	80081c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	791b      	ldrb	r3, [r3, #4]
 800746a:	4619      	mov	r1, r3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 feab 	bl	80081c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	701a      	strb	r2, [r3, #0]
      break;
 800747e:	e06f      	b.n	8007560 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007486:	2b00      	cmp	r3, #0
 8007488:	d019      	beq.n	80074be <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007496:	23ff      	movs	r3, #255	; 0xff
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f949 	bl	8007730 <USBH_Get_StringDesc>
 800749e:	4603      	mov	r3, r0
 80074a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d103      	bne.n	80074b0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2206      	movs	r2, #6
 80074ac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80074ae:	e059      	b.n	8007564 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d156      	bne.n	8007564 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2206      	movs	r2, #6
 80074ba:	705a      	strb	r2, [r3, #1]
      break;
 80074bc:	e052      	b.n	8007564 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2206      	movs	r2, #6
 80074c2:	705a      	strb	r2, [r3, #1]
      break;
 80074c4:	e04e      	b.n	8007564 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d019      	beq.n	8007504 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80074dc:	23ff      	movs	r3, #255	; 0xff
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f926 	bl	8007730 <USBH_Get_StringDesc>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d103      	bne.n	80074f6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2207      	movs	r2, #7
 80074f2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80074f4:	e038      	b.n	8007568 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074f6:	7bbb      	ldrb	r3, [r7, #14]
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d135      	bne.n	8007568 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2207      	movs	r2, #7
 8007500:	705a      	strb	r2, [r3, #1]
      break;
 8007502:	e031      	b.n	8007568 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2207      	movs	r2, #7
 8007508:	705a      	strb	r2, [r3, #1]
      break;
 800750a:	e02d      	b.n	8007568 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007512:	2b00      	cmp	r3, #0
 8007514:	d017      	beq.n	8007546 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007522:	23ff      	movs	r3, #255	; 0xff
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f903 	bl	8007730 <USBH_Get_StringDesc>
 800752a:	4603      	mov	r3, r0
 800752c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800752e:	7bbb      	ldrb	r3, [r7, #14]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d102      	bne.n	800753a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007538:	e018      	b.n	800756c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800753a:	7bbb      	ldrb	r3, [r7, #14]
 800753c:	2b03      	cmp	r3, #3
 800753e:	d115      	bne.n	800756c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007540:	2300      	movs	r3, #0
 8007542:	73fb      	strb	r3, [r7, #15]
      break;
 8007544:	e012      	b.n	800756c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	73fb      	strb	r3, [r7, #15]
      break;
 800754a:	e00f      	b.n	800756c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800754c:	bf00      	nop
 800754e:	e00e      	b.n	800756e <USBH_HandleEnum+0x3be>
      break;
 8007550:	bf00      	nop
 8007552:	e00c      	b.n	800756e <USBH_HandleEnum+0x3be>
      break;
 8007554:	bf00      	nop
 8007556:	e00a      	b.n	800756e <USBH_HandleEnum+0x3be>
      break;
 8007558:	bf00      	nop
 800755a:	e008      	b.n	800756e <USBH_HandleEnum+0x3be>
      break;
 800755c:	bf00      	nop
 800755e:	e006      	b.n	800756e <USBH_HandleEnum+0x3be>
      break;
 8007560:	bf00      	nop
 8007562:	e004      	b.n	800756e <USBH_HandleEnum+0x3be>
      break;
 8007564:	bf00      	nop
 8007566:	e002      	b.n	800756e <USBH_HandleEnum+0x3be>
      break;
 8007568:	bf00      	nop
 800756a:	e000      	b.n	800756e <USBH_HandleEnum+0x3be>
      break;
 800756c:	bf00      	nop
  }
  return Status;
 800756e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800758a:	bf00      	nop
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b082      	sub	sp, #8
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f804 	bl	80075ba <USBH_HandleSof>
}
 80075b2:	bf00      	nop
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b0b      	cmp	r3, #11
 80075ca:	d10a      	bne.n	80075e2 <USBH_HandleSof+0x28>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d005      	beq.n	80075e2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
  }
}
 80075e2:	bf00      	nop
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80075fa:	bf00      	nop
}
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007606:	b480      	push	{r7}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007616:	bf00      	nop
}
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007622:	b480      	push	{r7}
 8007624:	b083      	sub	sp, #12
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 ff56 	bl	8008522 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	791b      	ldrb	r3, [r3, #4]
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fda3 	bl	80081c8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	795b      	ldrb	r3, [r3, #5]
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fd9d 	bl	80081c8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af02      	add	r7, sp, #8
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80076aa:	78fb      	ldrb	r3, [r7, #3]
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	4613      	mov	r3, r2
 80076b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076b6:	2100      	movs	r1, #0
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f864 	bl	8007786 <USBH_GetDescriptor>
 80076be:	4603      	mov	r3, r0
 80076c0:	73fb      	strb	r3, [r7, #15]
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f203 3026 	addw	r0, r3, #806	; 0x326
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80076d4:	78fa      	ldrb	r2, [r7, #3]
 80076d6:	b292      	uxth	r2, r2
 80076d8:	4619      	mov	r1, r3
 80076da:	f000 f918 	bl	800790e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80076de:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	331c      	adds	r3, #28
 80076f8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80076fa:	887b      	ldrh	r3, [r7, #2]
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007704:	2100      	movs	r1, #0
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f83d 	bl	8007786 <USBH_GetDescriptor>
 800770c:	4603      	mov	r3, r0
 800770e:	72fb      	strb	r3, [r7, #11]
 8007710:	7afb      	ldrb	r3, [r7, #11]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d107      	bne.n	8007726 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800771c:	887a      	ldrh	r2, [r7, #2]
 800771e:	68f9      	ldr	r1, [r7, #12]
 8007720:	4618      	mov	r0, r3
 8007722:	f000 f964 	bl	80079ee <USBH_ParseCfgDesc>
  }

  return status;
 8007726:	7afb      	ldrb	r3, [r7, #11]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af02      	add	r7, sp, #8
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	607a      	str	r2, [r7, #4]
 800773a:	461a      	mov	r2, r3
 800773c:	460b      	mov	r3, r1
 800773e:	72fb      	strb	r3, [r7, #11]
 8007740:	4613      	mov	r3, r2
 8007742:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007744:	7afb      	ldrb	r3, [r7, #11]
 8007746:	b29b      	uxth	r3, r3
 8007748:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800774c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007754:	893b      	ldrh	r3, [r7, #8]
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	460b      	mov	r3, r1
 800775a:	2100      	movs	r1, #0
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 f812 	bl	8007786 <USBH_GetDescriptor>
 8007762:	4603      	mov	r3, r0
 8007764:	75fb      	strb	r3, [r7, #23]
 8007766:	7dfb      	ldrb	r3, [r7, #23]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d107      	bne.n	800777c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007772:	893a      	ldrh	r2, [r7, #8]
 8007774:	6879      	ldr	r1, [r7, #4]
 8007776:	4618      	mov	r0, r3
 8007778:	f000 fa37 	bl	8007bea <USBH_ParseStringDesc>
  }

  return status;
 800777c:	7dfb      	ldrb	r3, [r7, #23]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b084      	sub	sp, #16
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	607b      	str	r3, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	72fb      	strb	r3, [r7, #11]
 8007794:	4613      	mov	r3, r2
 8007796:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	789b      	ldrb	r3, [r3, #2]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d11c      	bne.n	80077da <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80077a0:	7afb      	ldrb	r3, [r7, #11]
 80077a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2206      	movs	r2, #6
 80077b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	893a      	ldrh	r2, [r7, #8]
 80077b6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80077b8:	893b      	ldrh	r3, [r7, #8]
 80077ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80077be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077c2:	d104      	bne.n	80077ce <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f240 4209 	movw	r2, #1033	; 0x409
 80077ca:	829a      	strh	r2, [r3, #20]
 80077cc:	e002      	b.n	80077d4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	8b3a      	ldrh	r2, [r7, #24]
 80077d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80077da:	8b3b      	ldrh	r3, [r7, #24]
 80077dc:	461a      	mov	r2, r3
 80077de:	6879      	ldr	r1, [r7, #4]
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 fa50 	bl	8007c86 <USBH_CtlReq>
 80077e6:	4603      	mov	r3, r0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	789b      	ldrb	r3, [r3, #2]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d10f      	bne.n	8007824 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2205      	movs	r2, #5
 800780e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	b29a      	uxth	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007824:	2200      	movs	r2, #0
 8007826:	2100      	movs	r1, #0
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fa2c 	bl	8007c86 <USBH_CtlReq>
 800782e:	4603      	mov	r3, r0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	460b      	mov	r3, r1
 8007842:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	789b      	ldrb	r3, [r3, #2]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d10e      	bne.n	800786a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2209      	movs	r2, #9
 8007856:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	887a      	ldrh	r2, [r7, #2]
 800785c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800786a:	2200      	movs	r2, #0
 800786c:	2100      	movs	r1, #0
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fa09 	bl	8007c86 <USBH_CtlReq>
 8007874:	4603      	mov	r3, r0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b082      	sub	sp, #8
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	460b      	mov	r3, r1
 8007888:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	789b      	ldrb	r3, [r3, #2]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d10f      	bne.n	80078b2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2203      	movs	r2, #3
 800789c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800789e:	78fb      	ldrb	r3, [r7, #3]
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80078b2:	2200      	movs	r2, #0
 80078b4:	2100      	movs	r1, #0
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f9e5 	bl	8007c86 <USBH_CtlReq>
 80078bc:	4603      	mov	r3, r0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b082      	sub	sp, #8
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	460b      	mov	r3, r1
 80078d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	789b      	ldrb	r3, [r3, #2]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d10f      	bne.n	80078fa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2202      	movs	r2, #2
 80078de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80078ec:	78fb      	ldrb	r3, [r7, #3]
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80078fa:	2200      	movs	r2, #0
 80078fc:	2100      	movs	r1, #0
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f9c1 	bl	8007c86 <USBH_CtlReq>
 8007904:	4603      	mov	r3, r0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800790e:	b480      	push	{r7}
 8007910:	b085      	sub	sp, #20
 8007912:	af00      	add	r7, sp, #0
 8007914:	60f8      	str	r0, [r7, #12]
 8007916:	60b9      	str	r1, [r7, #8]
 8007918:	4613      	mov	r3, r2
 800791a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	785a      	ldrb	r2, [r3, #1]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	3302      	adds	r3, #2
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	b29a      	uxth	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	3303      	adds	r3, #3
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	b29b      	uxth	r3, r3
 800793c:	021b      	lsls	r3, r3, #8
 800793e:	b29b      	uxth	r3, r3
 8007940:	4313      	orrs	r3, r2
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	791a      	ldrb	r2, [r3, #4]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	795a      	ldrb	r2, [r3, #5]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	799a      	ldrb	r2, [r3, #6]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	79da      	ldrb	r2, [r3, #7]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007968:	88fb      	ldrh	r3, [r7, #6]
 800796a:	2b08      	cmp	r3, #8
 800796c:	d939      	bls.n	80079e2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	3308      	adds	r3, #8
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	b29a      	uxth	r2, r3
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	3309      	adds	r3, #9
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	b29b      	uxth	r3, r3
 800797e:	021b      	lsls	r3, r3, #8
 8007980:	b29b      	uxth	r3, r3
 8007982:	4313      	orrs	r3, r2
 8007984:	b29a      	uxth	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	330a      	adds	r3, #10
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	b29a      	uxth	r2, r3
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	330b      	adds	r3, #11
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	b29b      	uxth	r3, r3
 800799a:	021b      	lsls	r3, r3, #8
 800799c:	b29b      	uxth	r3, r3
 800799e:	4313      	orrs	r3, r2
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	330c      	adds	r3, #12
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	330d      	adds	r3, #13
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	021b      	lsls	r3, r3, #8
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	4313      	orrs	r3, r2
 80079bc:	b29a      	uxth	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	7b9a      	ldrb	r2, [r3, #14]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	7bda      	ldrb	r2, [r3, #15]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	7c1a      	ldrb	r2, [r3, #16]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	7c5a      	ldrb	r2, [r3, #17]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	745a      	strb	r2, [r3, #17]
  }
}
 80079e2:	bf00      	nop
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b08a      	sub	sp, #40	; 0x28
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	60f8      	str	r0, [r7, #12]
 80079f6:	60b9      	str	r1, [r7, #8]
 80079f8:	4613      	mov	r3, r2
 80079fa:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007a00:	2300      	movs	r3, #0
 8007a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	781a      	ldrb	r2, [r3, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	785a      	ldrb	r2, [r3, #1]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	3302      	adds	r3, #2
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	3303      	adds	r3, #3
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	021b      	lsls	r3, r3, #8
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	4313      	orrs	r3, r2
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	791a      	ldrb	r2, [r3, #4]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	795a      	ldrb	r2, [r3, #5]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	799a      	ldrb	r2, [r3, #6]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	79da      	ldrb	r2, [r3, #7]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	7a1a      	ldrb	r2, [r3, #8]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007a64:	88fb      	ldrh	r3, [r7, #6]
 8007a66:	2b09      	cmp	r3, #9
 8007a68:	d95f      	bls.n	8007b2a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007a6a:	2309      	movs	r3, #9
 8007a6c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a72:	e051      	b.n	8007b18 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a74:	f107 0316 	add.w	r3, r7, #22
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a7c:	f000 f8e8 	bl	8007c50 <USBH_GetNextDesc>
 8007a80:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	785b      	ldrb	r3, [r3, #1]
 8007a86:	2b04      	cmp	r3, #4
 8007a88:	d146      	bne.n	8007b18 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007a8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a8e:	221a      	movs	r2, #26
 8007a90:	fb02 f303 	mul.w	r3, r2, r3
 8007a94:	3308      	adds	r3, #8
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4413      	add	r3, r2
 8007a9a:	3302      	adds	r3, #2
 8007a9c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007a9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007aa0:	69f8      	ldr	r0, [r7, #28]
 8007aa2:	f000 f846 	bl	8007b32 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007aac:	2300      	movs	r3, #0
 8007aae:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ab0:	e022      	b.n	8007af8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ab2:	f107 0316 	add.w	r3, r7, #22
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007aba:	f000 f8c9 	bl	8007c50 <USBH_GetNextDesc>
 8007abe:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	785b      	ldrb	r3, [r3, #1]
 8007ac4:	2b05      	cmp	r3, #5
 8007ac6:	d117      	bne.n	8007af8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007ac8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007acc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007ad0:	3201      	adds	r2, #1
 8007ad2:	00d2      	lsls	r2, r2, #3
 8007ad4:	211a      	movs	r1, #26
 8007ad6:	fb01 f303 	mul.w	r3, r1, r3
 8007ada:	4413      	add	r3, r2
 8007adc:	3308      	adds	r3, #8
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007ae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ae8:	69b8      	ldr	r0, [r7, #24]
 8007aea:	f000 f851 	bl	8007b90 <USBH_ParseEPDesc>
            ep_ix++;
 8007aee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007af2:	3301      	adds	r3, #1
 8007af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	791b      	ldrb	r3, [r3, #4]
 8007afc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d204      	bcs.n	8007b0e <USBH_ParseCfgDesc+0x120>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	885a      	ldrh	r2, [r3, #2]
 8007b08:	8afb      	ldrh	r3, [r7, #22]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d8d1      	bhi.n	8007ab2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007b0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b12:	3301      	adds	r3, #1
 8007b14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d804      	bhi.n	8007b2a <USBH_ParseCfgDesc+0x13c>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	885a      	ldrh	r2, [r3, #2]
 8007b24:	8afb      	ldrh	r3, [r7, #22]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d8a4      	bhi.n	8007a74 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007b2a:	bf00      	nop
 8007b2c:	3728      	adds	r7, #40	; 0x28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781a      	ldrb	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	785a      	ldrb	r2, [r3, #1]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	789a      	ldrb	r2, [r3, #2]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	78da      	ldrb	r2, [r3, #3]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	791a      	ldrb	r2, [r3, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	795a      	ldrb	r2, [r3, #5]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	799a      	ldrb	r2, [r3, #6]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	79da      	ldrb	r2, [r3, #7]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	7a1a      	ldrb	r2, [r3, #8]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	721a      	strb	r2, [r3, #8]
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781a      	ldrb	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	785a      	ldrb	r2, [r3, #1]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	789a      	ldrb	r2, [r3, #2]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	78da      	ldrb	r2, [r3, #3]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	3304      	adds	r3, #4
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	3305      	adds	r3, #5
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	021b      	lsls	r3, r3, #8
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	799a      	ldrb	r2, [r3, #6]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	719a      	strb	r2, [r3, #6]
}
 8007bde:	bf00      	nop
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b087      	sub	sp, #28
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	60b9      	str	r1, [r7, #8]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d120      	bne.n	8007c44 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	1e9a      	subs	r2, r3, #2
 8007c08:	88fb      	ldrh	r3, [r7, #6]
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	bf28      	it	cs
 8007c0e:	4613      	movcs	r3, r2
 8007c10:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	3302      	adds	r3, #2
 8007c16:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007c18:	2300      	movs	r3, #0
 8007c1a:	82fb      	strh	r3, [r7, #22]
 8007c1c:	e00b      	b.n	8007c36 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c1e:	8afb      	ldrh	r3, [r7, #22]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	781a      	ldrb	r2, [r3, #0]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c30:	8afb      	ldrh	r3, [r7, #22]
 8007c32:	3302      	adds	r3, #2
 8007c34:	82fb      	strh	r3, [r7, #22]
 8007c36:	8afa      	ldrh	r2, [r7, #22]
 8007c38:	8abb      	ldrh	r3, [r7, #20]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d3ef      	bcc.n	8007c1e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2200      	movs	r2, #0
 8007c42:	701a      	strb	r2, [r3, #0]
  }
}
 8007c44:	bf00      	nop
 8007c46:	371c      	adds	r7, #28
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	881a      	ldrh	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	4413      	add	r3, r2
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4413      	add	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c78:	68fb      	ldr	r3, [r7, #12]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b086      	sub	sp, #24
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	60b9      	str	r1, [r7, #8]
 8007c90:	4613      	mov	r3, r2
 8007c92:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007c94:	2301      	movs	r3, #1
 8007c96:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	789b      	ldrb	r3, [r3, #2]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d002      	beq.n	8007ca6 <USBH_CtlReq+0x20>
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d00f      	beq.n	8007cc4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007ca4:	e027      	b.n	8007cf6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	88fa      	ldrh	r2, [r7, #6]
 8007cb0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8007cc2:	e018      	b.n	8007cf6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 f81b 	bl	8007d00 <USBH_HandleControl>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <USBH_CtlReq+0x54>
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d106      	bne.n	8007ce8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	761a      	strb	r2, [r3, #24]
      break;
 8007ce6:	e005      	b.n	8007cf4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d102      	bne.n	8007cf4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	709a      	strb	r2, [r3, #2]
      break;
 8007cf4:	bf00      	nop
  }
  return status;
 8007cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af02      	add	r7, sp, #8
 8007d06:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	7e1b      	ldrb	r3, [r3, #24]
 8007d14:	3b01      	subs	r3, #1
 8007d16:	2b0a      	cmp	r3, #10
 8007d18:	f200 8156 	bhi.w	8007fc8 <USBH_HandleControl+0x2c8>
 8007d1c:	a201      	add	r2, pc, #4	; (adr r2, 8007d24 <USBH_HandleControl+0x24>)
 8007d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d22:	bf00      	nop
 8007d24:	08007d51 	.word	0x08007d51
 8007d28:	08007d6b 	.word	0x08007d6b
 8007d2c:	08007dd5 	.word	0x08007dd5
 8007d30:	08007dfb 	.word	0x08007dfb
 8007d34:	08007e33 	.word	0x08007e33
 8007d38:	08007e5d 	.word	0x08007e5d
 8007d3c:	08007eaf 	.word	0x08007eaf
 8007d40:	08007ed1 	.word	0x08007ed1
 8007d44:	08007f0d 	.word	0x08007f0d
 8007d48:	08007f33 	.word	0x08007f33
 8007d4c:	08007f71 	.word	0x08007f71
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f103 0110 	add.w	r1, r3, #16
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	795b      	ldrb	r3, [r3, #5]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f943 	bl	8007fe8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2202      	movs	r2, #2
 8007d66:	761a      	strb	r2, [r3, #24]
      break;
 8007d68:	e139      	b.n	8007fde <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	795b      	ldrb	r3, [r3, #5]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fcc5 	bl	8008700 <USBH_LL_GetURBState>
 8007d76:	4603      	mov	r3, r0
 8007d78:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d7a:	7bbb      	ldrb	r3, [r7, #14]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d11e      	bne.n	8007dbe <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	7c1b      	ldrb	r3, [r3, #16]
 8007d84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d88:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	8adb      	ldrh	r3, [r3, #22]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007d92:	7b7b      	ldrb	r3, [r7, #13]
 8007d94:	2b80      	cmp	r3, #128	; 0x80
 8007d96:	d103      	bne.n	8007da0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2203      	movs	r2, #3
 8007d9c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d9e:	e115      	b.n	8007fcc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2205      	movs	r2, #5
 8007da4:	761a      	strb	r2, [r3, #24]
      break;
 8007da6:	e111      	b.n	8007fcc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007da8:	7b7b      	ldrb	r3, [r7, #13]
 8007daa:	2b80      	cmp	r3, #128	; 0x80
 8007dac:	d103      	bne.n	8007db6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2209      	movs	r2, #9
 8007db2:	761a      	strb	r2, [r3, #24]
      break;
 8007db4:	e10a      	b.n	8007fcc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2207      	movs	r2, #7
 8007dba:	761a      	strb	r2, [r3, #24]
      break;
 8007dbc:	e106      	b.n	8007fcc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007dbe:	7bbb      	ldrb	r3, [r7, #14]
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d003      	beq.n	8007dcc <USBH_HandleControl+0xcc>
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	f040 8100 	bne.w	8007fcc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	220b      	movs	r2, #11
 8007dd0:	761a      	strb	r2, [r3, #24]
      break;
 8007dd2:	e0fb      	b.n	8007fcc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6899      	ldr	r1, [r3, #8]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	899a      	ldrh	r2, [r3, #12]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	791b      	ldrb	r3, [r3, #4]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f93a 	bl	8008066 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2204      	movs	r2, #4
 8007df6:	761a      	strb	r2, [r3, #24]
      break;
 8007df8:	e0f1      	b.n	8007fde <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	791b      	ldrb	r3, [r3, #4]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fc7d 	bl	8008700 <USBH_LL_GetURBState>
 8007e06:	4603      	mov	r3, r0
 8007e08:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e0a:	7bbb      	ldrb	r3, [r7, #14]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d102      	bne.n	8007e16 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2209      	movs	r2, #9
 8007e14:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
 8007e18:	2b05      	cmp	r3, #5
 8007e1a:	d102      	bne.n	8007e22 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e20:	e0d6      	b.n	8007fd0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007e22:	7bbb      	ldrb	r3, [r7, #14]
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	f040 80d3 	bne.w	8007fd0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	220b      	movs	r2, #11
 8007e2e:	761a      	strb	r2, [r3, #24]
      break;
 8007e30:	e0ce      	b.n	8007fd0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6899      	ldr	r1, [r3, #8]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	899a      	ldrh	r2, [r3, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	795b      	ldrb	r3, [r3, #5]
 8007e3e:	2001      	movs	r0, #1
 8007e40:	9000      	str	r0, [sp, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f8ea 	bl	800801c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2206      	movs	r2, #6
 8007e58:	761a      	strb	r2, [r3, #24]
      break;
 8007e5a:	e0c0      	b.n	8007fde <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	795b      	ldrb	r3, [r3, #5]
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fc4c 	bl	8008700 <USBH_LL_GetURBState>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d103      	bne.n	8007e7a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2207      	movs	r2, #7
 8007e76:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e78:	e0ac      	b.n	8007fd4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	2b05      	cmp	r3, #5
 8007e7e:	d105      	bne.n	8007e8c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	220c      	movs	r2, #12
 8007e84:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007e86:	2303      	movs	r3, #3
 8007e88:	73fb      	strb	r3, [r7, #15]
      break;
 8007e8a:	e0a3      	b.n	8007fd4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e8c:	7bbb      	ldrb	r3, [r7, #14]
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d103      	bne.n	8007e9a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2205      	movs	r2, #5
 8007e96:	761a      	strb	r2, [r3, #24]
      break;
 8007e98:	e09c      	b.n	8007fd4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	f040 8099 	bne.w	8007fd4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	220b      	movs	r2, #11
 8007ea6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8007eac:	e092      	b.n	8007fd4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	791b      	ldrb	r3, [r3, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f8d5 	bl	8008066 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2208      	movs	r2, #8
 8007ecc:	761a      	strb	r2, [r3, #24]

      break;
 8007ece:	e086      	b.n	8007fde <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	791b      	ldrb	r3, [r3, #4]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fc12 	bl	8008700 <USBH_LL_GetURBState>
 8007edc:	4603      	mov	r3, r0
 8007ede:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d105      	bne.n	8007ef2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	220d      	movs	r2, #13
 8007eea:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ef0:	e072      	b.n	8007fd8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007ef2:	7bbb      	ldrb	r3, [r7, #14]
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d103      	bne.n	8007f00 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	220b      	movs	r2, #11
 8007efc:	761a      	strb	r2, [r3, #24]
      break;
 8007efe:	e06b      	b.n	8007fd8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	d168      	bne.n	8007fd8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007f06:	2303      	movs	r3, #3
 8007f08:	73fb      	strb	r3, [r7, #15]
      break;
 8007f0a:	e065      	b.n	8007fd8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	795b      	ldrb	r3, [r3, #5]
 8007f10:	2201      	movs	r2, #1
 8007f12:	9200      	str	r2, [sp, #0]
 8007f14:	2200      	movs	r2, #0
 8007f16:	2100      	movs	r1, #0
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f87f 	bl	800801c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	220a      	movs	r2, #10
 8007f2e:	761a      	strb	r2, [r3, #24]
      break;
 8007f30:	e055      	b.n	8007fde <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	795b      	ldrb	r3, [r3, #5]
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fbe1 	bl	8008700 <USBH_LL_GetURBState>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d105      	bne.n	8007f54 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	220d      	movs	r2, #13
 8007f50:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007f52:	e043      	b.n	8007fdc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d103      	bne.n	8007f62 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2209      	movs	r2, #9
 8007f5e:	761a      	strb	r2, [r3, #24]
      break;
 8007f60:	e03c      	b.n	8007fdc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	2b04      	cmp	r3, #4
 8007f66:	d139      	bne.n	8007fdc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	220b      	movs	r2, #11
 8007f6c:	761a      	strb	r2, [r3, #24]
      break;
 8007f6e:	e035      	b.n	8007fdc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	7e5b      	ldrb	r3, [r3, #25]
 8007f74:	3301      	adds	r3, #1
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	765a      	strb	r2, [r3, #25]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	7e5b      	ldrb	r3, [r3, #25]
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d806      	bhi.n	8007f92 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007f90:	e025      	b.n	8007fde <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f98:	2106      	movs	r1, #6
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	795b      	ldrb	r3, [r3, #5]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f90c 	bl	80081c8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	791b      	ldrb	r3, [r3, #4]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f906 	bl	80081c8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8007fc6:	e00a      	b.n	8007fde <USBH_HandleControl+0x2de>

    default:
      break;
 8007fc8:	bf00      	nop
 8007fca:	e008      	b.n	8007fde <USBH_HandleControl+0x2de>
      break;
 8007fcc:	bf00      	nop
 8007fce:	e006      	b.n	8007fde <USBH_HandleControl+0x2de>
      break;
 8007fd0:	bf00      	nop
 8007fd2:	e004      	b.n	8007fde <USBH_HandleControl+0x2de>
      break;
 8007fd4:	bf00      	nop
 8007fd6:	e002      	b.n	8007fde <USBH_HandleControl+0x2de>
      break;
 8007fd8:	bf00      	nop
 8007fda:	e000      	b.n	8007fde <USBH_HandleControl+0x2de>
      break;
 8007fdc:	bf00      	nop
  }

  return status;
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af04      	add	r7, sp, #16
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ff6:	79f9      	ldrb	r1, [r7, #7]
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	9303      	str	r3, [sp, #12]
 8007ffc:	2308      	movs	r3, #8
 8007ffe:	9302      	str	r3, [sp, #8]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	2300      	movs	r3, #0
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	2300      	movs	r3, #0
 800800a:	2200      	movs	r2, #0
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f000 fb46 	bl	800869e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b088      	sub	sp, #32
 8008020:	af04      	add	r7, sp, #16
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	4611      	mov	r1, r2
 8008028:	461a      	mov	r2, r3
 800802a:	460b      	mov	r3, r1
 800802c:	80fb      	strh	r3, [r7, #6]
 800802e:	4613      	mov	r3, r2
 8008030:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008040:	7979      	ldrb	r1, [r7, #5]
 8008042:	7e3b      	ldrb	r3, [r7, #24]
 8008044:	9303      	str	r3, [sp, #12]
 8008046:	88fb      	ldrh	r3, [r7, #6]
 8008048:	9302      	str	r3, [sp, #8]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	9301      	str	r3, [sp, #4]
 800804e:	2301      	movs	r3, #1
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	2300      	movs	r3, #0
 8008054:	2200      	movs	r2, #0
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f000 fb21 	bl	800869e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b088      	sub	sp, #32
 800806a:	af04      	add	r7, sp, #16
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	4611      	mov	r1, r2
 8008072:	461a      	mov	r2, r3
 8008074:	460b      	mov	r3, r1
 8008076:	80fb      	strh	r3, [r7, #6]
 8008078:	4613      	mov	r3, r2
 800807a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800807c:	7979      	ldrb	r1, [r7, #5]
 800807e:	2300      	movs	r3, #0
 8008080:	9303      	str	r3, [sp, #12]
 8008082:	88fb      	ldrh	r3, [r7, #6]
 8008084:	9302      	str	r3, [sp, #8]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	9301      	str	r3, [sp, #4]
 800808a:	2301      	movs	r3, #1
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	2300      	movs	r3, #0
 8008090:	2201      	movs	r2, #1
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 fb03 	bl	800869e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008098:	2300      	movs	r3, #0

}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b088      	sub	sp, #32
 80080a6:	af04      	add	r7, sp, #16
 80080a8:	60f8      	str	r0, [r7, #12]
 80080aa:	60b9      	str	r1, [r7, #8]
 80080ac:	4611      	mov	r1, r2
 80080ae:	461a      	mov	r2, r3
 80080b0:	460b      	mov	r3, r1
 80080b2:	80fb      	strh	r3, [r7, #6]
 80080b4:	4613      	mov	r3, r2
 80080b6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80080c6:	7979      	ldrb	r1, [r7, #5]
 80080c8:	7e3b      	ldrb	r3, [r7, #24]
 80080ca:	9303      	str	r3, [sp, #12]
 80080cc:	88fb      	ldrh	r3, [r7, #6]
 80080ce:	9302      	str	r3, [sp, #8]
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	9301      	str	r3, [sp, #4]
 80080d4:	2301      	movs	r3, #1
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	2302      	movs	r3, #2
 80080da:	2200      	movs	r2, #0
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f000 fade 	bl	800869e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af04      	add	r7, sp, #16
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	4611      	mov	r1, r2
 80080f8:	461a      	mov	r2, r3
 80080fa:	460b      	mov	r3, r1
 80080fc:	80fb      	strh	r3, [r7, #6]
 80080fe:	4613      	mov	r3, r2
 8008100:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008102:	7979      	ldrb	r1, [r7, #5]
 8008104:	2300      	movs	r3, #0
 8008106:	9303      	str	r3, [sp, #12]
 8008108:	88fb      	ldrh	r3, [r7, #6]
 800810a:	9302      	str	r3, [sp, #8]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	9301      	str	r3, [sp, #4]
 8008110:	2301      	movs	r3, #1
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	2302      	movs	r3, #2
 8008116:	2201      	movs	r2, #1
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 fac0 	bl	800869e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af04      	add	r7, sp, #16
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	4608      	mov	r0, r1
 8008132:	4611      	mov	r1, r2
 8008134:	461a      	mov	r2, r3
 8008136:	4603      	mov	r3, r0
 8008138:	70fb      	strb	r3, [r7, #3]
 800813a:	460b      	mov	r3, r1
 800813c:	70bb      	strb	r3, [r7, #2]
 800813e:	4613      	mov	r3, r2
 8008140:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008142:	7878      	ldrb	r0, [r7, #1]
 8008144:	78ba      	ldrb	r2, [r7, #2]
 8008146:	78f9      	ldrb	r1, [r7, #3]
 8008148:	8b3b      	ldrh	r3, [r7, #24]
 800814a:	9302      	str	r3, [sp, #8]
 800814c:	7d3b      	ldrb	r3, [r7, #20]
 800814e:	9301      	str	r3, [sp, #4]
 8008150:	7c3b      	ldrb	r3, [r7, #16]
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	4603      	mov	r3, r0
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fa53 	bl	8008602 <USBH_LL_OpenPipe>

  return USBH_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fa72 	bl	8008660 <USBH_LL_ClosePipe>

  return USBH_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	460b      	mov	r3, r1
 8008190:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f836 	bl	8008204 <USBH_GetFreePipe>
 8008198:	4603      	mov	r3, r0
 800819a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800819c:	89fb      	ldrh	r3, [r7, #14]
 800819e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d00a      	beq.n	80081bc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80081a6:	78fa      	ldrb	r2, [r7, #3]
 80081a8:	89fb      	ldrh	r3, [r7, #14]
 80081aa:	f003 030f 	and.w	r3, r3, #15
 80081ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	33e0      	adds	r3, #224	; 0xe0
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	440b      	add	r3, r1
 80081ba:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80081bc:	89fb      	ldrh	r3, [r7, #14]
 80081be:	b2db      	uxtb	r3, r3
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80081d4:	78fb      	ldrb	r3, [r7, #3]
 80081d6:	2b0a      	cmp	r3, #10
 80081d8:	d80d      	bhi.n	80081f6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80081da:	78fb      	ldrb	r3, [r7, #3]
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	33e0      	adds	r3, #224	; 0xe0
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	685a      	ldr	r2, [r3, #4]
 80081e6:	78fb      	ldrb	r3, [r7, #3]
 80081e8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80081ec:	6879      	ldr	r1, [r7, #4]
 80081ee:	33e0      	adds	r3, #224	; 0xe0
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	440b      	add	r3, r1
 80081f4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800820c:	2300      	movs	r3, #0
 800820e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008210:	2300      	movs	r3, #0
 8008212:	73fb      	strb	r3, [r7, #15]
 8008214:	e00f      	b.n	8008236 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	33e0      	adds	r3, #224	; 0xe0
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d102      	bne.n	8008230 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800822a:	7bfb      	ldrb	r3, [r7, #15]
 800822c:	b29b      	uxth	r3, r3
 800822e:	e007      	b.n	8008240 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	3301      	adds	r3, #1
 8008234:	73fb      	strb	r3, [r7, #15]
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	2b0a      	cmp	r3, #10
 800823a:	d9ec      	bls.n	8008216 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800823c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008250:	2201      	movs	r2, #1
 8008252:	490e      	ldr	r1, [pc, #56]	; (800828c <MX_USB_HOST_Init+0x40>)
 8008254:	480e      	ldr	r0, [pc, #56]	; (8008290 <MX_USB_HOST_Init+0x44>)
 8008256:	f7fe fca1 	bl	8006b9c <USBH_Init>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008260:	f7f8 fcf0 	bl	8000c44 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008264:	490b      	ldr	r1, [pc, #44]	; (8008294 <MX_USB_HOST_Init+0x48>)
 8008266:	480a      	ldr	r0, [pc, #40]	; (8008290 <MX_USB_HOST_Init+0x44>)
 8008268:	f7fe fd26 	bl	8006cb8 <USBH_RegisterClass>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008272:	f7f8 fce7 	bl	8000c44 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008276:	4806      	ldr	r0, [pc, #24]	; (8008290 <MX_USB_HOST_Init+0x44>)
 8008278:	f7fe fdaa 	bl	8006dd0 <USBH_Start>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008282:	f7f8 fcdf 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008286:	bf00      	nop
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	080082ad 	.word	0x080082ad
 8008290:	20000250 	.word	0x20000250
 8008294:	2000000c 	.word	0x2000000c

08008298 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800829c:	4802      	ldr	r0, [pc, #8]	; (80082a8 <MX_USB_HOST_Process+0x10>)
 800829e:	f7fe fda7 	bl	8006df0 <USBH_Process>
}
 80082a2:	bf00      	nop
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	20000250 	.word	0x20000250

080082ac <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80082b8:	78fb      	ldrb	r3, [r7, #3]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d819      	bhi.n	80082f4 <USBH_UserProcess+0x48>
 80082c0:	a201      	add	r2, pc, #4	; (adr r2, 80082c8 <USBH_UserProcess+0x1c>)
 80082c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c6:	bf00      	nop
 80082c8:	080082f5 	.word	0x080082f5
 80082cc:	080082e5 	.word	0x080082e5
 80082d0:	080082f5 	.word	0x080082f5
 80082d4:	080082ed 	.word	0x080082ed
 80082d8:	080082dd 	.word	0x080082dd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80082dc:	4b09      	ldr	r3, [pc, #36]	; (8008304 <USBH_UserProcess+0x58>)
 80082de:	2203      	movs	r2, #3
 80082e0:	701a      	strb	r2, [r3, #0]
  break;
 80082e2:	e008      	b.n	80082f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80082e4:	4b07      	ldr	r3, [pc, #28]	; (8008304 <USBH_UserProcess+0x58>)
 80082e6:	2202      	movs	r2, #2
 80082e8:	701a      	strb	r2, [r3, #0]
  break;
 80082ea:	e004      	b.n	80082f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80082ec:	4b05      	ldr	r3, [pc, #20]	; (8008304 <USBH_UserProcess+0x58>)
 80082ee:	2201      	movs	r2, #1
 80082f0:	701a      	strb	r2, [r3, #0]
  break;
 80082f2:	e000      	b.n	80082f6 <USBH_UserProcess+0x4a>

  default:
  break;
 80082f4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80082f6:	bf00      	nop
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	200000bc 	.word	0x200000bc

08008308 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b08a      	sub	sp, #40	; 0x28
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008310:	f107 0314 	add.w	r3, r7, #20
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	605a      	str	r2, [r3, #4]
 800831a:	609a      	str	r2, [r3, #8]
 800831c:	60da      	str	r2, [r3, #12]
 800831e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008328:	d147      	bne.n	80083ba <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800832a:	2300      	movs	r3, #0
 800832c:	613b      	str	r3, [r7, #16]
 800832e:	4b25      	ldr	r3, [pc, #148]	; (80083c4 <HAL_HCD_MspInit+0xbc>)
 8008330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008332:	4a24      	ldr	r2, [pc, #144]	; (80083c4 <HAL_HCD_MspInit+0xbc>)
 8008334:	f043 0301 	orr.w	r3, r3, #1
 8008338:	6313      	str	r3, [r2, #48]	; 0x30
 800833a:	4b22      	ldr	r3, [pc, #136]	; (80083c4 <HAL_HCD_MspInit+0xbc>)
 800833c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	613b      	str	r3, [r7, #16]
 8008344:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800834a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800834c:	2300      	movs	r3, #0
 800834e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008350:	2300      	movs	r3, #0
 8008352:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008354:	f107 0314 	add.w	r3, r7, #20
 8008358:	4619      	mov	r1, r3
 800835a:	481b      	ldr	r0, [pc, #108]	; (80083c8 <HAL_HCD_MspInit+0xc0>)
 800835c:	f7f9 f8a8 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008360:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008366:	2302      	movs	r3, #2
 8008368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800836a:	2300      	movs	r3, #0
 800836c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800836e:	2300      	movs	r3, #0
 8008370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008372:	230a      	movs	r3, #10
 8008374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008376:	f107 0314 	add.w	r3, r7, #20
 800837a:	4619      	mov	r1, r3
 800837c:	4812      	ldr	r0, [pc, #72]	; (80083c8 <HAL_HCD_MspInit+0xc0>)
 800837e:	f7f9 f897 	bl	80014b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008382:	4b10      	ldr	r3, [pc, #64]	; (80083c4 <HAL_HCD_MspInit+0xbc>)
 8008384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008386:	4a0f      	ldr	r2, [pc, #60]	; (80083c4 <HAL_HCD_MspInit+0xbc>)
 8008388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800838c:	6353      	str	r3, [r2, #52]	; 0x34
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]
 8008392:	4b0c      	ldr	r3, [pc, #48]	; (80083c4 <HAL_HCD_MspInit+0xbc>)
 8008394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008396:	4a0b      	ldr	r2, [pc, #44]	; (80083c4 <HAL_HCD_MspInit+0xbc>)
 8008398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800839c:	6453      	str	r3, [r2, #68]	; 0x44
 800839e:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <HAL_HCD_MspInit+0xbc>)
 80083a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083aa:	2200      	movs	r2, #0
 80083ac:	2100      	movs	r1, #0
 80083ae:	2043      	movs	r0, #67	; 0x43
 80083b0:	f7f9 f847 	bl	8001442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083b4:	2043      	movs	r0, #67	; 0x43
 80083b6:	f7f9 f860 	bl	800147a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083ba:	bf00      	nop
 80083bc:	3728      	adds	r7, #40	; 0x28
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	40023800 	.word	0x40023800
 80083c8:	40020000 	.word	0x40020000

080083cc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff f8db 	bl	8007596 <USBH_LL_IncTimer>
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7ff f913 	bl	8007622 <USBH_LL_Connect>
}
 80083fc:	bf00      	nop
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008412:	4618      	mov	r0, r3
 8008414:	f7ff f91c 	bl	8007650 <USBH_LL_Disconnect>
}
 8008418:	bf00      	nop
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	70fb      	strb	r3, [r7, #3]
 800842c:	4613      	mov	r3, r2
 800842e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800844a:	4618      	mov	r0, r3
 800844c:	f7ff f8cd 	bl	80075ea <USBH_LL_PortEnabled>
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008466:	4618      	mov	r0, r3
 8008468:	f7ff f8cd 	bl	8007606 <USBH_LL_PortDisabled>
}
 800846c:	bf00      	nop
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008482:	2b01      	cmp	r3, #1
 8008484:	d12a      	bne.n	80084dc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008486:	4a18      	ldr	r2, [pc, #96]	; (80084e8 <USBH_LL_Init+0x74>)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a15      	ldr	r2, [pc, #84]	; (80084e8 <USBH_LL_Init+0x74>)
 8008492:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008496:	4b14      	ldr	r3, [pc, #80]	; (80084e8 <USBH_LL_Init+0x74>)
 8008498:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800849c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800849e:	4b12      	ldr	r3, [pc, #72]	; (80084e8 <USBH_LL_Init+0x74>)
 80084a0:	2208      	movs	r2, #8
 80084a2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80084a4:	4b10      	ldr	r3, [pc, #64]	; (80084e8 <USBH_LL_Init+0x74>)
 80084a6:	2201      	movs	r2, #1
 80084a8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084aa:	4b0f      	ldr	r3, [pc, #60]	; (80084e8 <USBH_LL_Init+0x74>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80084b0:	4b0d      	ldr	r3, [pc, #52]	; (80084e8 <USBH_LL_Init+0x74>)
 80084b2:	2202      	movs	r2, #2
 80084b4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80084b6:	4b0c      	ldr	r3, [pc, #48]	; (80084e8 <USBH_LL_Init+0x74>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80084bc:	480a      	ldr	r0, [pc, #40]	; (80084e8 <USBH_LL_Init+0x74>)
 80084be:	f7f9 f9e8 	bl	8001892 <HAL_HCD_Init>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d001      	beq.n	80084cc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80084c8:	f7f8 fbbc 	bl	8000c44 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80084cc:	4806      	ldr	r0, [pc, #24]	; (80084e8 <USBH_LL_Init+0x74>)
 80084ce:	f7f9 fdcc 	bl	800206a <HAL_HCD_GetCurrentFrame>
 80084d2:	4603      	mov	r3, r0
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7ff f84e 	bl	8007578 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20000628 	.word	0x20000628

080084ec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008502:	4618      	mov	r0, r3
 8008504:	f7f9 fd3b 	bl	8001f7e <HAL_HCD_Start>
 8008508:	4603      	mov	r3, r0
 800850a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	4618      	mov	r0, r3
 8008510:	f000 f95c 	bl	80087cc <USBH_Get_USB_Status>
 8008514:	4603      	mov	r3, r0
 8008516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008518:	7bbb      	ldrb	r3, [r7, #14]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008538:	4618      	mov	r0, r3
 800853a:	f7f9 fd43 	bl	8001fc4 <HAL_HCD_Stop>
 800853e:	4603      	mov	r3, r0
 8008540:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	4618      	mov	r0, r3
 8008546:	f000 f941 	bl	80087cc <USBH_Get_USB_Status>
 800854a:	4603      	mov	r3, r0
 800854c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800854e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008560:	2301      	movs	r3, #1
 8008562:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800856a:	4618      	mov	r0, r3
 800856c:	f7f9 fd8b 	bl	8002086 <HAL_HCD_GetCurrentSpeed>
 8008570:	4603      	mov	r3, r0
 8008572:	2b02      	cmp	r3, #2
 8008574:	d00c      	beq.n	8008590 <USBH_LL_GetSpeed+0x38>
 8008576:	2b02      	cmp	r3, #2
 8008578:	d80d      	bhi.n	8008596 <USBH_LL_GetSpeed+0x3e>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <USBH_LL_GetSpeed+0x2c>
 800857e:	2b01      	cmp	r3, #1
 8008580:	d003      	beq.n	800858a <USBH_LL_GetSpeed+0x32>
 8008582:	e008      	b.n	8008596 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008584:	2300      	movs	r3, #0
 8008586:	73fb      	strb	r3, [r7, #15]
    break;
 8008588:	e008      	b.n	800859c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800858a:	2301      	movs	r3, #1
 800858c:	73fb      	strb	r3, [r7, #15]
    break;
 800858e:	e005      	b.n	800859c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008590:	2302      	movs	r3, #2
 8008592:	73fb      	strb	r3, [r7, #15]
    break;
 8008594:	e002      	b.n	800859c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008596:	2301      	movs	r3, #1
 8008598:	73fb      	strb	r3, [r7, #15]
    break;
 800859a:	bf00      	nop
  }
  return  speed;
 800859c:	7bfb      	ldrb	r3, [r7, #15]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b084      	sub	sp, #16
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085bc:	4618      	mov	r0, r3
 80085be:	f7f9 fd1e 	bl	8001ffe <HAL_HCD_ResetPort>
 80085c2:	4603      	mov	r3, r0
 80085c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 f8ff 	bl	80087cc <USBH_Get_USB_Status>
 80085ce:	4603      	mov	r3, r0
 80085d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085ee:	78fa      	ldrb	r2, [r7, #3]
 80085f0:	4611      	mov	r1, r2
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7f9 fd25 	bl	8002042 <HAL_HCD_HC_GetXferCount>
 80085f8:	4603      	mov	r3, r0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008602:	b590      	push	{r4, r7, lr}
 8008604:	b089      	sub	sp, #36	; 0x24
 8008606:	af04      	add	r7, sp, #16
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	4608      	mov	r0, r1
 800860c:	4611      	mov	r1, r2
 800860e:	461a      	mov	r2, r3
 8008610:	4603      	mov	r3, r0
 8008612:	70fb      	strb	r3, [r7, #3]
 8008614:	460b      	mov	r3, r1
 8008616:	70bb      	strb	r3, [r7, #2]
 8008618:	4613      	mov	r3, r2
 800861a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800862a:	787c      	ldrb	r4, [r7, #1]
 800862c:	78ba      	ldrb	r2, [r7, #2]
 800862e:	78f9      	ldrb	r1, [r7, #3]
 8008630:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008632:	9302      	str	r3, [sp, #8]
 8008634:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008638:	9301      	str	r3, [sp, #4]
 800863a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	4623      	mov	r3, r4
 8008642:	f7f9 f988 	bl	8001956 <HAL_HCD_HC_Init>
 8008646:	4603      	mov	r3, r0
 8008648:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	4618      	mov	r0, r3
 800864e:	f000 f8bd 	bl	80087cc <USBH_Get_USB_Status>
 8008652:	4603      	mov	r3, r0
 8008654:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008656:	7bbb      	ldrb	r3, [r7, #14]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3714      	adds	r7, #20
 800865c:	46bd      	mov	sp, r7
 800865e:	bd90      	pop	{r4, r7, pc}

08008660 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	460b      	mov	r3, r1
 800866a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800867a:	78fa      	ldrb	r2, [r7, #3]
 800867c:	4611      	mov	r1, r2
 800867e:	4618      	mov	r0, r3
 8008680:	f7f9 f9f8 	bl	8001a74 <HAL_HCD_HC_Halt>
 8008684:	4603      	mov	r3, r0
 8008686:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008688:	7bfb      	ldrb	r3, [r7, #15]
 800868a:	4618      	mov	r0, r3
 800868c:	f000 f89e 	bl	80087cc <USBH_Get_USB_Status>
 8008690:	4603      	mov	r3, r0
 8008692:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008694:	7bbb      	ldrb	r3, [r7, #14]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800869e:	b590      	push	{r4, r7, lr}
 80086a0:	b089      	sub	sp, #36	; 0x24
 80086a2:	af04      	add	r7, sp, #16
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	4608      	mov	r0, r1
 80086a8:	4611      	mov	r1, r2
 80086aa:	461a      	mov	r2, r3
 80086ac:	4603      	mov	r3, r0
 80086ae:	70fb      	strb	r3, [r7, #3]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70bb      	strb	r3, [r7, #2]
 80086b4:	4613      	mov	r3, r2
 80086b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80086c6:	787c      	ldrb	r4, [r7, #1]
 80086c8:	78ba      	ldrb	r2, [r7, #2]
 80086ca:	78f9      	ldrb	r1, [r7, #3]
 80086cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086d0:	9303      	str	r3, [sp, #12]
 80086d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086d4:	9302      	str	r3, [sp, #8]
 80086d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d8:	9301      	str	r3, [sp, #4]
 80086da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	4623      	mov	r3, r4
 80086e2:	f7f9 f9eb 	bl	8001abc <HAL_HCD_HC_SubmitRequest>
 80086e6:	4603      	mov	r3, r0
 80086e8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f000 f86d 	bl	80087cc <USBH_Get_USB_Status>
 80086f2:	4603      	mov	r3, r0
 80086f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3714      	adds	r7, #20
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd90      	pop	{r4, r7, pc}

08008700 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008712:	78fa      	ldrb	r2, [r7, #3]
 8008714:	4611      	mov	r1, r2
 8008716:	4618      	mov	r0, r3
 8008718:	f7f9 fc7f 	bl	800201a <HAL_HCD_HC_GetURBState>
 800871c:	4603      	mov	r3, r0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b082      	sub	sp, #8
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	460b      	mov	r3, r1
 8008730:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008738:	2b01      	cmp	r3, #1
 800873a:	d103      	bne.n	8008744 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800873c:	78fb      	ldrb	r3, [r7, #3]
 800873e:	4618      	mov	r0, r3
 8008740:	f000 f870 	bl	8008824 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008744:	20c8      	movs	r0, #200	; 0xc8
 8008746:	f7f8 fd7d 	bl	8001244 <HAL_Delay>
  return USBH_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	70fb      	strb	r3, [r7, #3]
 8008760:	4613      	mov	r3, r2
 8008762:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800876a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800876c:	78fb      	ldrb	r3, [r7, #3]
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	212c      	movs	r1, #44	; 0x2c
 8008772:	fb01 f303 	mul.w	r3, r1, r3
 8008776:	4413      	add	r3, r2
 8008778:	333b      	adds	r3, #59	; 0x3b
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d009      	beq.n	8008794 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008780:	78fb      	ldrb	r3, [r7, #3]
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	212c      	movs	r1, #44	; 0x2c
 8008786:	fb01 f303 	mul.w	r3, r1, r3
 800878a:	4413      	add	r3, r2
 800878c:	3354      	adds	r3, #84	; 0x54
 800878e:	78ba      	ldrb	r2, [r7, #2]
 8008790:	701a      	strb	r2, [r3, #0]
 8008792:	e008      	b.n	80087a6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008794:	78fb      	ldrb	r3, [r7, #3]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	212c      	movs	r1, #44	; 0x2c
 800879a:	fb01 f303 	mul.w	r3, r1, r3
 800879e:	4413      	add	r3, r2
 80087a0:	3355      	adds	r3, #85	; 0x55
 80087a2:	78ba      	ldrb	r2, [r7, #2]
 80087a4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7f8 fd41 	bl	8001244 <HAL_Delay>
}
 80087c2:	bf00      	nop
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	4603      	mov	r3, r0
 80087d4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087da:	79fb      	ldrb	r3, [r7, #7]
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d817      	bhi.n	8008810 <USBH_Get_USB_Status+0x44>
 80087e0:	a201      	add	r2, pc, #4	; (adr r2, 80087e8 <USBH_Get_USB_Status+0x1c>)
 80087e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e6:	bf00      	nop
 80087e8:	080087f9 	.word	0x080087f9
 80087ec:	080087ff 	.word	0x080087ff
 80087f0:	08008805 	.word	0x08008805
 80087f4:	0800880b 	.word	0x0800880b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	73fb      	strb	r3, [r7, #15]
    break;
 80087fc:	e00b      	b.n	8008816 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80087fe:	2302      	movs	r3, #2
 8008800:	73fb      	strb	r3, [r7, #15]
    break;
 8008802:	e008      	b.n	8008816 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008804:	2301      	movs	r3, #1
 8008806:	73fb      	strb	r3, [r7, #15]
    break;
 8008808:	e005      	b.n	8008816 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800880a:	2302      	movs	r3, #2
 800880c:	73fb      	strb	r3, [r7, #15]
    break;
 800880e:	e002      	b.n	8008816 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008810:	2302      	movs	r3, #2
 8008812:	73fb      	strb	r3, [r7, #15]
    break;
 8008814:	bf00      	nop
  }
  return usb_status;
 8008816:	7bfb      	ldrb	r3, [r7, #15]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800882e:	79fb      	ldrb	r3, [r7, #7]
 8008830:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008832:	79fb      	ldrb	r3, [r7, #7]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d102      	bne.n	800883e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008838:	2300      	movs	r3, #0
 800883a:	73fb      	strb	r3, [r7, #15]
 800883c:	e001      	b.n	8008842 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800883e:	2301      	movs	r3, #1
 8008840:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	461a      	mov	r2, r3
 8008846:	2101      	movs	r1, #1
 8008848:	4803      	ldr	r0, [pc, #12]	; (8008858 <MX_DriverVbusFS+0x34>)
 800884a:	f7f8 ffe5 	bl	8001818 <HAL_GPIO_WritePin>
}
 800884e:	bf00      	nop
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	40020800 	.word	0x40020800

0800885c <__errno>:
 800885c:	4b01      	ldr	r3, [pc, #4]	; (8008864 <__errno+0x8>)
 800885e:	6818      	ldr	r0, [r3, #0]
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	2000002c 	.word	0x2000002c

08008868 <__libc_init_array>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	4d0d      	ldr	r5, [pc, #52]	; (80088a0 <__libc_init_array+0x38>)
 800886c:	4c0d      	ldr	r4, [pc, #52]	; (80088a4 <__libc_init_array+0x3c>)
 800886e:	1b64      	subs	r4, r4, r5
 8008870:	10a4      	asrs	r4, r4, #2
 8008872:	2600      	movs	r6, #0
 8008874:	42a6      	cmp	r6, r4
 8008876:	d109      	bne.n	800888c <__libc_init_array+0x24>
 8008878:	4d0b      	ldr	r5, [pc, #44]	; (80088a8 <__libc_init_array+0x40>)
 800887a:	4c0c      	ldr	r4, [pc, #48]	; (80088ac <__libc_init_array+0x44>)
 800887c:	f000 f8f8 	bl	8008a70 <_init>
 8008880:	1b64      	subs	r4, r4, r5
 8008882:	10a4      	asrs	r4, r4, #2
 8008884:	2600      	movs	r6, #0
 8008886:	42a6      	cmp	r6, r4
 8008888:	d105      	bne.n	8008896 <__libc_init_array+0x2e>
 800888a:	bd70      	pop	{r4, r5, r6, pc}
 800888c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008890:	4798      	blx	r3
 8008892:	3601      	adds	r6, #1
 8008894:	e7ee      	b.n	8008874 <__libc_init_array+0xc>
 8008896:	f855 3b04 	ldr.w	r3, [r5], #4
 800889a:	4798      	blx	r3
 800889c:	3601      	adds	r6, #1
 800889e:	e7f2      	b.n	8008886 <__libc_init_array+0x1e>
 80088a0:	08008aac 	.word	0x08008aac
 80088a4:	08008aac 	.word	0x08008aac
 80088a8:	08008aac 	.word	0x08008aac
 80088ac:	08008ab0 	.word	0x08008ab0

080088b0 <malloc>:
 80088b0:	4b02      	ldr	r3, [pc, #8]	; (80088bc <malloc+0xc>)
 80088b2:	4601      	mov	r1, r0
 80088b4:	6818      	ldr	r0, [r3, #0]
 80088b6:	f000 b863 	b.w	8008980 <_malloc_r>
 80088ba:	bf00      	nop
 80088bc:	2000002c 	.word	0x2000002c

080088c0 <free>:
 80088c0:	4b02      	ldr	r3, [pc, #8]	; (80088cc <free+0xc>)
 80088c2:	4601      	mov	r1, r0
 80088c4:	6818      	ldr	r0, [r3, #0]
 80088c6:	f000 b80b 	b.w	80088e0 <_free_r>
 80088ca:	bf00      	nop
 80088cc:	2000002c 	.word	0x2000002c

080088d0 <memset>:
 80088d0:	4402      	add	r2, r0
 80088d2:	4603      	mov	r3, r0
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d100      	bne.n	80088da <memset+0xa>
 80088d8:	4770      	bx	lr
 80088da:	f803 1b01 	strb.w	r1, [r3], #1
 80088de:	e7f9      	b.n	80088d4 <memset+0x4>

080088e0 <_free_r>:
 80088e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088e2:	2900      	cmp	r1, #0
 80088e4:	d048      	beq.n	8008978 <_free_r+0x98>
 80088e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088ea:	9001      	str	r0, [sp, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f1a1 0404 	sub.w	r4, r1, #4
 80088f2:	bfb8      	it	lt
 80088f4:	18e4      	addlt	r4, r4, r3
 80088f6:	f000 f8ad 	bl	8008a54 <__malloc_lock>
 80088fa:	4a20      	ldr	r2, [pc, #128]	; (800897c <_free_r+0x9c>)
 80088fc:	9801      	ldr	r0, [sp, #4]
 80088fe:	6813      	ldr	r3, [r2, #0]
 8008900:	4615      	mov	r5, r2
 8008902:	b933      	cbnz	r3, 8008912 <_free_r+0x32>
 8008904:	6063      	str	r3, [r4, #4]
 8008906:	6014      	str	r4, [r2, #0]
 8008908:	b003      	add	sp, #12
 800890a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800890e:	f000 b8a7 	b.w	8008a60 <__malloc_unlock>
 8008912:	42a3      	cmp	r3, r4
 8008914:	d90b      	bls.n	800892e <_free_r+0x4e>
 8008916:	6821      	ldr	r1, [r4, #0]
 8008918:	1862      	adds	r2, r4, r1
 800891a:	4293      	cmp	r3, r2
 800891c:	bf04      	itt	eq
 800891e:	681a      	ldreq	r2, [r3, #0]
 8008920:	685b      	ldreq	r3, [r3, #4]
 8008922:	6063      	str	r3, [r4, #4]
 8008924:	bf04      	itt	eq
 8008926:	1852      	addeq	r2, r2, r1
 8008928:	6022      	streq	r2, [r4, #0]
 800892a:	602c      	str	r4, [r5, #0]
 800892c:	e7ec      	b.n	8008908 <_free_r+0x28>
 800892e:	461a      	mov	r2, r3
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	b10b      	cbz	r3, 8008938 <_free_r+0x58>
 8008934:	42a3      	cmp	r3, r4
 8008936:	d9fa      	bls.n	800892e <_free_r+0x4e>
 8008938:	6811      	ldr	r1, [r2, #0]
 800893a:	1855      	adds	r5, r2, r1
 800893c:	42a5      	cmp	r5, r4
 800893e:	d10b      	bne.n	8008958 <_free_r+0x78>
 8008940:	6824      	ldr	r4, [r4, #0]
 8008942:	4421      	add	r1, r4
 8008944:	1854      	adds	r4, r2, r1
 8008946:	42a3      	cmp	r3, r4
 8008948:	6011      	str	r1, [r2, #0]
 800894a:	d1dd      	bne.n	8008908 <_free_r+0x28>
 800894c:	681c      	ldr	r4, [r3, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	6053      	str	r3, [r2, #4]
 8008952:	4421      	add	r1, r4
 8008954:	6011      	str	r1, [r2, #0]
 8008956:	e7d7      	b.n	8008908 <_free_r+0x28>
 8008958:	d902      	bls.n	8008960 <_free_r+0x80>
 800895a:	230c      	movs	r3, #12
 800895c:	6003      	str	r3, [r0, #0]
 800895e:	e7d3      	b.n	8008908 <_free_r+0x28>
 8008960:	6825      	ldr	r5, [r4, #0]
 8008962:	1961      	adds	r1, r4, r5
 8008964:	428b      	cmp	r3, r1
 8008966:	bf04      	itt	eq
 8008968:	6819      	ldreq	r1, [r3, #0]
 800896a:	685b      	ldreq	r3, [r3, #4]
 800896c:	6063      	str	r3, [r4, #4]
 800896e:	bf04      	itt	eq
 8008970:	1949      	addeq	r1, r1, r5
 8008972:	6021      	streq	r1, [r4, #0]
 8008974:	6054      	str	r4, [r2, #4]
 8008976:	e7c7      	b.n	8008908 <_free_r+0x28>
 8008978:	b003      	add	sp, #12
 800897a:	bd30      	pop	{r4, r5, pc}
 800897c:	200000c0 	.word	0x200000c0

08008980 <_malloc_r>:
 8008980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008982:	1ccd      	adds	r5, r1, #3
 8008984:	f025 0503 	bic.w	r5, r5, #3
 8008988:	3508      	adds	r5, #8
 800898a:	2d0c      	cmp	r5, #12
 800898c:	bf38      	it	cc
 800898e:	250c      	movcc	r5, #12
 8008990:	2d00      	cmp	r5, #0
 8008992:	4606      	mov	r6, r0
 8008994:	db01      	blt.n	800899a <_malloc_r+0x1a>
 8008996:	42a9      	cmp	r1, r5
 8008998:	d903      	bls.n	80089a2 <_malloc_r+0x22>
 800899a:	230c      	movs	r3, #12
 800899c:	6033      	str	r3, [r6, #0]
 800899e:	2000      	movs	r0, #0
 80089a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089a2:	f000 f857 	bl	8008a54 <__malloc_lock>
 80089a6:	4921      	ldr	r1, [pc, #132]	; (8008a2c <_malloc_r+0xac>)
 80089a8:	680a      	ldr	r2, [r1, #0]
 80089aa:	4614      	mov	r4, r2
 80089ac:	b99c      	cbnz	r4, 80089d6 <_malloc_r+0x56>
 80089ae:	4f20      	ldr	r7, [pc, #128]	; (8008a30 <_malloc_r+0xb0>)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	b923      	cbnz	r3, 80089be <_malloc_r+0x3e>
 80089b4:	4621      	mov	r1, r4
 80089b6:	4630      	mov	r0, r6
 80089b8:	f000 f83c 	bl	8008a34 <_sbrk_r>
 80089bc:	6038      	str	r0, [r7, #0]
 80089be:	4629      	mov	r1, r5
 80089c0:	4630      	mov	r0, r6
 80089c2:	f000 f837 	bl	8008a34 <_sbrk_r>
 80089c6:	1c43      	adds	r3, r0, #1
 80089c8:	d123      	bne.n	8008a12 <_malloc_r+0x92>
 80089ca:	230c      	movs	r3, #12
 80089cc:	6033      	str	r3, [r6, #0]
 80089ce:	4630      	mov	r0, r6
 80089d0:	f000 f846 	bl	8008a60 <__malloc_unlock>
 80089d4:	e7e3      	b.n	800899e <_malloc_r+0x1e>
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	1b5b      	subs	r3, r3, r5
 80089da:	d417      	bmi.n	8008a0c <_malloc_r+0x8c>
 80089dc:	2b0b      	cmp	r3, #11
 80089de:	d903      	bls.n	80089e8 <_malloc_r+0x68>
 80089e0:	6023      	str	r3, [r4, #0]
 80089e2:	441c      	add	r4, r3
 80089e4:	6025      	str	r5, [r4, #0]
 80089e6:	e004      	b.n	80089f2 <_malloc_r+0x72>
 80089e8:	6863      	ldr	r3, [r4, #4]
 80089ea:	42a2      	cmp	r2, r4
 80089ec:	bf0c      	ite	eq
 80089ee:	600b      	streq	r3, [r1, #0]
 80089f0:	6053      	strne	r3, [r2, #4]
 80089f2:	4630      	mov	r0, r6
 80089f4:	f000 f834 	bl	8008a60 <__malloc_unlock>
 80089f8:	f104 000b 	add.w	r0, r4, #11
 80089fc:	1d23      	adds	r3, r4, #4
 80089fe:	f020 0007 	bic.w	r0, r0, #7
 8008a02:	1ac2      	subs	r2, r0, r3
 8008a04:	d0cc      	beq.n	80089a0 <_malloc_r+0x20>
 8008a06:	1a1b      	subs	r3, r3, r0
 8008a08:	50a3      	str	r3, [r4, r2]
 8008a0a:	e7c9      	b.n	80089a0 <_malloc_r+0x20>
 8008a0c:	4622      	mov	r2, r4
 8008a0e:	6864      	ldr	r4, [r4, #4]
 8008a10:	e7cc      	b.n	80089ac <_malloc_r+0x2c>
 8008a12:	1cc4      	adds	r4, r0, #3
 8008a14:	f024 0403 	bic.w	r4, r4, #3
 8008a18:	42a0      	cmp	r0, r4
 8008a1a:	d0e3      	beq.n	80089e4 <_malloc_r+0x64>
 8008a1c:	1a21      	subs	r1, r4, r0
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f000 f808 	bl	8008a34 <_sbrk_r>
 8008a24:	3001      	adds	r0, #1
 8008a26:	d1dd      	bne.n	80089e4 <_malloc_r+0x64>
 8008a28:	e7cf      	b.n	80089ca <_malloc_r+0x4a>
 8008a2a:	bf00      	nop
 8008a2c:	200000c0 	.word	0x200000c0
 8008a30:	200000c4 	.word	0x200000c4

08008a34 <_sbrk_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4d06      	ldr	r5, [pc, #24]	; (8008a50 <_sbrk_r+0x1c>)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	4608      	mov	r0, r1
 8008a3e:	602b      	str	r3, [r5, #0]
 8008a40:	f7f8 fb1c 	bl	800107c <_sbrk>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_sbrk_r+0x1a>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_sbrk_r+0x1a>
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	2000092c 	.word	0x2000092c

08008a54 <__malloc_lock>:
 8008a54:	4801      	ldr	r0, [pc, #4]	; (8008a5c <__malloc_lock+0x8>)
 8008a56:	f000 b809 	b.w	8008a6c <__retarget_lock_acquire_recursive>
 8008a5a:	bf00      	nop
 8008a5c:	20000934 	.word	0x20000934

08008a60 <__malloc_unlock>:
 8008a60:	4801      	ldr	r0, [pc, #4]	; (8008a68 <__malloc_unlock+0x8>)
 8008a62:	f000 b804 	b.w	8008a6e <__retarget_lock_release_recursive>
 8008a66:	bf00      	nop
 8008a68:	20000934 	.word	0x20000934

08008a6c <__retarget_lock_acquire_recursive>:
 8008a6c:	4770      	bx	lr

08008a6e <__retarget_lock_release_recursive>:
 8008a6e:	4770      	bx	lr

08008a70 <_init>:
 8008a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a72:	bf00      	nop
 8008a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a76:	bc08      	pop	{r3}
 8008a78:	469e      	mov	lr, r3
 8008a7a:	4770      	bx	lr

08008a7c <_fini>:
 8008a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7e:	bf00      	nop
 8008a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a82:	bc08      	pop	{r3}
 8008a84:	469e      	mov	lr, r3
 8008a86:	4770      	bx	lr
