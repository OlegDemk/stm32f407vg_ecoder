
encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008924  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008aac  08008aac  00018aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ac8  08008ac8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008ac8  08008ac8  00018ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ad0  08008ad0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ad0  08008ad0  00018ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ad4  08008ad4  00018ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008b0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000940  20000940  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f50a  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f88  00000000  00000000  0003f5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  00043558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001500  00000000  00000000  00044bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002499a  00000000  00000000  000460d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c8b6  00000000  00000000  0006aa72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3cba  00000000  00000000  00087328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015afe2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006188  00000000  00000000  0015b038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a94 	.word	0x08008a94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008a94 	.word	0x08008a94

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fe5e 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f920 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 faaa 	bl	8000a24 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f986 	bl	80007e0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f9b2 	bl	800083c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f9e0 	bl	800089c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004dc:	f007 fec8 	bl	8008270 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 80004e0:	f000 fa12 	bl	8000908 <MX_TIM1_Init>
  MX_TIM7_Init();
 80004e4:	f000 fa68 	bl	80009b8 <MX_TIM7_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);								// Timmer for count UP and DOWN
 80004e8:	2100      	movs	r1, #0
 80004ea:	4883      	ldr	r0, [pc, #524]	; (80006f8 <main+0x238>)
 80004ec:	f004 fcf5 	bl	8004eda <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COUNTER(&htim1, 0);											// Set encoder in 0
 80004f0:	4b81      	ldr	r3, [pc, #516]	; (80006f8 <main+0x238>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	625a      	str	r2, [r3, #36]	; 0x24

  while (1)
  {
	  switch (klick)
 80004f8:	4b80      	ldr	r3, [pc, #512]	; (80006fc <main+0x23c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b03      	cmp	r3, #3
 80004fe:	f200 80f7 	bhi.w	80006f0 <main+0x230>
 8000502:	a201      	add	r2, pc, #4	; (adr r2, 8000508 <main+0x48>)
 8000504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000508:	08000519 	.word	0x08000519
 800050c:	0800058f 	.word	0x0800058f
 8000510:	08000605 	.word	0x08000605
 8000514:	0800067b 	.word	0x0800067b
	  {
	  	  case 0:
	  		  HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800051e:	4878      	ldr	r0, [pc, #480]	; (8000700 <main+0x240>)
 8000520:	f001 f98c 	bl	800183c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052a:	4875      	ldr	r0, [pc, #468]	; (8000700 <main+0x240>)
 800052c:	f001 f986 	bl	800183c <HAL_GPIO_WritePin>

	  		  __HAL_TIM_SET_COUNTER(&htim1, 0);								// Start count encoder from 0
 8000530:	4b71      	ldr	r3, [pc, #452]	; (80006f8 <main+0x238>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2200      	movs	r2, #0
 8000536:	625a      	str	r2, [r3, #36]	; 0x24

	  		  while(klick == 0)
 8000538:	e024      	b.n	8000584 <main+0xc4>
	  		  {
	  			  currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 800053a:	4b6f      	ldr	r3, [pc, #444]	; (80006f8 <main+0x238>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000540:	461a      	mov	r2, r3
 8000542:	4b70      	ldr	r3, [pc, #448]	; (8000704 <main+0x244>)
 8000544:	601a      	str	r2, [r3, #0]
	  			  currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8000546:	4b6f      	ldr	r3, [pc, #444]	; (8000704 <main+0x244>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	3b01      	subs	r3, #1
 800054c:	b29b      	uxth	r3, r3
 800054e:	0fda      	lsrs	r2, r3, #31
 8000550:	4413      	add	r3, r2
 8000552:	105b      	asrs	r3, r3, #1
 8000554:	425b      	negs	r3, r3
 8000556:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800055a:	337f      	adds	r3, #127	; 0x7f
 800055c:	4a69      	ldr	r2, [pc, #420]	; (8000704 <main+0x244>)
 800055e:	6013      	str	r3, [r2, #0]

	  			  if(currCounter != prevCounter)
 8000560:	4b68      	ldr	r3, [pc, #416]	; (8000704 <main+0x244>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b68      	ldr	r3, [pc, #416]	; (8000708 <main+0x248>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	429a      	cmp	r2, r3
 800056a:	d00b      	beq.n	8000584 <main+0xc4>
	  			  {
	  				  if(currCounter > 100)									// Encoder count from 0 to 100
 800056c:	4b65      	ldr	r3, [pc, #404]	; (8000704 <main+0x244>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b64      	cmp	r3, #100	; 0x64
 8000572:	dd03      	ble.n	800057c <main+0xbc>
	  				  {
	  					  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000574:	4b60      	ldr	r3, [pc, #384]	; (80006f8 <main+0x238>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2200      	movs	r2, #0
 800057a:	625a      	str	r2, [r3, #36]	; 0x24
	  				  }
	  				  prevCounter = currCounter;
 800057c:	4b61      	ldr	r3, [pc, #388]	; (8000704 <main+0x244>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a61      	ldr	r2, [pc, #388]	; (8000708 <main+0x248>)
 8000582:	6013      	str	r3, [r2, #0]
	  		  while(klick == 0)
 8000584:	4b5d      	ldr	r3, [pc, #372]	; (80006fc <main+0x23c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d0d6      	beq.n	800053a <main+0x7a>
	  			  }
	  		  }

	  		  break;
 800058c:	e0b0      	b.n	80006f0 <main+0x230>

	  	  case 1:
	  		  HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000594:	485a      	ldr	r0, [pc, #360]	; (8000700 <main+0x240>)
 8000596:	f001 f951 	bl	800183c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a0:	4857      	ldr	r0, [pc, #348]	; (8000700 <main+0x240>)
 80005a2:	f001 f94b 	bl	800183c <HAL_GPIO_WritePin>

	  		  __HAL_TIM_SET_COUNTER(&htim1, 0);								// Start count encoder from 0
 80005a6:	4b54      	ldr	r3, [pc, #336]	; (80006f8 <main+0x238>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2200      	movs	r2, #0
 80005ac:	625a      	str	r2, [r3, #36]	; 0x24

	  		 while(klick == 1)
 80005ae:	e024      	b.n	80005fa <main+0x13a>
	  		 {
	  			 currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 80005b0:	4b51      	ldr	r3, [pc, #324]	; (80006f8 <main+0x238>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b52      	ldr	r3, [pc, #328]	; (8000704 <main+0x244>)
 80005ba:	601a      	str	r2, [r3, #0]
	  			 currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80005bc:	4b51      	ldr	r3, [pc, #324]	; (8000704 <main+0x244>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	3b01      	subs	r3, #1
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	0fda      	lsrs	r2, r3, #31
 80005c6:	4413      	add	r3, r2
 80005c8:	105b      	asrs	r3, r3, #1
 80005ca:	425b      	negs	r3, r3
 80005cc:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80005d0:	337f      	adds	r3, #127	; 0x7f
 80005d2:	4a4c      	ldr	r2, [pc, #304]	; (8000704 <main+0x244>)
 80005d4:	6013      	str	r3, [r2, #0]

	  			 if(currCounter != prevCounter)
 80005d6:	4b4b      	ldr	r3, [pc, #300]	; (8000704 <main+0x244>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	4b4b      	ldr	r3, [pc, #300]	; (8000708 <main+0x248>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d00b      	beq.n	80005fa <main+0x13a>
	  			 {
	  				 if(currCounter > 10)
 80005e2:	4b48      	ldr	r3, [pc, #288]	; (8000704 <main+0x244>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b0a      	cmp	r3, #10
 80005e8:	dd03      	ble.n	80005f2 <main+0x132>
	  				 {
	  					 __HAL_TIM_SET_COUNTER(&htim1, 0);					// Encoder count from 0 to 10
 80005ea:	4b43      	ldr	r3, [pc, #268]	; (80006f8 <main+0x238>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2200      	movs	r2, #0
 80005f0:	625a      	str	r2, [r3, #36]	; 0x24
	  				 }

	  				 prevCounter = currCounter;
 80005f2:	4b44      	ldr	r3, [pc, #272]	; (8000704 <main+0x244>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a44      	ldr	r2, [pc, #272]	; (8000708 <main+0x248>)
 80005f8:	6013      	str	r3, [r2, #0]
	  		 while(klick == 1)
 80005fa:	4b40      	ldr	r3, [pc, #256]	; (80006fc <main+0x23c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d0d6      	beq.n	80005b0 <main+0xf0>

	  			 }
	  		 }

	  		  break;
 8000602:	e075      	b.n	80006f0 <main+0x230>

	  	  case 2:
	  		 HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060a:	483d      	ldr	r0, [pc, #244]	; (8000700 <main+0x240>)
 800060c:	f001 f916 	bl	800183c <HAL_GPIO_WritePin>
	  		 HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000616:	483a      	ldr	r0, [pc, #232]	; (8000700 <main+0x240>)
 8000618:	f001 f910 	bl	800183c <HAL_GPIO_WritePin>

	  		 __HAL_TIM_SET_COUNTER(&htim1, 1);								// Start count encoder from 1
 800061c:	4b36      	ldr	r3, [pc, #216]	; (80006f8 <main+0x238>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2201      	movs	r2, #1
 8000622:	625a      	str	r2, [r3, #36]	; 0x24

	  		 while(klick == 2)
 8000624:	e024      	b.n	8000670 <main+0x1b0>
	  		 {
	  			 currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8000626:	4b34      	ldr	r3, [pc, #208]	; (80006f8 <main+0x238>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062c:	461a      	mov	r2, r3
 800062e:	4b35      	ldr	r3, [pc, #212]	; (8000704 <main+0x244>)
 8000630:	601a      	str	r2, [r3, #0]
	  			 currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8000632:	4b34      	ldr	r3, [pc, #208]	; (8000704 <main+0x244>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3b01      	subs	r3, #1
 8000638:	b29b      	uxth	r3, r3
 800063a:	0fda      	lsrs	r2, r3, #31
 800063c:	4413      	add	r3, r2
 800063e:	105b      	asrs	r3, r3, #1
 8000640:	425b      	negs	r3, r3
 8000642:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8000646:	337f      	adds	r3, #127	; 0x7f
 8000648:	4a2e      	ldr	r2, [pc, #184]	; (8000704 <main+0x244>)
 800064a:	6013      	str	r3, [r2, #0]

	  			 if(currCounter != prevCounter)
 800064c:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <main+0x244>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <main+0x248>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	429a      	cmp	r2, r3
 8000656:	d00b      	beq.n	8000670 <main+0x1b0>
	  			 {
	  				 if(currCounter > 31)
 8000658:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <main+0x244>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b1f      	cmp	r3, #31
 800065e:	dd03      	ble.n	8000668 <main+0x1a8>
	  				 {
	  					 __HAL_TIM_SET_COUNTER(&htim1, 0);					// Encoder count from 1 to 32
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <main+0x238>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2200      	movs	r2, #0
 8000666:	625a      	str	r2, [r3, #36]	; 0x24
	  				 }

	  				 prevCounter = currCounter;
 8000668:	4b26      	ldr	r3, [pc, #152]	; (8000704 <main+0x244>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a26      	ldr	r2, [pc, #152]	; (8000708 <main+0x248>)
 800066e:	6013      	str	r3, [r2, #0]
	  		 while(klick == 2)
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <main+0x23c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b02      	cmp	r3, #2
 8000676:	d0d6      	beq.n	8000626 <main+0x166>

	  			 }
	  		 }
	  		 break;
 8000678:	e03a      	b.n	80006f0 <main+0x230>

	  	  case 3:
	  		  HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000680:	481f      	ldr	r0, [pc, #124]	; (8000700 <main+0x240>)
 8000682:	f001 f8db 	bl	800183c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068c:	481c      	ldr	r0, [pc, #112]	; (8000700 <main+0x240>)
 800068e:	f001 f8d5 	bl	800183c <HAL_GPIO_WritePin>

	  		  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000692:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <main+0x238>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24

	  		  while(klick == 3)
 800069a:	e024      	b.n	80006e6 <main+0x226>
	  		  {
	  			  currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <main+0x238>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b17      	ldr	r3, [pc, #92]	; (8000704 <main+0x244>)
 80006a6:	601a      	str	r2, [r3, #0]
	  			  currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80006a8:	4b16      	ldr	r3, [pc, #88]	; (8000704 <main+0x244>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	0fda      	lsrs	r2, r3, #31
 80006b2:	4413      	add	r3, r2
 80006b4:	105b      	asrs	r3, r3, #1
 80006b6:	425b      	negs	r3, r3
 80006b8:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80006bc:	337f      	adds	r3, #127	; 0x7f
 80006be:	4a11      	ldr	r2, [pc, #68]	; (8000704 <main+0x244>)
 80006c0:	6013      	str	r3, [r2, #0]

	  			  if(currCounter != prevCounter)
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <main+0x244>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <main+0x248>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d00b      	beq.n	80006e6 <main+0x226>
	  			  {
	  				  if(currCounter > 20)
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <main+0x244>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b14      	cmp	r3, #20
 80006d4:	dd03      	ble.n	80006de <main+0x21e>
	  				  {
	  					  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <main+0x238>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
	  				  }

	  				  prevCounter = currCounter;
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <main+0x244>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a09      	ldr	r2, [pc, #36]	; (8000708 <main+0x248>)
 80006e4:	6013      	str	r3, [r2, #0]
	  		  while(klick == 3)
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <main+0x23c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d0d6      	beq.n	800069c <main+0x1dc>

	  			  }
	  		  }
	  		  break;
 80006ee:	bf00      	nop
	  }

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80006f0:	f007 fde4 	bl	80082bc <MX_USB_HOST_Process>
	  switch (klick)
 80006f4:	e700      	b.n	80004f8 <main+0x38>
 80006f6:	bf00      	nop
 80006f8:	20000120 	.word	0x20000120
 80006fc:	200000b4 	.word	0x200000b4
 8000700:	40020c00 	.word	0x40020c00
 8000704:	200000ac 	.word	0x200000ac
 8000708:	200000b0 	.word	0x200000b0

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	; 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	2230      	movs	r2, #48	; 0x30
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f008 f8ea 	bl	80088f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <SystemClock_Config+0xcc>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	4a27      	ldr	r2, [pc, #156]	; (80007d8 <SystemClock_Config+0xcc>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	; 0x40
 8000740:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <SystemClock_Config+0xcc>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	4b22      	ldr	r3, [pc, #136]	; (80007dc <SystemClock_Config+0xd0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a21      	ldr	r2, [pc, #132]	; (80007dc <SystemClock_Config+0xd0>)
 8000756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <SystemClock_Config+0xd0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000768:	2301      	movs	r3, #1
 800076a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800076c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800077c:	2308      	movs	r3, #8
 800077e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000780:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000784:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800078a:	2307      	movs	r3, #7
 800078c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	4618      	mov	r0, r3
 8000794:	f003 fbe4 	bl	8003f60 <HAL_RCC_OscConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800079e:	f000 fa55 	bl	8000c4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
 80007a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	2302      	movs	r3, #2
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2105      	movs	r1, #5
 80007c0:	4618      	mov	r0, r3
 80007c2:	f003 fe45 	bl	8004450 <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007cc:	f000 fa3e 	bl	8000c4c <Error_Handler>
  }
}
 80007d0:	bf00      	nop
 80007d2:	3750      	adds	r7, #80	; 0x50
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_I2C1_Init+0x50>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	; (8000834 <MX_I2C1_Init+0x54>)
 80007e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_I2C1_Init+0x50>)
 80007ec:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_I2C1_Init+0x58>)
 80007ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_I2C1_Init+0x50>)
 80007fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000802:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_I2C1_Init+0x50>)
 800081e:	f002 fdbb 	bl	8003398 <HAL_I2C_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000828:	f000 fa10 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200000cc 	.word	0x200000cc
 8000834:	40005400 	.word	0x40005400
 8000838:	000186a0 	.word	0x000186a0

0800083c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_I2S3_Init+0x54>)
 8000842:	4a14      	ldr	r2, [pc, #80]	; (8000894 <MX_I2S3_Init+0x58>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_I2S3_Init+0x54>)
 8000848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800084c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <MX_I2S3_Init+0x54>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_I2S3_Init+0x54>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <MX_I2S3_Init+0x54>)
 800085c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000860:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_I2S3_Init+0x54>)
 8000864:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <MX_I2S3_Init+0x5c>)
 8000866:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_I2S3_Init+0x54>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_I2S3_Init+0x54>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_I2S3_Init+0x54>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_I2S3_Init+0x54>)
 800087c:	f002 fed0 	bl	8003620 <HAL_I2S_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000886:	f000 f9e1 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000208 	.word	0x20000208
 8000894:	40003c00 	.word	0x40003c00
 8000898:	00017700 	.word	0x00017700

0800089c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_SPI1_Init+0x64>)
 80008a2:	4a18      	ldr	r2, [pc, #96]	; (8000904 <MX_SPI1_Init+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_SPI1_Init+0x64>)
 80008a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_SPI1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_SPI1_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_SPI1_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_SPI1_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_SPI1_Init+0x64>)
 80008c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_SPI1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_SPI1_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <MX_SPI1_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_SPI1_Init+0x64>)
 80008e8:	220a      	movs	r2, #10
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_SPI1_Init+0x64>)
 80008ee:	f004 f8d7 	bl	8004aa0 <HAL_SPI_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008f8:	f000 f9a8 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000168 	.word	0x20000168
 8000904:	40013000 	.word	0x40013000

08000908 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	; 0x30
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	2224      	movs	r2, #36	; 0x24
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f007 ffec 	bl	80088f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <MX_TIM1_Init+0xa8>)
 8000926:	4a23      	ldr	r2, [pc, #140]	; (80009b4 <MX_TIM1_Init+0xac>)
 8000928:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <MX_TIM1_Init+0xa8>)
 800092c:	2200      	movs	r2, #0
 800092e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_TIM1_Init+0xa8>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000936:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <MX_TIM1_Init+0xa8>)
 8000938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800093c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_TIM1_Init+0xa8>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_TIM1_Init+0xa8>)
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_TIM1_Init+0xa8>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000950:	2301      	movs	r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000954:	2300      	movs	r3, #0
 8000956:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000958:	2301      	movs	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000968:	2301      	movs	r3, #1
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4619      	mov	r1, r3
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <MX_TIM1_Init+0xa8>)
 800097c:	f004 fa07 	bl	8004d8e <HAL_TIM_Encoder_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000986:	f000 f961 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	4619      	mov	r1, r3
 8000996:	4806      	ldr	r0, [pc, #24]	; (80009b0 <MX_TIM1_Init+0xa8>)
 8000998:	f004 fd2e 	bl	80053f8 <HAL_TIMEx_MasterConfigSynchronization>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80009a2:	f000 f953 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	3730      	adds	r7, #48	; 0x30
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000120 	.word	0x20000120
 80009b4:	40010000 	.word	0x40010000

080009b8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009be:	463b      	mov	r3, r7
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_TIM7_Init+0x64>)
 80009c8:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <MX_TIM7_Init+0x68>)
 80009ca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_TIM7_Init+0x64>)
 80009ce:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80009d2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_TIM7_Init+0x64>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_TIM7_Init+0x64>)
 80009dc:	2263      	movs	r2, #99	; 0x63
 80009de:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_TIM7_Init+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80009e6:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_TIM7_Init+0x64>)
 80009e8:	f004 f8e3 	bl	8004bb2 <HAL_TIM_Base_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80009f2:	f000 f92b 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80009fe:	463b      	mov	r3, r7
 8000a00:	4619      	mov	r1, r3
 8000a02:	4806      	ldr	r0, [pc, #24]	; (8000a1c <MX_TIM7_Init+0x64>)
 8000a04:	f004 fcf8 	bl	80053f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000a0e:	f000 f91d 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200001c0 	.word	0x200001c0
 8000a20:	40001400 	.word	0x40001400

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
 8000a3e:	4b7d      	ldr	r3, [pc, #500]	; (8000c34 <MX_GPIO_Init+0x210>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a7c      	ldr	r2, [pc, #496]	; (8000c34 <MX_GPIO_Init+0x210>)
 8000a44:	f043 0310 	orr.w	r3, r3, #16
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b7a      	ldr	r3, [pc, #488]	; (8000c34 <MX_GPIO_Init+0x210>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0310 	and.w	r3, r3, #16
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	4b76      	ldr	r3, [pc, #472]	; (8000c34 <MX_GPIO_Init+0x210>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a75      	ldr	r2, [pc, #468]	; (8000c34 <MX_GPIO_Init+0x210>)
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b73      	ldr	r3, [pc, #460]	; (8000c34 <MX_GPIO_Init+0x210>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b6f      	ldr	r3, [pc, #444]	; (8000c34 <MX_GPIO_Init+0x210>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a6e      	ldr	r2, [pc, #440]	; (8000c34 <MX_GPIO_Init+0x210>)
 8000a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b6c      	ldr	r3, [pc, #432]	; (8000c34 <MX_GPIO_Init+0x210>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b68      	ldr	r3, [pc, #416]	; (8000c34 <MX_GPIO_Init+0x210>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a67      	ldr	r2, [pc, #412]	; (8000c34 <MX_GPIO_Init+0x210>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b65      	ldr	r3, [pc, #404]	; (8000c34 <MX_GPIO_Init+0x210>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	4b61      	ldr	r3, [pc, #388]	; (8000c34 <MX_GPIO_Init+0x210>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a60      	ldr	r2, [pc, #384]	; (8000c34 <MX_GPIO_Init+0x210>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b5e      	ldr	r3, [pc, #376]	; (8000c34 <MX_GPIO_Init+0x210>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b5a      	ldr	r3, [pc, #360]	; (8000c34 <MX_GPIO_Init+0x210>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a59      	ldr	r2, [pc, #356]	; (8000c34 <MX_GPIO_Init+0x210>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b57      	ldr	r3, [pc, #348]	; (8000c34 <MX_GPIO_Init+0x210>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2108      	movs	r1, #8
 8000ae6:	4854      	ldr	r0, [pc, #336]	; (8000c38 <MX_GPIO_Init+0x214>)
 8000ae8:	f000 fea8 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2101      	movs	r1, #1
 8000af0:	4852      	ldr	r0, [pc, #328]	; (8000c3c <MX_GPIO_Init+0x218>)
 8000af2:	f000 fea3 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000af6:	2200      	movs	r2, #0
 8000af8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000afc:	4850      	ldr	r0, [pc, #320]	; (8000c40 <MX_GPIO_Init+0x21c>)
 8000afe:	f000 fe9d 	bl	800183c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b02:	2308      	movs	r3, #8
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4847      	ldr	r0, [pc, #284]	; (8000c38 <MX_GPIO_Init+0x214>)
 8000b1a:	f000 fcdb 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4841      	ldr	r0, [pc, #260]	; (8000c3c <MX_GPIO_Init+0x218>)
 8000b36:	f000 fccd 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b3a:	2308      	movs	r3, #8
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4839      	ldr	r0, [pc, #228]	; (8000c3c <MX_GPIO_Init+0x218>)
 8000b56:	f000 fcbd 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b5e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4835      	ldr	r0, [pc, #212]	; (8000c44 <MX_GPIO_Init+0x220>)
 8000b70:	f000 fcb0 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b74:	2304      	movs	r3, #4
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	4830      	ldr	r0, [pc, #192]	; (8000c48 <MX_GPIO_Init+0x224>)
 8000b88:	f000 fca4 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 8000b8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b92:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4825      	ldr	r0, [pc, #148]	; (8000c38 <MX_GPIO_Init+0x214>)
 8000ba4:	f000 fc96 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bba:	2305      	movs	r3, #5
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4820      	ldr	r0, [pc, #128]	; (8000c48 <MX_GPIO_Init+0x224>)
 8000bc6:	f000 fc85 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bca:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000bce:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	4817      	ldr	r0, [pc, #92]	; (8000c40 <MX_GPIO_Init+0x21c>)
 8000be4:	f000 fc76 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000be8:	2320      	movs	r3, #32
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4811      	ldr	r0, [pc, #68]	; (8000c40 <MX_GPIO_Init+0x21c>)
 8000bfc:	f000 fc6a 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c04:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <MX_GPIO_Init+0x214>)
 8000c16:	f000 fc5d 	bl	80014d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2028      	movs	r0, #40	; 0x28
 8000c20:	f000 fc21 	bl	8001466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c24:	2028      	movs	r0, #40	; 0x28
 8000c26:	f000 fc3a 	bl	800149e <HAL_NVIC_EnableIRQ>

}
 8000c2a:	bf00      	nop
 8000c2c:	3730      	adds	r7, #48	; 0x30
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40020800 	.word	0x40020800
 8000c40:	40020c00 	.word	0x40020c00
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020400 	.word	0x40020400

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>
	...

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c96:	2007      	movs	r0, #7
 8000c98:	f000 fbda 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <HAL_I2C_MspInit+0x84>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d12c      	bne.n	8000d24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <HAL_I2C_MspInit+0x88>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <HAL_I2C_MspInit+0x88>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_I2C_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ce6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cec:	2312      	movs	r3, #18
 8000cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <HAL_I2C_MspInit+0x8c>)
 8000d04:	f000 fbe6 	bl	80014d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_I2C_MspInit+0x88>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <HAL_I2C_MspInit+0x88>)
 8000d12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d16:	6413      	str	r3, [r2, #64]	; 0x40
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_I2C_MspInit+0x88>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	; 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40005400 	.word	0x40005400
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020400 	.word	0x40020400

08000d38 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08e      	sub	sp, #56	; 0x38
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a31      	ldr	r2, [pc, #196]	; (8000e28 <HAL_I2S_MspInit+0xf0>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d15a      	bne.n	8000e1e <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d6c:	23c0      	movs	r3, #192	; 0xc0
 8000d6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 fd51 	bl	8004820 <HAL_RCCEx_PeriphCLKConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d84:	f7ff ff62 	bl	8000c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <HAL_I2S_MspInit+0xf4>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	4a26      	ldr	r2, [pc, #152]	; (8000e2c <HAL_I2S_MspInit+0xf4>)
 8000d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d96:	6413      	str	r3, [r2, #64]	; 0x40
 8000d98:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <HAL_I2S_MspInit+0xf4>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <HAL_I2S_MspInit+0xf4>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a1f      	ldr	r2, [pc, #124]	; (8000e2c <HAL_I2S_MspInit+0xf4>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_I2S_MspInit+0xf4>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <HAL_I2S_MspInit+0xf4>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <HAL_I2S_MspInit+0xf4>)
 8000dca:	f043 0304 	orr.w	r3, r3, #4
 8000dce:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_I2S_MspInit+0xf4>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ddc:	2310      	movs	r3, #16
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dec:	2306      	movs	r3, #6
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df4:	4619      	mov	r1, r3
 8000df6:	480e      	ldr	r0, [pc, #56]	; (8000e30 <HAL_I2S_MspInit+0xf8>)
 8000df8:	f000 fb6c 	bl	80014d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dfc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e0e:	2306      	movs	r3, #6
 8000e10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e16:	4619      	mov	r1, r3
 8000e18:	4806      	ldr	r0, [pc, #24]	; (8000e34 <HAL_I2S_MspInit+0xfc>)
 8000e1a:	f000 fb5b 	bl	80014d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3738      	adds	r7, #56	; 0x38
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40003c00 	.word	0x40003c00
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40020800 	.word	0x40020800

08000e38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <HAL_SPI_MspInit+0x84>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d12b      	bne.n	8000eb2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_SPI_MspInit+0x88>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <HAL_SPI_MspInit+0x88>)
 8000e64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_SPI_MspInit+0x88>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_SPI_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <HAL_SPI_MspInit+0x88>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_SPI_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e92:	23e0      	movs	r3, #224	; 0xe0
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_SPI_MspInit+0x8c>)
 8000eae:	f000 fb11 	bl	80014d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40013000 	.word	0x40013000
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000

08000ec8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x84>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d12c      	bne.n	8000f44 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	4a17      	ldr	r2, [pc, #92]	; (8000f50 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HAL_TIM_Encoder_MspInit+0x88>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a10      	ldr	r2, [pc, #64]	; (8000f50 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f10:	f043 0310 	orr.w	r3, r3, #16
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_TIM_Encoder_MspInit+0x88>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000f22:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000f40:	f000 fac8 	bl	80014d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	; 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <HAL_TIM_Base_MspInit+0x48>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d115      	bne.n	8000f96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_TIM_Base_MspInit+0x4c>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <HAL_TIM_Base_MspInit+0x4c>)
 8000f74:	f043 0320 	orr.w	r3, r3, #32
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_TIM_Base_MspInit+0x4c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f003 0320 	and.w	r3, r3, #32
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2037      	movs	r0, #55	; 0x37
 8000f8c:	f000 fa6b 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f90:	2037      	movs	r0, #55	; 0x37
 8000f92:	f000 fa84 	bl	800149e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40001400 	.word	0x40001400
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <NMI_Handler+0x4>

08000fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <HardFault_Handler+0x4>

08000fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <MemManage_Handler+0x4>

08000fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <BusFault_Handler+0x4>

08000fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <UsageFault_Handler+0x4>

08000fc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff4:	f000 f918 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_TIM_Base_Start_IT(&htim7);								//	Turn on Timer with 100Hz period = 0,01 sec
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <EXTI15_10_IRQHandler+0x18>)
 8001002:	f003 fe25 	bl	8004c50 <HAL_TIM_Base_Start_IT>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC15_OSC32_OUT_Pin);
 8001006:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800100a:	f000 fc31 	bl	8001870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200001c0 	.word	0x200001c0

08001018 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	//HAL_GPIO_TogglePin(GPIOD, LD5_Pin);

	if(tim_val == 4)											// Waiting 3 period of timer7: (0,01 *3 = 0,03 second)
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <TIM7_IRQHandler+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b04      	cmp	r3, #4
 8001022:	d121      	bne.n	8001068 <TIM7_IRQHandler+0x50>
	{
		tim_val = 0;
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <TIM7_IRQHandler+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)	// If button steel pressed
 800102a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800102e:	4814      	ldr	r0, [pc, #80]	; (8001080 <TIM7_IRQHandler+0x68>)
 8001030:	f000 fbec 	bl	800180c <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d112      	bne.n	8001060 <TIM7_IRQHandler+0x48>
		{
			klick++;
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <TIM7_IRQHandler+0x6c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	4a10      	ldr	r2, [pc, #64]	; (8001084 <TIM7_IRQHandler+0x6c>)
 8001042:	6013      	str	r3, [r2, #0]
			if(klick >= 4)										// it mean we have only 4 LEDs
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <TIM7_IRQHandler+0x6c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b03      	cmp	r3, #3
 800104a:	dd06      	ble.n	800105a <TIM7_IRQHandler+0x42>
			{
				klick = 0;
 800104c:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <TIM7_IRQHandler+0x6c>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim7);					// Stop timer (becouse counter can turn on only encoder key)
 8001052:	480d      	ldr	r0, [pc, #52]	; (8001088 <TIM7_IRQHandler+0x70>)
 8001054:	f003 fe6c 	bl	8004d30 <HAL_TIM_Base_Stop_IT>
 8001058:	e002      	b.n	8001060 <TIM7_IRQHandler+0x48>
			}
			else
			{
				HAL_TIM_Base_Stop_IT(&htim7);
 800105a:	480b      	ldr	r0, [pc, #44]	; (8001088 <TIM7_IRQHandler+0x70>)
 800105c:	f003 fe68 	bl	8004d30 <HAL_TIM_Base_Stop_IT>
			}
		}
		HAL_TIM_Base_Stop_IT(&htim7);
 8001060:	4809      	ldr	r0, [pc, #36]	; (8001088 <TIM7_IRQHandler+0x70>)
 8001062:	f003 fe65 	bl	8004d30 <HAL_TIM_Base_Stop_IT>
 8001066:	e004      	b.n	8001072 <TIM7_IRQHandler+0x5a>
	}
	else
	{
		tim_val++;
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <TIM7_IRQHandler+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	4a03      	ldr	r2, [pc, #12]	; (800107c <TIM7_IRQHandler+0x64>)
 8001070:	6013      	str	r3, [r2, #0]
//		}
//	}
//	HAL_TIM_Base_Stop_IT(&htim7);

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <TIM7_IRQHandler+0x70>)
 8001074:	f003 ffbf 	bl	8004ff6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200000b8 	.word	0x200000b8
 8001080:	40021000 	.word	0x40021000
 8001084:	200000b4 	.word	0x200000b4
 8001088:	200001c0 	.word	0x200001c0

0800108c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */


  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <OTG_FS_IRQHandler+0x10>)
 8001092:	f000 fe7b 	bl	8001d8c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000062c 	.word	0x2000062c

080010a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a8:	4a14      	ldr	r2, [pc, #80]	; (80010fc <_sbrk+0x5c>)
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <_sbrk+0x60>)
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <_sbrk+0x64>)
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <_sbrk+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d207      	bcs.n	80010e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d0:	f007 fbd6 	bl	8008880 <__errno>
 80010d4:	4603      	mov	r3, r0
 80010d6:	220c      	movs	r2, #12
 80010d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010de:	e009      	b.n	80010f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <_sbrk+0x64>)
 80010f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20020000 	.word	0x20020000
 8001100:	00000400 	.word	0x00000400
 8001104:	200000bc 	.word	0x200000bc
 8001108:	20000940 	.word	0x20000940

0800110c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <SystemInit+0x20>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <SystemInit+0x20>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001168 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001136:	490e      	ldr	r1, [pc, #56]	; (8001170 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800114c:	4c0b      	ldr	r4, [pc, #44]	; (800117c <LoopFillZerobss+0x26>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800115a:	f7ff ffd7 	bl	800110c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115e:	f007 fb95 	bl	800888c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001162:	f7ff f9ad 	bl	80004c0 <main>
  bx  lr    
 8001166:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001174:	08008ad8 	.word	0x08008ad8
  ldr r2, =_sbss
 8001178:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800117c:	20000940 	.word	0x20000940

08001180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC_IRQHandler>
	...

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <HAL_Init+0x40>)
 800118e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_Init+0x40>)
 800119a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_Init+0x40>)
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f94f 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 f808 	bl	80011c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b8:	f7ff fd4e 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023c00 	.word	0x40023c00

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x54>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_InitTick+0x58>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f967 	bl	80014ba <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00e      	b.n	8001214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d80a      	bhi.n	8001212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001204:	f000 f92f 	bl	8001466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <HAL_InitTick+0x5c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000000 	.word	0x20000000
 8001220:	20000008 	.word	0x20000008
 8001224:	20000004 	.word	0x20000004

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008
 800124c:	20000250 	.word	0x20000250

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000250 	.word	0x20000250

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff ffee 	bl	8001250 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_Delay+0x44>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800128e:	bf00      	nop
 8001290:	f7ff ffde 	bl	8001250 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000008 	.word	0x20000008

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db0b      	blt.n	800133e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f003 021f 	and.w	r2, r3, #31
 800132c:	4907      	ldr	r1, [pc, #28]	; (800134c <__NVIC_EnableIRQ+0x38>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2001      	movs	r0, #1
 8001336:	fa00 f202 	lsl.w	r2, r0, r2
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800141c:	d301      	bcc.n	8001422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141e:	2301      	movs	r3, #1
 8001420:	e00f      	b.n	8001442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <SysTick_Config+0x40>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142a:	210f      	movs	r1, #15
 800142c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001430:	f7ff ff8e 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <SysTick_Config+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <SysTick_Config+0x40>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff29 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001478:	f7ff ff3e 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff ff8e 	bl	80013a4 <NVIC_EncodePriority>
 8001488:	4602      	mov	r2, r0
 800148a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff5d 	bl	8001350 <__NVIC_SetPriority>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff31 	bl	8001314 <__NVIC_EnableIRQ>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffa2 	bl	800140c <SysTick_Config>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	e16b      	b.n	80017c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014f0:	2201      	movs	r2, #1
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	429a      	cmp	r2, r3
 800150a:	f040 815a 	bne.w	80017c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	2b01      	cmp	r3, #1
 8001518:	d005      	beq.n	8001526 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001522:	2b02      	cmp	r3, #2
 8001524:	d130      	bne.n	8001588 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800155c:	2201      	movs	r2, #1
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	f003 0201 	and.w	r2, r3, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b03      	cmp	r3, #3
 8001592:	d017      	beq.n	80015c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d123      	bne.n	8001618 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	08da      	lsrs	r2, r3, #3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3208      	adds	r2, #8
 80015d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	220f      	movs	r2, #15
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	08da      	lsrs	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3208      	adds	r2, #8
 8001612:	69b9      	ldr	r1, [r7, #24]
 8001614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0203 	and.w	r2, r3, #3
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80b4 	beq.w	80017c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b60      	ldr	r3, [pc, #384]	; (80017e0 <HAL_GPIO_Init+0x30c>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	4a5f      	ldr	r2, [pc, #380]	; (80017e0 <HAL_GPIO_Init+0x30c>)
 8001664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
 800166a:	4b5d      	ldr	r3, [pc, #372]	; (80017e0 <HAL_GPIO_Init+0x30c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001676:	4a5b      	ldr	r2, [pc, #364]	; (80017e4 <HAL_GPIO_Init+0x310>)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3302      	adds	r3, #2
 800167e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	220f      	movs	r2, #15
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a52      	ldr	r2, [pc, #328]	; (80017e8 <HAL_GPIO_Init+0x314>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d02b      	beq.n	80016fa <HAL_GPIO_Init+0x226>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a51      	ldr	r2, [pc, #324]	; (80017ec <HAL_GPIO_Init+0x318>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d025      	beq.n	80016f6 <HAL_GPIO_Init+0x222>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a50      	ldr	r2, [pc, #320]	; (80017f0 <HAL_GPIO_Init+0x31c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d01f      	beq.n	80016f2 <HAL_GPIO_Init+0x21e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4f      	ldr	r2, [pc, #316]	; (80017f4 <HAL_GPIO_Init+0x320>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d019      	beq.n	80016ee <HAL_GPIO_Init+0x21a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4e      	ldr	r2, [pc, #312]	; (80017f8 <HAL_GPIO_Init+0x324>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d013      	beq.n	80016ea <HAL_GPIO_Init+0x216>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4d      	ldr	r2, [pc, #308]	; (80017fc <HAL_GPIO_Init+0x328>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00d      	beq.n	80016e6 <HAL_GPIO_Init+0x212>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4c      	ldr	r2, [pc, #304]	; (8001800 <HAL_GPIO_Init+0x32c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d007      	beq.n	80016e2 <HAL_GPIO_Init+0x20e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4b      	ldr	r2, [pc, #300]	; (8001804 <HAL_GPIO_Init+0x330>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d101      	bne.n	80016de <HAL_GPIO_Init+0x20a>
 80016da:	2307      	movs	r3, #7
 80016dc:	e00e      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016de:	2308      	movs	r3, #8
 80016e0:	e00c      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016e2:	2306      	movs	r3, #6
 80016e4:	e00a      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016e6:	2305      	movs	r3, #5
 80016e8:	e008      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016ea:	2304      	movs	r3, #4
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e004      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e002      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016fa:	2300      	movs	r3, #0
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	f002 0203 	and.w	r2, r2, #3
 8001702:	0092      	lsls	r2, r2, #2
 8001704:	4093      	lsls	r3, r2
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800170c:	4935      	ldr	r1, [pc, #212]	; (80017e4 <HAL_GPIO_Init+0x310>)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3302      	adds	r3, #2
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800171a:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <HAL_GPIO_Init+0x334>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800173e:	4a32      	ldr	r2, [pc, #200]	; (8001808 <HAL_GPIO_Init+0x334>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001744:	4b30      	ldr	r3, [pc, #192]	; (8001808 <HAL_GPIO_Init+0x334>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001768:	4a27      	ldr	r2, [pc, #156]	; (8001808 <HAL_GPIO_Init+0x334>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_GPIO_Init+0x334>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001792:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <HAL_GPIO_Init+0x334>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <HAL_GPIO_Init+0x334>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017bc:	4a12      	ldr	r2, [pc, #72]	; (8001808 <HAL_GPIO_Init+0x334>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3301      	adds	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b0f      	cmp	r3, #15
 80017cc:	f67f ae90 	bls.w	80014f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40013800 	.word	0x40013800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40020400 	.word	0x40020400
 80017f0:	40020800 	.word	0x40020800
 80017f4:	40020c00 	.word	0x40020c00
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40021400 	.word	0x40021400
 8001800:	40021800 	.word	0x40021800
 8001804:	40021c00 	.word	0x40021c00
 8001808:	40013c00 	.word	0x40013c00

0800180c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691a      	ldr	r2, [r3, #16]
 800181c:	887b      	ldrh	r3, [r7, #2]
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	e001      	b.n	800182e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]
 8001848:	4613      	mov	r3, r2
 800184a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001858:	e003      	b.n	8001862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	041a      	lsls	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	619a      	str	r2, [r3, #24]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	4013      	ands	r3, r2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f806 	bl	80018a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40013c00 	.word	0x40013c00

080018a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b8:	b08f      	sub	sp, #60	; 0x3c
 80018ba:	af0a      	add	r7, sp, #40	; 0x28
 80018bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e054      	b.n	8001972 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f006 fd22 	bl	800832c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2203      	movs	r2, #3
 80018ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f003 fe78 	bl	80055fc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	687e      	ldr	r6, [r7, #4]
 8001914:	466d      	mov	r5, sp
 8001916:	f106 0410 	add.w	r4, r6, #16
 800191a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800191e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001922:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001926:	e885 0003 	stmia.w	r5, {r0, r1}
 800192a:	1d33      	adds	r3, r6, #4
 800192c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800192e:	6838      	ldr	r0, [r7, #0]
 8001930:	f003 fdf2 	bl	8005518 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	4618      	mov	r0, r3
 800193c:	f003 fe6f 	bl	800561e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	687e      	ldr	r6, [r7, #4]
 8001948:	466d      	mov	r5, sp
 800194a:	f106 0410 	add.w	r4, r6, #16
 800194e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001956:	e894 0003 	ldmia.w	r4, {r0, r1}
 800195a:	e885 0003 	stmia.w	r5, {r0, r1}
 800195e:	1d33      	adds	r3, r6, #4
 8001960:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001962:	6838      	ldr	r0, [r7, #0]
 8001964:	f003 ffd6 	bl	8005914 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800197a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800197a:	b590      	push	{r4, r7, lr}
 800197c:	b089      	sub	sp, #36	; 0x24
 800197e:	af04      	add	r7, sp, #16
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	4608      	mov	r0, r1
 8001984:	4611      	mov	r1, r2
 8001986:	461a      	mov	r2, r3
 8001988:	4603      	mov	r3, r0
 800198a:	70fb      	strb	r3, [r7, #3]
 800198c:	460b      	mov	r3, r1
 800198e:	70bb      	strb	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_HCD_HC_Init+0x28>
 800199e:	2302      	movs	r3, #2
 80019a0:	e076      	b.n	8001a90 <HAL_HCD_HC_Init+0x116>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	212c      	movs	r1, #44	; 0x2c
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	333d      	adds	r3, #61	; 0x3d
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	212c      	movs	r1, #44	; 0x2c
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	3338      	adds	r3, #56	; 0x38
 80019ca:	787a      	ldrb	r2, [r7, #1]
 80019cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	212c      	movs	r1, #44	; 0x2c
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	4413      	add	r3, r2
 80019da:	3340      	adds	r3, #64	; 0x40
 80019dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019de:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	212c      	movs	r1, #44	; 0x2c
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	3339      	adds	r3, #57	; 0x39
 80019ee:	78fa      	ldrb	r2, [r7, #3]
 80019f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	212c      	movs	r1, #44	; 0x2c
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	333f      	adds	r3, #63	; 0x3f
 8001a00:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a04:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	78ba      	ldrb	r2, [r7, #2]
 8001a0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a0e:	b2d0      	uxtb	r0, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	212c      	movs	r1, #44	; 0x2c
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	333a      	adds	r3, #58	; 0x3a
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	da09      	bge.n	8001a3c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	212c      	movs	r1, #44	; 0x2c
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	333b      	adds	r3, #59	; 0x3b
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
 8001a3a:	e008      	b.n	8001a4e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	212c      	movs	r1, #44	; 0x2c
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	333b      	adds	r3, #59	; 0x3b
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	212c      	movs	r1, #44	; 0x2c
 8001a54:	fb01 f303 	mul.w	r3, r1, r3
 8001a58:	4413      	add	r3, r2
 8001a5a:	333c      	adds	r3, #60	; 0x3c
 8001a5c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a60:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	787c      	ldrb	r4, [r7, #1]
 8001a68:	78ba      	ldrb	r2, [r7, #2]
 8001a6a:	78f9      	ldrb	r1, [r7, #3]
 8001a6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a6e:	9302      	str	r3, [sp, #8]
 8001a70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	4623      	mov	r3, r4
 8001a7e:	f004 f8c3 	bl	8005c08 <USB_HC_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd90      	pop	{r4, r7, pc}

08001a98 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_HCD_HC_Halt+0x1e>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e00f      	b.n	8001ad6 <HAL_HCD_HC_Halt+0x3e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	78fa      	ldrb	r2, [r7, #3]
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f004 faff 	bl	80060ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	4608      	mov	r0, r1
 8001aea:	4611      	mov	r1, r2
 8001aec:	461a      	mov	r2, r3
 8001aee:	4603      	mov	r3, r0
 8001af0:	70fb      	strb	r3, [r7, #3]
 8001af2:	460b      	mov	r3, r1
 8001af4:	70bb      	strb	r3, [r7, #2]
 8001af6:	4613      	mov	r3, r2
 8001af8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	212c      	movs	r1, #44	; 0x2c
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	333b      	adds	r3, #59	; 0x3b
 8001b08:	78ba      	ldrb	r2, [r7, #2]
 8001b0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	212c      	movs	r1, #44	; 0x2c
 8001b12:	fb01 f303 	mul.w	r3, r1, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	333f      	adds	r3, #63	; 0x3f
 8001b1a:	787a      	ldrb	r2, [r7, #1]
 8001b1c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b1e:	7c3b      	ldrb	r3, [r7, #16]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d112      	bne.n	8001b4a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	212c      	movs	r1, #44	; 0x2c
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	3342      	adds	r3, #66	; 0x42
 8001b32:	2203      	movs	r2, #3
 8001b34:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	212c      	movs	r1, #44	; 0x2c
 8001b3c:	fb01 f303 	mul.w	r3, r1, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	333d      	adds	r3, #61	; 0x3d
 8001b44:	7f3a      	ldrb	r2, [r7, #28]
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	e008      	b.n	8001b5c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	212c      	movs	r1, #44	; 0x2c
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	3342      	adds	r3, #66	; 0x42
 8001b58:	2202      	movs	r2, #2
 8001b5a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b5c:	787b      	ldrb	r3, [r7, #1]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	f200 80c6 	bhi.w	8001cf0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001b64:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6a:	bf00      	nop
 8001b6c:	08001b7d 	.word	0x08001b7d
 8001b70:	08001cdd 	.word	0x08001cdd
 8001b74:	08001be1 	.word	0x08001be1
 8001b78:	08001c5f 	.word	0x08001c5f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b7c:	7c3b      	ldrb	r3, [r7, #16]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	f040 80b8 	bne.w	8001cf4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b84:	78bb      	ldrb	r3, [r7, #2]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 80b4 	bne.w	8001cf4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b8c:	8b3b      	ldrh	r3, [r7, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d108      	bne.n	8001ba4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	212c      	movs	r1, #44	; 0x2c
 8001b98:	fb01 f303 	mul.w	r3, r1, r3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3355      	adds	r3, #85	; 0x55
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	212c      	movs	r1, #44	; 0x2c
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	3355      	adds	r3, #85	; 0x55
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d109      	bne.n	8001bcc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	212c      	movs	r1, #44	; 0x2c
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3342      	adds	r3, #66	; 0x42
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bca:	e093      	b.n	8001cf4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	212c      	movs	r1, #44	; 0x2c
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3342      	adds	r3, #66	; 0x42
 8001bda:	2202      	movs	r2, #2
 8001bdc:	701a      	strb	r2, [r3, #0]
      break;
 8001bde:	e089      	b.n	8001cf4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001be0:	78bb      	ldrb	r3, [r7, #2]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d11d      	bne.n	8001c22 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	212c      	movs	r1, #44	; 0x2c
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3355      	adds	r3, #85	; 0x55
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d109      	bne.n	8001c0e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	212c      	movs	r1, #44	; 0x2c
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	3342      	adds	r3, #66	; 0x42
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c0c:	e073      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	212c      	movs	r1, #44	; 0x2c
 8001c14:	fb01 f303 	mul.w	r3, r1, r3
 8001c18:	4413      	add	r3, r2
 8001c1a:	3342      	adds	r3, #66	; 0x42
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	701a      	strb	r2, [r3, #0]
      break;
 8001c20:	e069      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	212c      	movs	r1, #44	; 0x2c
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3354      	adds	r3, #84	; 0x54
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	212c      	movs	r1, #44	; 0x2c
 8001c3c:	fb01 f303 	mul.w	r3, r1, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	3342      	adds	r3, #66	; 0x42
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
      break;
 8001c48:	e055      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	212c      	movs	r1, #44	; 0x2c
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	3342      	adds	r3, #66	; 0x42
 8001c58:	2202      	movs	r2, #2
 8001c5a:	701a      	strb	r2, [r3, #0]
      break;
 8001c5c:	e04b      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c5e:	78bb      	ldrb	r3, [r7, #2]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d11d      	bne.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	212c      	movs	r1, #44	; 0x2c
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	3355      	adds	r3, #85	; 0x55
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d109      	bne.n	8001c8c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	212c      	movs	r1, #44	; 0x2c
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	3342      	adds	r3, #66	; 0x42
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c8a:	e034      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	212c      	movs	r1, #44	; 0x2c
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	3342      	adds	r3, #66	; 0x42
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	701a      	strb	r2, [r3, #0]
      break;
 8001c9e:	e02a      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	212c      	movs	r1, #44	; 0x2c
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	3354      	adds	r3, #84	; 0x54
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d109      	bne.n	8001cc8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3342      	adds	r3, #66	; 0x42
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
      break;
 8001cc6:	e016      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	212c      	movs	r1, #44	; 0x2c
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3342      	adds	r3, #66	; 0x42
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	701a      	strb	r2, [r3, #0]
      break;
 8001cda:	e00c      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	212c      	movs	r1, #44	; 0x2c
 8001ce2:	fb01 f303 	mul.w	r3, r1, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3342      	adds	r3, #66	; 0x42
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
      break;
 8001cee:	e002      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001cf0:	bf00      	nop
 8001cf2:	e000      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001cf4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	212c      	movs	r1, #44	; 0x2c
 8001cfc:	fb01 f303 	mul.w	r3, r1, r3
 8001d00:	4413      	add	r3, r2
 8001d02:	3344      	adds	r3, #68	; 0x44
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	8b3a      	ldrh	r2, [r7, #24]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	202c      	movs	r0, #44	; 0x2c
 8001d10:	fb00 f303 	mul.w	r3, r0, r3
 8001d14:	440b      	add	r3, r1
 8001d16:	334c      	adds	r3, #76	; 0x4c
 8001d18:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	212c      	movs	r1, #44	; 0x2c
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	3360      	adds	r3, #96	; 0x60
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	212c      	movs	r1, #44	; 0x2c
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	3350      	adds	r3, #80	; 0x50
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	212c      	movs	r1, #44	; 0x2c
 8001d44:	fb01 f303 	mul.w	r3, r1, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	3339      	adds	r3, #57	; 0x39
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3361      	adds	r3, #97	; 0x61
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	222c      	movs	r2, #44	; 0x2c
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	3338      	adds	r3, #56	; 0x38
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	18d1      	adds	r1, r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f004 f852 	bl	8005e24 <USB_HC_StartXfer>
 8001d80:	4603      	mov	r3, r0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop

08001d8c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f003 fd75 	bl	8005892 <USB_GetMode>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	f040 80f6 	bne.w	8001f9c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f003 fd59 	bl	800586c <USB_ReadInterrupts>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80ec 	beq.w	8001f9a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f003 fd50 	bl	800586c <USB_ReadInterrupts>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dd6:	d104      	bne.n	8001de2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001de0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 fd40 	bl	800586c <USB_ReadInterrupts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001df6:	d104      	bne.n	8001e02 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f003 fd30 	bl	800586c <USB_ReadInterrupts>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e16:	d104      	bne.n	8001e22 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 fd20 	bl	800586c <USB_ReadInterrupts>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d103      	bne.n	8001e3e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 fd12 	bl	800586c <USB_ReadInterrupts>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e52:	d11c      	bne.n	8001e8e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e5c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10f      	bne.n	8001e8e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e6e:	2110      	movs	r1, #16
 8001e70:	6938      	ldr	r0, [r7, #16]
 8001e72:	f003 fc21 	bl	80056b8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e76:	6938      	ldr	r0, [r7, #16]
 8001e78:	f003 fc42 	bl	8005700 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	4618      	mov	r0, r3
 8001e84:	f003 fdfa 	bl	8005a7c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f006 facd 	bl	8008428 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 fcea 	bl	800586c <USB_ReadInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea2:	d102      	bne.n	8001eaa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f001 fa03 	bl	80032b0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 fcdc 	bl	800586c <USB_ReadInterrupts>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d106      	bne.n	8001ecc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f006 fa96 	bl	80083f0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 fccb 	bl	800586c <USB_ReadInterrupts>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b10      	cmp	r3, #16
 8001ede:	d101      	bne.n	8001ee4 <HAL_HCD_IRQHandler+0x158>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_HCD_IRQHandler+0x15a>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d012      	beq.n	8001f10 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0210 	bic.w	r2, r2, #16
 8001ef8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f001 f906 	bl	800310c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0210 	orr.w	r2, r2, #16
 8001f0e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f003 fca9 	bl	800586c <USB_ReadInterrupts>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f24:	d13a      	bne.n	8001f9c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f004 f8bc 	bl	80060a8 <USB_HC_ReadInterrupt>
 8001f30:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e025      	b.n	8001f84 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d018      	beq.n	8001f7e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f62:	d106      	bne.n	8001f72 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	4619      	mov	r1, r3
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8ab 	bl	80020c6 <HCD_HC_IN_IRQHandler>
 8001f70:	e005      	b.n	8001f7e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	4619      	mov	r1, r3
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 fcc6 	bl	800290a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d3d4      	bcc.n	8001f38 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f96:	615a      	str	r2, [r3, #20]
 8001f98:	e000      	b.n	8001f9c <HAL_HCD_IRQHandler+0x210>
      return;
 8001f9a:	bf00      	nop
    }
  }
}
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_HCD_Start+0x16>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e013      	b.n	8001fe0 <HAL_HCD_Start+0x3e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 fdbc 	bl	8005b44 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 fb02 	bl	80055da <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_HCD_Stop+0x16>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e00d      	b.n	800201a <HAL_HCD_Stop+0x32>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f004 f9b6 	bl	800637c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f003 fd5e 	bl	8005af0 <USB_ResetPort>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	212c      	movs	r1, #44	; 0x2c
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	4413      	add	r3, r2
 8002056:	3360      	adds	r3, #96	; 0x60
 8002058:	781b      	ldrb	r3, [r3, #0]
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	212c      	movs	r1, #44	; 0x2c
 8002078:	fb01 f303 	mul.w	r3, r1, r3
 800207c:	4413      	add	r3, r2
 800207e:	3350      	adds	r3, #80	; 0x50
 8002080:	681b      	ldr	r3, [r3, #0]
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f003 fda2 	bl	8005be4 <USB_GetCurrentFrame>
 80020a0:	4603      	mov	r3, r0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 fd7d 	bl	8005bb6 <USB_GetHostSpeed>
 80020bc:	4603      	mov	r3, r0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	460b      	mov	r3, r1
 80020d0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d119      	bne.n	800212a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	015a      	lsls	r2, r3, #5
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002102:	461a      	mov	r2, r3
 8002104:	2304      	movs	r3, #4
 8002106:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	0151      	lsls	r1, r2, #5
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	440a      	add	r2, r1
 800211e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	60d3      	str	r3, [r2, #12]
 8002128:	e101      	b.n	800232e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002140:	d12b      	bne.n	800219a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4413      	add	r3, r2
 800214a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214e:	461a      	mov	r2, r3
 8002150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002154:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3361      	adds	r3, #97	; 0x61
 8002164:	2207      	movs	r2, #7
 8002166:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4413      	add	r3, r2
 8002170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	0151      	lsls	r1, r2, #5
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	440a      	add	r2, r1
 800217e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002182:	f043 0302 	orr.w	r3, r3, #2
 8002186:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f003 ff99 	bl	80060ca <USB_HC_Halt>
 8002198:	e0c9      	b.n	800232e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b20      	cmp	r3, #32
 80021ae:	d109      	bne.n	80021c4 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021bc:	461a      	mov	r2, r3
 80021be:	2320      	movs	r3, #32
 80021c0:	6093      	str	r3, [r2, #8]
 80021c2:	e0b4      	b.n	800232e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d133      	bne.n	8002242 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	0151      	lsls	r1, r2, #5
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	440a      	add	r2, r1
 80021f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	212c      	movs	r1, #44	; 0x2c
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	3361      	adds	r3, #97	; 0x61
 8002208:	2205      	movs	r2, #5
 800220a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	461a      	mov	r2, r3
 800221a:	2310      	movs	r3, #16
 800221c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4413      	add	r3, r2
 8002226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222a:	461a      	mov	r2, r3
 800222c:	2308      	movs	r3, #8
 800222e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f003 ff45 	bl	80060ca <USB_HC_Halt>
 8002240:	e075      	b.n	800232e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002258:	d134      	bne.n	80022c4 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4413      	add	r3, r2
 8002262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	0151      	lsls	r1, r2, #5
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	440a      	add	r2, r1
 8002270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	3361      	adds	r3, #97	; 0x61
 8002288:	2208      	movs	r2, #8
 800228a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002298:	461a      	mov	r2, r3
 800229a:	2310      	movs	r3, #16
 800229c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	461a      	mov	r2, r3
 80022ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022b0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f003 ff04 	bl	80060ca <USB_HC_Halt>
 80022c2:	e034      	b.n	800232e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d6:	2b80      	cmp	r3, #128	; 0x80
 80022d8:	d129      	bne.n	800232e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	0151      	lsls	r1, r2, #5
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	440a      	add	r2, r1
 80022f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	3361      	adds	r3, #97	; 0x61
 8002308:	2206      	movs	r2, #6
 800230a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	4611      	mov	r1, r2
 8002316:	4618      	mov	r0, r3
 8002318:	f003 fed7 	bl	80060ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002328:	461a      	mov	r2, r3
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002344:	d122      	bne.n	800238c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4413      	add	r3, r2
 800234e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	0151      	lsls	r1, r2, #5
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	440a      	add	r2, r1
 800235c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f003 feaa 	bl	80060ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4413      	add	r3, r2
 800237e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002382:	461a      	mov	r2, r3
 8002384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002388:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800238a:	e2ba      	b.n	8002902 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b01      	cmp	r3, #1
 80023a0:	f040 811b 	bne.w	80025da <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d019      	beq.n	80023e0 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	212c      	movs	r1, #44	; 0x2c
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	3348      	adds	r3, #72	; 0x48
 80023ba:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	0159      	lsls	r1, r3, #5
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	440b      	add	r3, r1
 80023c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023ce:	1ad2      	subs	r2, r2, r3
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	202c      	movs	r0, #44	; 0x2c
 80023d6:	fb00 f303 	mul.w	r3, r0, r3
 80023da:	440b      	add	r3, r1
 80023dc:	3350      	adds	r3, #80	; 0x50
 80023de:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	212c      	movs	r1, #44	; 0x2c
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	3361      	adds	r3, #97	; 0x61
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	335c      	adds	r3, #92	; 0x5c
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4413      	add	r3, r2
 800240c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002410:	461a      	mov	r2, r3
 8002412:	2301      	movs	r3, #1
 8002414:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	333f      	adds	r3, #63	; 0x3f
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	212c      	movs	r1, #44	; 0x2c
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	4413      	add	r3, r2
 8002436:	333f      	adds	r3, #63	; 0x3f
 8002438:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800243a:	2b02      	cmp	r3, #2
 800243c:	d121      	bne.n	8002482 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4413      	add	r3, r2
 8002446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	0151      	lsls	r1, r2, #5
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	440a      	add	r2, r1
 8002454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f003 fe2e 	bl	80060ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247a:	461a      	mov	r2, r3
 800247c:	2310      	movs	r3, #16
 800247e:	6093      	str	r3, [r2, #8]
 8002480:	e066      	b.n	8002550 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	212c      	movs	r1, #44	; 0x2c
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4413      	add	r3, r2
 800248e:	333f      	adds	r3, #63	; 0x3f
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b03      	cmp	r3, #3
 8002494:	d127      	bne.n	80024e6 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4413      	add	r3, r2
 800249e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	0151      	lsls	r1, r2, #5
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	440a      	add	r2, r1
 80024ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024b4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	212c      	movs	r1, #44	; 0x2c
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	3360      	adds	r3, #96	; 0x60
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	b2d9      	uxtb	r1, r3
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	202c      	movs	r0, #44	; 0x2c
 80024d2:	fb00 f303 	mul.w	r3, r0, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	3360      	adds	r3, #96	; 0x60
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f005 ffb0 	bl	8008444 <HAL_HCD_HC_NotifyURBChange_Callback>
 80024e4:	e034      	b.n	8002550 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	212c      	movs	r1, #44	; 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	333f      	adds	r3, #63	; 0x3f
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d12a      	bne.n	8002550 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	212c      	movs	r1, #44	; 0x2c
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	4413      	add	r3, r2
 8002506:	3360      	adds	r3, #96	; 0x60
 8002508:	2201      	movs	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	3354      	adds	r3, #84	; 0x54
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	f083 0301 	eor.w	r3, r3, #1
 8002520:	b2d8      	uxtb	r0, r3
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	212c      	movs	r1, #44	; 0x2c
 8002528:	fb01 f303 	mul.w	r3, r1, r3
 800252c:	4413      	add	r3, r2
 800252e:	3354      	adds	r3, #84	; 0x54
 8002530:	4602      	mov	r2, r0
 8002532:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	b2d9      	uxtb	r1, r3
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	202c      	movs	r0, #44	; 0x2c
 800253e:	fb00 f303 	mul.w	r3, r0, r3
 8002542:	4413      	add	r3, r2
 8002544:	3360      	adds	r3, #96	; 0x60
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f005 ff7a 	bl	8008444 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d12b      	bne.n	80025b0 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	3348      	adds	r3, #72	; 0x48
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	202c      	movs	r0, #44	; 0x2c
 800256e:	fb00 f202 	mul.w	r2, r0, r2
 8002572:	440a      	add	r2, r1
 8002574:	3240      	adds	r2, #64	; 0x40
 8002576:	8812      	ldrh	r2, [r2, #0]
 8002578:	fbb3 f3f2 	udiv	r3, r3, r2
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 81be 	beq.w	8002902 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	3354      	adds	r3, #84	; 0x54
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	f083 0301 	eor.w	r3, r3, #1
 800259a:	b2d8      	uxtb	r0, r3
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	212c      	movs	r1, #44	; 0x2c
 80025a2:	fb01 f303 	mul.w	r3, r1, r3
 80025a6:	4413      	add	r3, r2
 80025a8:	3354      	adds	r3, #84	; 0x54
 80025aa:	4602      	mov	r2, r0
 80025ac:	701a      	strb	r2, [r3, #0]
}
 80025ae:	e1a8      	b.n	8002902 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3354      	adds	r3, #84	; 0x54
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	f083 0301 	eor.w	r3, r3, #1
 80025c4:	b2d8      	uxtb	r0, r3
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	3354      	adds	r3, #84	; 0x54
 80025d4:	4602      	mov	r2, r0
 80025d6:	701a      	strb	r2, [r3, #0]
}
 80025d8:	e193      	b.n	8002902 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	f040 8106 	bne.w	80027fe <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	0151      	lsls	r1, r2, #5
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	440a      	add	r2, r1
 8002608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800260c:	f023 0302 	bic.w	r3, r3, #2
 8002610:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	212c      	movs	r1, #44	; 0x2c
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	3361      	adds	r3, #97	; 0x61
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d109      	bne.n	800263a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	3360      	adds	r3, #96	; 0x60
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
 8002638:	e0c9      	b.n	80027ce <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	212c      	movs	r1, #44	; 0x2c
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	3361      	adds	r3, #97	; 0x61
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b05      	cmp	r3, #5
 800264c:	d109      	bne.n	8002662 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	212c      	movs	r1, #44	; 0x2c
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	4413      	add	r3, r2
 800265a:	3360      	adds	r3, #96	; 0x60
 800265c:	2205      	movs	r2, #5
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	e0b5      	b.n	80027ce <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	212c      	movs	r1, #44	; 0x2c
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	4413      	add	r3, r2
 800266e:	3361      	adds	r3, #97	; 0x61
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b06      	cmp	r3, #6
 8002674:	d009      	beq.n	800268a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	3361      	adds	r3, #97	; 0x61
 8002684:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002686:	2b08      	cmp	r3, #8
 8002688:	d150      	bne.n	800272c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	335c      	adds	r3, #92	; 0x5c
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	202c      	movs	r0, #44	; 0x2c
 80026a2:	fb00 f303 	mul.w	r3, r0, r3
 80026a6:	440b      	add	r3, r1
 80026a8:	335c      	adds	r3, #92	; 0x5c
 80026aa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	212c      	movs	r1, #44	; 0x2c
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	335c      	adds	r3, #92	; 0x5c
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d912      	bls.n	80026e6 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	212c      	movs	r1, #44	; 0x2c
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	335c      	adds	r3, #92	; 0x5c
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	3360      	adds	r3, #96	; 0x60
 80026e0:	2204      	movs	r2, #4
 80026e2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026e4:	e073      	b.n	80027ce <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	3360      	adds	r3, #96	; 0x60
 80026f4:	2202      	movs	r2, #2
 80026f6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800270e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002716:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002724:	461a      	mov	r2, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800272a:	e050      	b.n	80027ce <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	3361      	adds	r3, #97	; 0x61
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d122      	bne.n	8002786 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	212c      	movs	r1, #44	; 0x2c
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	4413      	add	r3, r2
 800274c:	3360      	adds	r3, #96	; 0x60
 800274e:	2202      	movs	r2, #2
 8002750:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4413      	add	r3, r2
 800275a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002768:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002770:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277e:	461a      	mov	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	e023      	b.n	80027ce <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	3361      	adds	r3, #97	; 0x61
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b07      	cmp	r3, #7
 8002798:	d119      	bne.n	80027ce <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	212c      	movs	r1, #44	; 0x2c
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	335c      	adds	r3, #92	; 0x5c
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	202c      	movs	r0, #44	; 0x2c
 80027b2:	fb00 f303 	mul.w	r3, r0, r3
 80027b6:	440b      	add	r3, r1
 80027b8:	335c      	adds	r3, #92	; 0x5c
 80027ba:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	3360      	adds	r3, #96	; 0x60
 80027ca:	2204      	movs	r2, #4
 80027cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027da:	461a      	mov	r2, r3
 80027dc:	2302      	movs	r3, #2
 80027de:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	b2d9      	uxtb	r1, r3
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	202c      	movs	r0, #44	; 0x2c
 80027ea:	fb00 f303 	mul.w	r3, r0, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3360      	adds	r3, #96	; 0x60
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	461a      	mov	r2, r3
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f005 fe24 	bl	8008444 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80027fc:	e081      	b.n	8002902 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b10      	cmp	r3, #16
 8002812:	d176      	bne.n	8002902 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	333f      	adds	r3, #63	; 0x3f
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b03      	cmp	r3, #3
 8002826:	d121      	bne.n	800286c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	335c      	adds	r3, #92	; 0x5c
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4413      	add	r3, r2
 8002842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	0151      	lsls	r1, r2, #5
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	440a      	add	r2, r1
 8002850:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	4611      	mov	r1, r2
 8002864:	4618      	mov	r0, r3
 8002866:	f003 fc30 	bl	80060ca <USB_HC_Halt>
 800286a:	e041      	b.n	80028f0 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	333f      	adds	r3, #63	; 0x3f
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d009      	beq.n	8002894 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	333f      	adds	r3, #63	; 0x3f
 800288e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002890:	2b02      	cmp	r3, #2
 8002892:	d12d      	bne.n	80028f0 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	335c      	adds	r3, #92	; 0x5c
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d120      	bne.n	80028f0 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	3361      	adds	r3, #97	; 0x61
 80028bc:	2203      	movs	r2, #3
 80028be:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	0151      	lsls	r1, r2, #5
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	440a      	add	r2, r1
 80028d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028da:	f043 0302 	orr.w	r3, r3, #2
 80028de:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 fbed 	bl	80060ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fc:	461a      	mov	r2, r3
 80028fe:	2310      	movs	r3, #16
 8002900:	6093      	str	r3, [r2, #8]
}
 8002902:	bf00      	nop
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b088      	sub	sp, #32
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b04      	cmp	r3, #4
 8002938:	d119      	bne.n	800296e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	461a      	mov	r2, r3
 8002948:	2304      	movs	r3, #4
 800294a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	0151      	lsls	r1, r2, #5
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	440a      	add	r2, r1
 8002962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800296c:	e3ca      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	2b20      	cmp	r3, #32
 8002982:	d13e      	bne.n	8002a02 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	4413      	add	r3, r2
 800298c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002990:	461a      	mov	r2, r3
 8002992:	2320      	movs	r3, #32
 8002994:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	333d      	adds	r3, #61	; 0x3d
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	f040 83ac 	bne.w	8003104 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	333d      	adds	r3, #61	; 0x3d
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	3360      	adds	r3, #96	; 0x60
 80029cc:	2202      	movs	r2, #2
 80029ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	0151      	lsls	r1, r2, #5
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	440a      	add	r2, r1
 80029e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ea:	f043 0302 	orr.w	r3, r3, #2
 80029ee:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	4611      	mov	r1, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f003 fb65 	bl	80060ca <USB_HC_Halt>
}
 8002a00:	e380      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a18:	d122      	bne.n	8002a60 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	0151      	lsls	r1, r2, #5
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	440a      	add	r2, r1
 8002a30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a34:	f043 0302 	orr.w	r3, r3, #2
 8002a38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 fb40 	bl	80060ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a56:	461a      	mov	r2, r3
 8002a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a5c:	6093      	str	r3, [r2, #8]
}
 8002a5e:	e351      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d150      	bne.n	8002b18 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	335c      	adds	r3, #92	; 0x5c
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9a:	2b40      	cmp	r3, #64	; 0x40
 8002a9c:	d111      	bne.n	8002ac2 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	212c      	movs	r1, #44	; 0x2c
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	333d      	adds	r3, #61	; 0x3d
 8002aac:	2201      	movs	r2, #1
 8002aae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abc:	461a      	mov	r2, r3
 8002abe:	2340      	movs	r3, #64	; 0x40
 8002ac0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	0151      	lsls	r1, r2, #5
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	440a      	add	r2, r1
 8002ad8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 faec 	bl	80060ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afe:	461a      	mov	r2, r3
 8002b00:	2301      	movs	r3, #1
 8002b02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3361      	adds	r3, #97	; 0x61
 8002b12:	2201      	movs	r2, #1
 8002b14:	701a      	strb	r2, [r3, #0]
}
 8002b16:	e2f5      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	2b40      	cmp	r3, #64	; 0x40
 8002b2c:	d13c      	bne.n	8002ba8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3361      	adds	r3, #97	; 0x61
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	212c      	movs	r1, #44	; 0x2c
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	333d      	adds	r3, #61	; 0x3d
 8002b4e:	2201      	movs	r2, #1
 8002b50:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	335c      	adds	r3, #92	; 0x5c
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	0151      	lsls	r1, r2, #5
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	440a      	add	r2, r1
 8002b7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b7e:	f043 0302 	orr.w	r3, r3, #2
 8002b82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f003 fa9b 	bl	80060ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2340      	movs	r3, #64	; 0x40
 8002ba4:	6093      	str	r3, [r2, #8]
}
 8002ba6:	e2ad      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d12a      	bne.n	8002c14 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bca:	461a      	mov	r2, r3
 8002bcc:	2308      	movs	r3, #8
 8002bce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	0151      	lsls	r1, r2, #5
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	440a      	add	r2, r1
 8002be6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bea:	f043 0302 	orr.w	r3, r3, #2
 8002bee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f003 fa65 	bl	80060ca <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3361      	adds	r3, #97	; 0x61
 8002c0e:	2205      	movs	r2, #5
 8002c10:	701a      	strb	r2, [r3, #0]
}
 8002c12:	e277      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d150      	bne.n	8002ccc <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	335c      	adds	r3, #92	; 0x5c
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3361      	adds	r3, #97	; 0x61
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	333d      	adds	r3, #61	; 0x3d
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d112      	bne.n	8002c88 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	333c      	adds	r3, #60	; 0x3c
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d108      	bne.n	8002c88 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	333d      	adds	r3, #61	; 0x3d
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	0151      	lsls	r1, r2, #5
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	440a      	add	r2, r1
 8002c9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ca2:	f043 0302 	orr.w	r3, r3, #2
 8002ca6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f003 fa09 	bl	80060ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	2310      	movs	r3, #16
 8002cc8:	6093      	str	r3, [r2, #8]
}
 8002cca:	e21b      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b80      	cmp	r3, #128	; 0x80
 8002ce0:	d174      	bne.n	8002dcc <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d121      	bne.n	8002d2e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3361      	adds	r3, #97	; 0x61
 8002cf8:	2206      	movs	r2, #6
 8002cfa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	0151      	lsls	r1, r2, #5
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	440a      	add	r2, r1
 8002d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d16:	f043 0302 	orr.w	r3, r3, #2
 8002d1a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f003 f9cf 	bl	80060ca <USB_HC_Halt>
 8002d2c:	e044      	b.n	8002db8 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	335c      	adds	r3, #92	; 0x5c
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	202c      	movs	r0, #44	; 0x2c
 8002d46:	fb00 f303 	mul.w	r3, r0, r3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	335c      	adds	r3, #92	; 0x5c
 8002d4e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	212c      	movs	r1, #44	; 0x2c
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	335c      	adds	r3, #92	; 0x5c
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d920      	bls.n	8002da6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	335c      	adds	r3, #92	; 0x5c
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	3360      	adds	r3, #96	; 0x60
 8002d84:	2204      	movs	r2, #4
 8002d86:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	b2d9      	uxtb	r1, r3
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	202c      	movs	r0, #44	; 0x2c
 8002d92:	fb00 f303 	mul.w	r3, r0, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3360      	adds	r3, #96	; 0x60
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f005 fb50 	bl	8008444 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002da4:	e008      	b.n	8002db8 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	212c      	movs	r1, #44	; 0x2c
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	3360      	adds	r3, #96	; 0x60
 8002db4:	2202      	movs	r2, #2
 8002db6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	6093      	str	r3, [r2, #8]
}
 8002dca:	e19b      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002de2:	d134      	bne.n	8002e4e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	0151      	lsls	r1, r2, #5
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	440a      	add	r2, r1
 8002dfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dfe:	f043 0302 	orr.w	r3, r3, #2
 8002e02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f003 f95b 	bl	80060ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	461a      	mov	r2, r3
 8002e22:	2310      	movs	r3, #16
 8002e24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e32:	461a      	mov	r2, r3
 8002e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e38:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	3361      	adds	r3, #97	; 0x61
 8002e48:	2208      	movs	r2, #8
 8002e4a:	701a      	strb	r2, [r3, #0]
}
 8002e4c:	e15a      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	f040 814f 	bne.w	8003104 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	0151      	lsls	r1, r2, #5
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	440a      	add	r2, r1
 8002e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e80:	f023 0302 	bic.w	r3, r3, #2
 8002e84:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	3361      	adds	r3, #97	; 0x61
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d17d      	bne.n	8002f96 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3360      	adds	r3, #96	; 0x60
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	333f      	adds	r3, #63	; 0x3f
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d00a      	beq.n	8002ed6 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	333f      	adds	r3, #63	; 0x3f
 8002ece:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	f040 8100 	bne.w	80030d6 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d113      	bne.n	8002f06 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	3355      	adds	r3, #85	; 0x55
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	f083 0301 	eor.w	r3, r3, #1
 8002ef2:	b2d8      	uxtb	r0, r3
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	212c      	movs	r1, #44	; 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	3355      	adds	r3, #85	; 0x55
 8002f02:	4602      	mov	r2, r0
 8002f04:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	f040 80e3 	bne.w	80030d6 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	212c      	movs	r1, #44	; 0x2c
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	334c      	adds	r3, #76	; 0x4c
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80d8 	beq.w	80030d6 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	212c      	movs	r1, #44	; 0x2c
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	334c      	adds	r3, #76	; 0x4c
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	202c      	movs	r0, #44	; 0x2c
 8002f3c:	fb00 f202 	mul.w	r2, r0, r2
 8002f40:	440a      	add	r2, r1
 8002f42:	3240      	adds	r2, #64	; 0x40
 8002f44:	8812      	ldrh	r2, [r2, #0]
 8002f46:	4413      	add	r3, r2
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	202c      	movs	r0, #44	; 0x2c
 8002f50:	fb00 f202 	mul.w	r2, r0, r2
 8002f54:	440a      	add	r2, r1
 8002f56:	3240      	adds	r2, #64	; 0x40
 8002f58:	8812      	ldrh	r2, [r2, #0]
 8002f5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 80b5 	beq.w	80030d6 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	212c      	movs	r1, #44	; 0x2c
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	3355      	adds	r3, #85	; 0x55
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	f083 0301 	eor.w	r3, r3, #1
 8002f80:	b2d8      	uxtb	r0, r3
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3355      	adds	r3, #85	; 0x55
 8002f90:	4602      	mov	r2, r0
 8002f92:	701a      	strb	r2, [r3, #0]
 8002f94:	e09f      	b.n	80030d6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3361      	adds	r3, #97	; 0x61
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d109      	bne.n	8002fbe <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3360      	adds	r3, #96	; 0x60
 8002fb8:	2202      	movs	r2, #2
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	e08b      	b.n	80030d6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	212c      	movs	r1, #44	; 0x2c
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	3361      	adds	r3, #97	; 0x61
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d109      	bne.n	8002fe6 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	212c      	movs	r1, #44	; 0x2c
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	3360      	adds	r3, #96	; 0x60
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	e077      	b.n	80030d6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3361      	adds	r3, #97	; 0x61
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d109      	bne.n	800300e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	3360      	adds	r3, #96	; 0x60
 8003008:	2205      	movs	r2, #5
 800300a:	701a      	strb	r2, [r3, #0]
 800300c:	e063      	b.n	80030d6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	3361      	adds	r3, #97	; 0x61
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b06      	cmp	r3, #6
 8003020:	d009      	beq.n	8003036 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	212c      	movs	r1, #44	; 0x2c
 8003028:	fb01 f303 	mul.w	r3, r1, r3
 800302c:	4413      	add	r3, r2
 800302e:	3361      	adds	r3, #97	; 0x61
 8003030:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003032:	2b08      	cmp	r3, #8
 8003034:	d14f      	bne.n	80030d6 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	212c      	movs	r1, #44	; 0x2c
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	4413      	add	r3, r2
 8003042:	335c      	adds	r3, #92	; 0x5c
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	202c      	movs	r0, #44	; 0x2c
 800304e:	fb00 f303 	mul.w	r3, r0, r3
 8003052:	440b      	add	r3, r1
 8003054:	335c      	adds	r3, #92	; 0x5c
 8003056:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	212c      	movs	r1, #44	; 0x2c
 800305e:	fb01 f303 	mul.w	r3, r1, r3
 8003062:	4413      	add	r3, r2
 8003064:	335c      	adds	r3, #92	; 0x5c
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d912      	bls.n	8003092 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	212c      	movs	r1, #44	; 0x2c
 8003072:	fb01 f303 	mul.w	r3, r1, r3
 8003076:	4413      	add	r3, r2
 8003078:	335c      	adds	r3, #92	; 0x5c
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	3360      	adds	r3, #96	; 0x60
 800308c:	2204      	movs	r2, #4
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	e021      	b.n	80030d6 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	212c      	movs	r1, #44	; 0x2c
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	4413      	add	r3, r2
 800309e:	3360      	adds	r3, #96	; 0x60
 80030a0:	2202      	movs	r2, #2
 80030a2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030ba:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030c2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d0:	461a      	mov	r2, r3
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e2:	461a      	mov	r2, r3
 80030e4:	2302      	movs	r3, #2
 80030e6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	b2d9      	uxtb	r1, r3
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	202c      	movs	r0, #44	; 0x2c
 80030f2:	fb00 f303 	mul.w	r3, r0, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	3360      	adds	r3, #96	; 0x60
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f005 f9a0 	bl	8008444 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003104:	bf00      	nop
 8003106:	3720      	adds	r7, #32
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	; 0x28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	0c5b      	lsrs	r3, r3, #17
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003140:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d004      	beq.n	8003152 <HCD_RXQLVL_IRQHandler+0x46>
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b05      	cmp	r3, #5
 800314c:	f000 80a9 	beq.w	80032a2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003150:	e0aa      	b.n	80032a8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80a6 	beq.w	80032a6 <HCD_RXQLVL_IRQHandler+0x19a>
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	212c      	movs	r1, #44	; 0x2c
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	4413      	add	r3, r2
 8003166:	3344      	adds	r3, #68	; 0x44
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 809b 	beq.w	80032a6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	212c      	movs	r1, #44	; 0x2c
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	3350      	adds	r3, #80	; 0x50
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	441a      	add	r2, r3
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	202c      	movs	r0, #44	; 0x2c
 800318a:	fb00 f303 	mul.w	r3, r0, r3
 800318e:	440b      	add	r3, r1
 8003190:	334c      	adds	r3, #76	; 0x4c
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d87a      	bhi.n	800328e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	212c      	movs	r1, #44	; 0x2c
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	3344      	adds	r3, #68	; 0x44
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	b292      	uxth	r2, r2
 80031b0:	4619      	mov	r1, r3
 80031b2:	f002 fb03 	bl	80057bc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	212c      	movs	r1, #44	; 0x2c
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	4413      	add	r3, r2
 80031c2:	3344      	adds	r3, #68	; 0x44
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	441a      	add	r2, r3
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	202c      	movs	r0, #44	; 0x2c
 80031d0:	fb00 f303 	mul.w	r3, r0, r3
 80031d4:	440b      	add	r3, r1
 80031d6:	3344      	adds	r3, #68	; 0x44
 80031d8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	212c      	movs	r1, #44	; 0x2c
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	3350      	adds	r3, #80	; 0x50
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	441a      	add	r2, r3
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	202c      	movs	r0, #44	; 0x2c
 80031f4:	fb00 f303 	mul.w	r3, r0, r3
 80031f8:	440b      	add	r3, r1
 80031fa:	3350      	adds	r3, #80	; 0x50
 80031fc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	4413      	add	r3, r2
 8003206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	0cdb      	lsrs	r3, r3, #19
 800320e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003212:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	212c      	movs	r1, #44	; 0x2c
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	4413      	add	r3, r2
 8003220:	3340      	adds	r3, #64	; 0x40
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4293      	cmp	r3, r2
 800322a:	d13c      	bne.n	80032a6 <HCD_RXQLVL_IRQHandler+0x19a>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d039      	beq.n	80032a6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003248:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003250:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325e:	461a      	mov	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	212c      	movs	r1, #44	; 0x2c
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	4413      	add	r3, r2
 8003270:	3354      	adds	r3, #84	; 0x54
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	f083 0301 	eor.w	r3, r3, #1
 8003278:	b2d8      	uxtb	r0, r3
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	212c      	movs	r1, #44	; 0x2c
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	4413      	add	r3, r2
 8003286:	3354      	adds	r3, #84	; 0x54
 8003288:	4602      	mov	r2, r0
 800328a:	701a      	strb	r2, [r3, #0]
      break;
 800328c:	e00b      	b.n	80032a6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	212c      	movs	r1, #44	; 0x2c
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	3360      	adds	r3, #96	; 0x60
 800329c:	2204      	movs	r2, #4
 800329e:	701a      	strb	r2, [r3, #0]
      break;
 80032a0:	e001      	b.n	80032a6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80032a2:	bf00      	nop
 80032a4:	e000      	b.n	80032a8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80032a6:	bf00      	nop
  }
}
 80032a8:	bf00      	nop
 80032aa:	3728      	adds	r7, #40	; 0x28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80032dc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d10b      	bne.n	8003300 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d102      	bne.n	80032f8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f005 f88a 	bl	800840c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f043 0302 	orr.w	r3, r3, #2
 80032fe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b08      	cmp	r3, #8
 8003308:	d132      	bne.n	8003370 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f043 0308 	orr.w	r3, r3, #8
 8003310:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b04      	cmp	r3, #4
 800331a:	d126      	bne.n	800336a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d113      	bne.n	800334c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800332a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800332e:	d106      	bne.n	800333e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2102      	movs	r1, #2
 8003336:	4618      	mov	r0, r3
 8003338:	f002 fba0 	bl	8005a7c <USB_InitFSLSPClkSel>
 800333c:	e011      	b.n	8003362 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2101      	movs	r1, #1
 8003344:	4618      	mov	r0, r3
 8003346:	f002 fb99 	bl	8005a7c <USB_InitFSLSPClkSel>
 800334a:	e00a      	b.n	8003362 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d106      	bne.n	8003362 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800335a:	461a      	mov	r2, r3
 800335c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003360:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f005 f87c 	bl	8008460 <HAL_HCD_PortEnabled_Callback>
 8003368:	e002      	b.n	8003370 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f005 f886 	bl	800847c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b20      	cmp	r3, #32
 8003378:	d103      	bne.n	8003382 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f043 0320 	orr.w	r3, r3, #32
 8003380:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003388:	461a      	mov	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	6013      	str	r3, [r2, #0]
}
 800338e:	bf00      	nop
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e12b      	b.n	8003602 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd fc72 	bl	8000ca8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2224      	movs	r2, #36	; 0x24
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033fc:	f001 f9fc 	bl	80047f8 <HAL_RCC_GetPCLK1Freq>
 8003400:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4a81      	ldr	r2, [pc, #516]	; (800360c <HAL_I2C_Init+0x274>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d807      	bhi.n	800341c <HAL_I2C_Init+0x84>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a80      	ldr	r2, [pc, #512]	; (8003610 <HAL_I2C_Init+0x278>)
 8003410:	4293      	cmp	r3, r2
 8003412:	bf94      	ite	ls
 8003414:	2301      	movls	r3, #1
 8003416:	2300      	movhi	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	e006      	b.n	800342a <HAL_I2C_Init+0x92>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4a7d      	ldr	r2, [pc, #500]	; (8003614 <HAL_I2C_Init+0x27c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	bf94      	ite	ls
 8003424:	2301      	movls	r3, #1
 8003426:	2300      	movhi	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e0e7      	b.n	8003602 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4a78      	ldr	r2, [pc, #480]	; (8003618 <HAL_I2C_Init+0x280>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	0c9b      	lsrs	r3, r3, #18
 800343c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	430a      	orrs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4a6a      	ldr	r2, [pc, #424]	; (800360c <HAL_I2C_Init+0x274>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d802      	bhi.n	800346c <HAL_I2C_Init+0xd4>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	3301      	adds	r3, #1
 800346a:	e009      	b.n	8003480 <HAL_I2C_Init+0xe8>
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	4a69      	ldr	r2, [pc, #420]	; (800361c <HAL_I2C_Init+0x284>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	099b      	lsrs	r3, r3, #6
 800347e:	3301      	adds	r3, #1
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	430b      	orrs	r3, r1
 8003486:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003492:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	495c      	ldr	r1, [pc, #368]	; (800360c <HAL_I2C_Init+0x274>)
 800349c:	428b      	cmp	r3, r1
 800349e:	d819      	bhi.n	80034d4 <HAL_I2C_Init+0x13c>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1e59      	subs	r1, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ae:	1c59      	adds	r1, r3, #1
 80034b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034b4:	400b      	ands	r3, r1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_I2C_Init+0x138>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1e59      	subs	r1, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80034c8:	3301      	adds	r3, #1
 80034ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ce:	e051      	b.n	8003574 <HAL_I2C_Init+0x1dc>
 80034d0:	2304      	movs	r3, #4
 80034d2:	e04f      	b.n	8003574 <HAL_I2C_Init+0x1dc>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d111      	bne.n	8003500 <HAL_I2C_Init+0x168>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1e58      	subs	r0, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	440b      	add	r3, r1
 80034ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ee:	3301      	adds	r3, #1
 80034f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e012      	b.n	8003526 <HAL_I2C_Init+0x18e>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1e58      	subs	r0, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	0099      	lsls	r1, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	fbb0 f3f3 	udiv	r3, r0, r3
 8003516:	3301      	adds	r3, #1
 8003518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_I2C_Init+0x196>
 800352a:	2301      	movs	r3, #1
 800352c:	e022      	b.n	8003574 <HAL_I2C_Init+0x1dc>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10e      	bne.n	8003554 <HAL_I2C_Init+0x1bc>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1e58      	subs	r0, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6859      	ldr	r1, [r3, #4]
 800353e:	460b      	mov	r3, r1
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	440b      	add	r3, r1
 8003544:	fbb0 f3f3 	udiv	r3, r0, r3
 8003548:	3301      	adds	r3, #1
 800354a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003552:	e00f      	b.n	8003574 <HAL_I2C_Init+0x1dc>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1e58      	subs	r0, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6859      	ldr	r1, [r3, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	0099      	lsls	r1, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	fbb0 f3f3 	udiv	r3, r0, r3
 800356a:	3301      	adds	r3, #1
 800356c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	6809      	ldr	r1, [r1, #0]
 8003578:	4313      	orrs	r3, r2
 800357a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6911      	ldr	r1, [r2, #16]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68d2      	ldr	r2, [r2, #12]
 80035ae:	4311      	orrs	r1, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	430b      	orrs	r3, r1
 80035b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	000186a0 	.word	0x000186a0
 8003610:	001e847f 	.word	0x001e847f
 8003614:	003d08ff 	.word	0x003d08ff
 8003618:	431bde83 	.word	0x431bde83
 800361c:	10624dd3 	.word	0x10624dd3

08003620 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e128      	b.n	8003884 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a90      	ldr	r2, [pc, #576]	; (800388c <HAL_I2S_Init+0x26c>)
 800364a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7fd fb73 	bl	8000d38 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003668:	f023 030f 	bic.w	r3, r3, #15
 800366c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2202      	movs	r2, #2
 8003674:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d060      	beq.n	8003740 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d102      	bne.n	800368c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003686:	2310      	movs	r3, #16
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	e001      	b.n	8003690 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800368c:	2320      	movs	r3, #32
 800368e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b20      	cmp	r3, #32
 8003696:	d802      	bhi.n	800369e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800369e:	2001      	movs	r0, #1
 80036a0:	f001 f9a0 	bl	80049e4 <HAL_RCCEx_GetPeriphCLKFreq>
 80036a4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ae:	d125      	bne.n	80036fc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d010      	beq.n	80036da <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	461a      	mov	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	3305      	adds	r3, #5
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	e01f      	b.n	800371a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	461a      	mov	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	3305      	adds	r3, #5
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	e00e      	b.n	800371a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	fbb2 f2f3 	udiv	r2, r2, r3
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	461a      	mov	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	3305      	adds	r3, #5
 8003718:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4a5c      	ldr	r2, [pc, #368]	; (8003890 <HAL_I2S_Init+0x270>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	08db      	lsrs	r3, r3, #3
 8003724:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	e003      	b.n	8003748 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003740:	2302      	movs	r3, #2
 8003742:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d902      	bls.n	8003754 <HAL_I2S_Init+0x134>
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	2bff      	cmp	r3, #255	; 0xff
 8003752:	d907      	bls.n	8003764 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003758:	f043 0210 	orr.w	r2, r3, #16
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e08f      	b.n	8003884 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	ea42 0103 	orr.w	r1, r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	430a      	orrs	r2, r1
 8003776:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003782:	f023 030f 	bic.w	r3, r3, #15
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6851      	ldr	r1, [r2, #4]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6892      	ldr	r2, [r2, #8]
 800378e:	4311      	orrs	r1, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	68d2      	ldr	r2, [r2, #12]
 8003794:	4311      	orrs	r1, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6992      	ldr	r2, [r2, #24]
 800379a:	430a      	orrs	r2, r1
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037a6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d161      	bne.n	8003874 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a38      	ldr	r2, [pc, #224]	; (8003894 <HAL_I2S_Init+0x274>)
 80037b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a37      	ldr	r2, [pc, #220]	; (8003898 <HAL_I2S_Init+0x278>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d101      	bne.n	80037c4 <HAL_I2S_Init+0x1a4>
 80037c0:	4b36      	ldr	r3, [pc, #216]	; (800389c <HAL_I2S_Init+0x27c>)
 80037c2:	e001      	b.n	80037c8 <HAL_I2S_Init+0x1a8>
 80037c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	4932      	ldr	r1, [pc, #200]	; (8003898 <HAL_I2S_Init+0x278>)
 80037d0:	428a      	cmp	r2, r1
 80037d2:	d101      	bne.n	80037d8 <HAL_I2S_Init+0x1b8>
 80037d4:	4a31      	ldr	r2, [pc, #196]	; (800389c <HAL_I2S_Init+0x27c>)
 80037d6:	e001      	b.n	80037dc <HAL_I2S_Init+0x1bc>
 80037d8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80037dc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037e0:	f023 030f 	bic.w	r3, r3, #15
 80037e4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a2b      	ldr	r2, [pc, #172]	; (8003898 <HAL_I2S_Init+0x278>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d101      	bne.n	80037f4 <HAL_I2S_Init+0x1d4>
 80037f0:	4b2a      	ldr	r3, [pc, #168]	; (800389c <HAL_I2S_Init+0x27c>)
 80037f2:	e001      	b.n	80037f8 <HAL_I2S_Init+0x1d8>
 80037f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f8:	2202      	movs	r2, #2
 80037fa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a25      	ldr	r2, [pc, #148]	; (8003898 <HAL_I2S_Init+0x278>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d101      	bne.n	800380a <HAL_I2S_Init+0x1ea>
 8003806:	4b25      	ldr	r3, [pc, #148]	; (800389c <HAL_I2S_Init+0x27c>)
 8003808:	e001      	b.n	800380e <HAL_I2S_Init+0x1ee>
 800380a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800381a:	d003      	beq.n	8003824 <HAL_I2S_Init+0x204>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d103      	bne.n	800382c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	e001      	b.n	8003830 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800383a:	4313      	orrs	r3, r2
 800383c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003844:	4313      	orrs	r3, r2
 8003846:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800384e:	4313      	orrs	r3, r2
 8003850:	b29a      	uxth	r2, r3
 8003852:	897b      	ldrh	r3, [r7, #10]
 8003854:	4313      	orrs	r3, r2
 8003856:	b29b      	uxth	r3, r3
 8003858:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800385c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a0d      	ldr	r2, [pc, #52]	; (8003898 <HAL_I2S_Init+0x278>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d101      	bne.n	800386c <HAL_I2S_Init+0x24c>
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <HAL_I2S_Init+0x27c>)
 800386a:	e001      	b.n	8003870 <HAL_I2S_Init+0x250>
 800386c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003870:	897a      	ldrh	r2, [r7, #10]
 8003872:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3720      	adds	r7, #32
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	08003997 	.word	0x08003997
 8003890:	cccccccd 	.word	0xcccccccd
 8003894:	08003aad 	.word	0x08003aad
 8003898:	40003800 	.word	0x40003800
 800389c:	40003400 	.word	0x40003400

080038a0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	881a      	ldrh	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	1c9a      	adds	r2, r3, #2
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10e      	bne.n	8003930 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003920:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff ffb8 	bl	80038a0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	b292      	uxth	r2, r2
 800394c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	1c9a      	adds	r2, r3, #2
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10e      	bne.n	800398e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800397e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff ff93 	bl	80038b4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b086      	sub	sp, #24
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d13a      	bne.n	8003a28 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d109      	bne.n	80039d0 <I2S_IRQHandler+0x3a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d102      	bne.n	80039d0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff ffb4 	bl	8003938 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d6:	2b40      	cmp	r3, #64	; 0x40
 80039d8:	d126      	bne.n	8003a28 <I2S_IRQHandler+0x92>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d11f      	bne.n	8003a28 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039f8:	2300      	movs	r3, #0
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f043 0202 	orr.w	r2, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff ff50 	bl	80038c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d136      	bne.n	8003aa2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d109      	bne.n	8003a52 <I2S_IRQHandler+0xbc>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a48:	2b80      	cmp	r3, #128	; 0x80
 8003a4a:	d102      	bne.n	8003a52 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff ff45 	bl	80038dc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d122      	bne.n	8003aa2 <I2S_IRQHandler+0x10c>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d11b      	bne.n	8003aa2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a78:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a94:	f043 0204 	orr.w	r2, r3, #4
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff ff13 	bl	80038c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4aa2      	ldr	r2, [pc, #648]	; (8003d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d101      	bne.n	8003aca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003ac6:	4ba2      	ldr	r3, [pc, #648]	; (8003d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ac8:	e001      	b.n	8003ace <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003aca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a9b      	ldr	r2, [pc, #620]	; (8003d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d101      	bne.n	8003ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ae4:	4b9a      	ldr	r3, [pc, #616]	; (8003d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ae6:	e001      	b.n	8003aec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ae8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af8:	d004      	beq.n	8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f040 8099 	bne.w	8003c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d107      	bne.n	8003b1e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f925 	bl	8003d68 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d107      	bne.n	8003b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f9c8 	bl	8003ec8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3e:	2b40      	cmp	r3, #64	; 0x40
 8003b40:	d13a      	bne.n	8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d035      	beq.n	8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a7e      	ldr	r2, [pc, #504]	; (8003d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d101      	bne.n	8003b5a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003b56:	4b7e      	ldr	r3, [pc, #504]	; (8003d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b58:	e001      	b.n	8003b5e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003b5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4979      	ldr	r1, [pc, #484]	; (8003d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b66:	428b      	cmp	r3, r1
 8003b68:	d101      	bne.n	8003b6e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003b6a:	4b79      	ldr	r3, [pc, #484]	; (8003d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b6c:	e001      	b.n	8003b72 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003b6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b76:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b86:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	f043 0202 	orr.w	r2, r3, #2
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff fe88 	bl	80038c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	f040 80be 	bne.w	8003d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 80b8 	beq.w	8003d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bde:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a59      	ldr	r2, [pc, #356]	; (8003d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d101      	bne.n	8003bee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003bea:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bec:	e001      	b.n	8003bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003bee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4954      	ldr	r1, [pc, #336]	; (8003d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bfa:	428b      	cmp	r3, r1
 8003bfc:	d101      	bne.n	8003c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003bfe:	4b54      	ldr	r3, [pc, #336]	; (8003d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c00:	e001      	b.n	8003c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003c02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c0a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	f043 0204 	orr.w	r2, r3, #4
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff fe4a 	bl	80038c8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c34:	e084      	b.n	8003d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d107      	bne.n	8003c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f8be 	bl	8003dcc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d107      	bne.n	8003c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f8fd 	bl	8003e64 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d12f      	bne.n	8003cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d02a      	beq.n	8003cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c8c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a2e      	ldr	r2, [pc, #184]	; (8003d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d101      	bne.n	8003c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003c98:	4b2d      	ldr	r3, [pc, #180]	; (8003d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c9a:	e001      	b.n	8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003c9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4929      	ldr	r1, [pc, #164]	; (8003d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ca8:	428b      	cmp	r3, r1
 8003caa:	d101      	bne.n	8003cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003cac:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cae:	e001      	b.n	8003cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003cb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cb8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	f043 0202 	orr.w	r2, r3, #2
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff fdfa 	bl	80038c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d131      	bne.n	8003d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d02c      	beq.n	8003d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a17      	ldr	r2, [pc, #92]	; (8003d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d101      	bne.n	8003cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003cf2:	4b17      	ldr	r3, [pc, #92]	; (8003d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cf4:	e001      	b.n	8003cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003cf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4912      	ldr	r1, [pc, #72]	; (8003d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d02:	428b      	cmp	r3, r1
 8003d04:	d101      	bne.n	8003d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003d06:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d08:	e001      	b.n	8003d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003d0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d12:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d22:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d30:	f043 0204 	orr.w	r2, r3, #4
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff fdc5 	bl	80038c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d3e:	e000      	b.n	8003d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d40:	bf00      	nop
}
 8003d42:	bf00      	nop
 8003d44:	3720      	adds	r7, #32
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40003800 	.word	0x40003800
 8003d50:	40003400 	.word	0x40003400

08003d54 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	1c99      	adds	r1, r3, #2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6251      	str	r1, [r2, #36]	; 0x24
 8003d7a:	881a      	ldrh	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d113      	bne.n	8003dc2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003da8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d106      	bne.n	8003dc2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff ffc9 	bl	8003d54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	1c99      	adds	r1, r3, #2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6251      	str	r1, [r2, #36]	; 0x24
 8003dde:	8819      	ldrh	r1, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a1d      	ldr	r2, [pc, #116]	; (8003e5c <I2SEx_TxISR_I2SExt+0x90>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d101      	bne.n	8003dee <I2SEx_TxISR_I2SExt+0x22>
 8003dea:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <I2SEx_TxISR_I2SExt+0x94>)
 8003dec:	e001      	b.n	8003df2 <I2SEx_TxISR_I2SExt+0x26>
 8003dee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003df2:	460a      	mov	r2, r1
 8003df4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d121      	bne.n	8003e52 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a12      	ldr	r2, [pc, #72]	; (8003e5c <I2SEx_TxISR_I2SExt+0x90>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d101      	bne.n	8003e1c <I2SEx_TxISR_I2SExt+0x50>
 8003e18:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <I2SEx_TxISR_I2SExt+0x94>)
 8003e1a:	e001      	b.n	8003e20 <I2SEx_TxISR_I2SExt+0x54>
 8003e1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	490d      	ldr	r1, [pc, #52]	; (8003e5c <I2SEx_TxISR_I2SExt+0x90>)
 8003e28:	428b      	cmp	r3, r1
 8003e2a:	d101      	bne.n	8003e30 <I2SEx_TxISR_I2SExt+0x64>
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <I2SEx_TxISR_I2SExt+0x94>)
 8003e2e:	e001      	b.n	8003e34 <I2SEx_TxISR_I2SExt+0x68>
 8003e30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e38:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ff81 	bl	8003d54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40003800 	.word	0x40003800
 8003e60:	40003400 	.word	0x40003400

08003e64 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68d8      	ldr	r0, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	1c99      	adds	r1, r3, #2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e7c:	b282      	uxth	r2, r0
 8003e7e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d113      	bne.n	8003ec0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ea6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff ff4a 	bl	8003d54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a20      	ldr	r2, [pc, #128]	; (8003f58 <I2SEx_RxISR_I2SExt+0x90>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d101      	bne.n	8003ede <I2SEx_RxISR_I2SExt+0x16>
 8003eda:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <I2SEx_RxISR_I2SExt+0x94>)
 8003edc:	e001      	b.n	8003ee2 <I2SEx_RxISR_I2SExt+0x1a>
 8003ede:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ee2:	68d8      	ldr	r0, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	1c99      	adds	r1, r3, #2
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003eee:	b282      	uxth	r2, r0
 8003ef0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d121      	bne.n	8003f4e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <I2SEx_RxISR_I2SExt+0x90>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d101      	bne.n	8003f18 <I2SEx_RxISR_I2SExt+0x50>
 8003f14:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <I2SEx_RxISR_I2SExt+0x94>)
 8003f16:	e001      	b.n	8003f1c <I2SEx_RxISR_I2SExt+0x54>
 8003f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	490d      	ldr	r1, [pc, #52]	; (8003f58 <I2SEx_RxISR_I2SExt+0x90>)
 8003f24:	428b      	cmp	r3, r1
 8003f26:	d101      	bne.n	8003f2c <I2SEx_RxISR_I2SExt+0x64>
 8003f28:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <I2SEx_RxISR_I2SExt+0x94>)
 8003f2a:	e001      	b.n	8003f30 <I2SEx_RxISR_I2SExt+0x68>
 8003f2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f34:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d106      	bne.n	8003f4e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ff03 	bl	8003d54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40003800 	.word	0x40003800
 8003f5c:	40003400 	.word	0x40003400

08003f60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e264      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d075      	beq.n	800406a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f7e:	4ba3      	ldr	r3, [pc, #652]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d00c      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8a:	4ba0      	ldr	r3, [pc, #640]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d112      	bne.n	8003fbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f96:	4b9d      	ldr	r3, [pc, #628]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa2:	d10b      	bne.n	8003fbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa4:	4b99      	ldr	r3, [pc, #612]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d05b      	beq.n	8004068 <HAL_RCC_OscConfig+0x108>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d157      	bne.n	8004068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e23f      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc4:	d106      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x74>
 8003fc6:	4b91      	ldr	r3, [pc, #580]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a90      	ldr	r2, [pc, #576]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e01d      	b.n	8004010 <HAL_RCC_OscConfig+0xb0>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x98>
 8003fde:	4b8b      	ldr	r3, [pc, #556]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a8a      	ldr	r2, [pc, #552]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	4b88      	ldr	r3, [pc, #544]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a87      	ldr	r2, [pc, #540]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e00b      	b.n	8004010 <HAL_RCC_OscConfig+0xb0>
 8003ff8:	4b84      	ldr	r3, [pc, #528]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a83      	ldr	r2, [pc, #524]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8003ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	4b81      	ldr	r3, [pc, #516]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a80      	ldr	r2, [pc, #512]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 800400a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800400e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d013      	beq.n	8004040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fd f91a 	bl	8001250 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004020:	f7fd f916 	bl	8001250 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b64      	cmp	r3, #100	; 0x64
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e204      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	4b76      	ldr	r3, [pc, #472]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0xc0>
 800403e:	e014      	b.n	800406a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004040:	f7fd f906 	bl	8001250 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004048:	f7fd f902 	bl	8001250 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b64      	cmp	r3, #100	; 0x64
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e1f0      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405a:	4b6c      	ldr	r3, [pc, #432]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0xe8>
 8004066:	e000      	b.n	800406a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d063      	beq.n	800413e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004076:	4b65      	ldr	r3, [pc, #404]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004082:	4b62      	ldr	r3, [pc, #392]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800408a:	2b08      	cmp	r3, #8
 800408c:	d11c      	bne.n	80040c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408e:	4b5f      	ldr	r3, [pc, #380]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d116      	bne.n	80040c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409a:	4b5c      	ldr	r3, [pc, #368]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_RCC_OscConfig+0x152>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d001      	beq.n	80040b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e1c4      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b2:	4b56      	ldr	r3, [pc, #344]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4952      	ldr	r1, [pc, #328]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c6:	e03a      	b.n	800413e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d020      	beq.n	8004112 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d0:	4b4f      	ldr	r3, [pc, #316]	; (8004210 <HAL_RCC_OscConfig+0x2b0>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d6:	f7fd f8bb 	bl	8001250 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040de:	f7fd f8b7 	bl	8001250 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e1a5      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f0:	4b46      	ldr	r3, [pc, #280]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0f0      	beq.n	80040de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fc:	4b43      	ldr	r3, [pc, #268]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	4940      	ldr	r1, [pc, #256]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]
 8004110:	e015      	b.n	800413e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004112:	4b3f      	ldr	r3, [pc, #252]	; (8004210 <HAL_RCC_OscConfig+0x2b0>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004118:	f7fd f89a 	bl	8001250 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004120:	f7fd f896 	bl	8001250 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e184      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004132:	4b36      	ldr	r3, [pc, #216]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d030      	beq.n	80041ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d016      	beq.n	8004180 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004152:	4b30      	ldr	r3, [pc, #192]	; (8004214 <HAL_RCC_OscConfig+0x2b4>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004158:	f7fd f87a 	bl	8001250 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004160:	f7fd f876 	bl	8001250 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e164      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004172:	4b26      	ldr	r3, [pc, #152]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 8004174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x200>
 800417e:	e015      	b.n	80041ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004180:	4b24      	ldr	r3, [pc, #144]	; (8004214 <HAL_RCC_OscConfig+0x2b4>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004186:	f7fd f863 	bl	8001250 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800418e:	f7fd f85f 	bl	8001250 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e14d      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a0:	4b1a      	ldr	r3, [pc, #104]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 80041a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f0      	bne.n	800418e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 80a0 	beq.w	80042fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041be:	4b13      	ldr	r3, [pc, #76]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10f      	bne.n	80041ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	4b0f      	ldr	r3, [pc, #60]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	4a0e      	ldr	r2, [pc, #56]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d8:	6413      	str	r3, [r2, #64]	; 0x40
 80041da:	4b0c      	ldr	r3, [pc, #48]	; (800420c <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ea:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_RCC_OscConfig+0x2b8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d121      	bne.n	800423a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f6:	4b08      	ldr	r3, [pc, #32]	; (8004218 <HAL_RCC_OscConfig+0x2b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a07      	ldr	r2, [pc, #28]	; (8004218 <HAL_RCC_OscConfig+0x2b8>)
 80041fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004202:	f7fd f825 	bl	8001250 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004208:	e011      	b.n	800422e <HAL_RCC_OscConfig+0x2ce>
 800420a:	bf00      	nop
 800420c:	40023800 	.word	0x40023800
 8004210:	42470000 	.word	0x42470000
 8004214:	42470e80 	.word	0x42470e80
 8004218:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421c:	f7fd f818 	bl	8001250 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e106      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422e:	4b85      	ldr	r3, [pc, #532]	; (8004444 <HAL_RCC_OscConfig+0x4e4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d106      	bne.n	8004250 <HAL_RCC_OscConfig+0x2f0>
 8004242:	4b81      	ldr	r3, [pc, #516]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	4a80      	ldr	r2, [pc, #512]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	6713      	str	r3, [r2, #112]	; 0x70
 800424e:	e01c      	b.n	800428a <HAL_RCC_OscConfig+0x32a>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b05      	cmp	r3, #5
 8004256:	d10c      	bne.n	8004272 <HAL_RCC_OscConfig+0x312>
 8004258:	4b7b      	ldr	r3, [pc, #492]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	4a7a      	ldr	r2, [pc, #488]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800425e:	f043 0304 	orr.w	r3, r3, #4
 8004262:	6713      	str	r3, [r2, #112]	; 0x70
 8004264:	4b78      	ldr	r3, [pc, #480]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	4a77      	ldr	r2, [pc, #476]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	6713      	str	r3, [r2, #112]	; 0x70
 8004270:	e00b      	b.n	800428a <HAL_RCC_OscConfig+0x32a>
 8004272:	4b75      	ldr	r3, [pc, #468]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	4a74      	ldr	r2, [pc, #464]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004278:	f023 0301 	bic.w	r3, r3, #1
 800427c:	6713      	str	r3, [r2, #112]	; 0x70
 800427e:	4b72      	ldr	r3, [pc, #456]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	4a71      	ldr	r2, [pc, #452]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004284:	f023 0304 	bic.w	r3, r3, #4
 8004288:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d015      	beq.n	80042be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004292:	f7fc ffdd 	bl	8001250 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004298:	e00a      	b.n	80042b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800429a:	f7fc ffd9 	bl	8001250 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e0c5      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b0:	4b65      	ldr	r3, [pc, #404]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80042b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0ee      	beq.n	800429a <HAL_RCC_OscConfig+0x33a>
 80042bc:	e014      	b.n	80042e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042be:	f7fc ffc7 	bl	8001250 <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c4:	e00a      	b.n	80042dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c6:	f7fc ffc3 	bl	8001250 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e0af      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042dc:	4b5a      	ldr	r3, [pc, #360]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1ee      	bne.n	80042c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d105      	bne.n	80042fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ee:	4b56      	ldr	r3, [pc, #344]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	4a55      	ldr	r2, [pc, #340]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80042f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 809b 	beq.w	800443a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004304:	4b50      	ldr	r3, [pc, #320]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b08      	cmp	r3, #8
 800430e:	d05c      	beq.n	80043ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d141      	bne.n	800439c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004318:	4b4c      	ldr	r3, [pc, #304]	; (800444c <HAL_RCC_OscConfig+0x4ec>)
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431e:	f7fc ff97 	bl	8001250 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004326:	f7fc ff93 	bl	8001250 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e081      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004338:	4b43      	ldr	r3, [pc, #268]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f0      	bne.n	8004326 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	69da      	ldr	r2, [r3, #28]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	019b      	lsls	r3, r3, #6
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435a:	085b      	lsrs	r3, r3, #1
 800435c:	3b01      	subs	r3, #1
 800435e:	041b      	lsls	r3, r3, #16
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004366:	061b      	lsls	r3, r3, #24
 8004368:	4937      	ldr	r1, [pc, #220]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800436a:	4313      	orrs	r3, r2
 800436c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800436e:	4b37      	ldr	r3, [pc, #220]	; (800444c <HAL_RCC_OscConfig+0x4ec>)
 8004370:	2201      	movs	r2, #1
 8004372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fc ff6c 	bl	8001250 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437c:	f7fc ff68 	bl	8001250 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e056      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438e:	4b2e      	ldr	r3, [pc, #184]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0x41c>
 800439a:	e04e      	b.n	800443a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439c:	4b2b      	ldr	r3, [pc, #172]	; (800444c <HAL_RCC_OscConfig+0x4ec>)
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a2:	f7fc ff55 	bl	8001250 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043aa:	f7fc ff51 	bl	8001250 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e03f      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043bc:	4b22      	ldr	r3, [pc, #136]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f0      	bne.n	80043aa <HAL_RCC_OscConfig+0x44a>
 80043c8:	e037      	b.n	800443a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e032      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043d6:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d028      	beq.n	8004436 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d121      	bne.n	8004436 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d11a      	bne.n	8004436 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004406:	4013      	ands	r3, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800440c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800440e:	4293      	cmp	r3, r2
 8004410:	d111      	bne.n	8004436 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441c:	085b      	lsrs	r3, r3, #1
 800441e:	3b01      	subs	r3, #1
 8004420:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004422:	429a      	cmp	r2, r3
 8004424:	d107      	bne.n	8004436 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d001      	beq.n	800443a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40007000 	.word	0x40007000
 8004448:	40023800 	.word	0x40023800
 800444c:	42470060 	.word	0x42470060

08004450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0cc      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004464:	4b68      	ldr	r3, [pc, #416]	; (8004608 <HAL_RCC_ClockConfig+0x1b8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d90c      	bls.n	800448c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004472:	4b65      	ldr	r3, [pc, #404]	; (8004608 <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447a:	4b63      	ldr	r3, [pc, #396]	; (8004608 <HAL_RCC_ClockConfig+0x1b8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0b8      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d020      	beq.n	80044da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a4:	4b59      	ldr	r3, [pc, #356]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	4a58      	ldr	r2, [pc, #352]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044bc:	4b53      	ldr	r3, [pc, #332]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	4a52      	ldr	r2, [pc, #328]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c8:	4b50      	ldr	r3, [pc, #320]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	494d      	ldr	r1, [pc, #308]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d044      	beq.n	8004570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d107      	bne.n	80044fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ee:	4b47      	ldr	r3, [pc, #284]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d119      	bne.n	800452e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e07f      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d003      	beq.n	800450e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450a:	2b03      	cmp	r3, #3
 800450c:	d107      	bne.n	800451e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450e:	4b3f      	ldr	r3, [pc, #252]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e06f      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451e:	4b3b      	ldr	r3, [pc, #236]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e067      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800452e:	4b37      	ldr	r3, [pc, #220]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f023 0203 	bic.w	r2, r3, #3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	4934      	ldr	r1, [pc, #208]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	4313      	orrs	r3, r2
 800453e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004540:	f7fc fe86 	bl	8001250 <HAL_GetTick>
 8004544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004546:	e00a      	b.n	800455e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004548:	f7fc fe82 	bl	8001250 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	; 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e04f      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455e:	4b2b      	ldr	r3, [pc, #172]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 020c 	and.w	r2, r3, #12
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	429a      	cmp	r2, r3
 800456e:	d1eb      	bne.n	8004548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004570:	4b25      	ldr	r3, [pc, #148]	; (8004608 <HAL_RCC_ClockConfig+0x1b8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d20c      	bcs.n	8004598 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b22      	ldr	r3, [pc, #136]	; (8004608 <HAL_RCC_ClockConfig+0x1b8>)
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b20      	ldr	r3, [pc, #128]	; (8004608 <HAL_RCC_ClockConfig+0x1b8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e032      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d008      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a4:	4b19      	ldr	r3, [pc, #100]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4916      	ldr	r1, [pc, #88]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045c2:	4b12      	ldr	r3, [pc, #72]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	490e      	ldr	r1, [pc, #56]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045d6:	f000 f821 	bl	800461c <HAL_RCC_GetSysClockFreq>
 80045da:	4602      	mov	r2, r0
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	091b      	lsrs	r3, r3, #4
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	490a      	ldr	r1, [pc, #40]	; (8004610 <HAL_RCC_ClockConfig+0x1c0>)
 80045e8:	5ccb      	ldrb	r3, [r1, r3]
 80045ea:	fa22 f303 	lsr.w	r3, r2, r3
 80045ee:	4a09      	ldr	r2, [pc, #36]	; (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 80045f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045f2:	4b09      	ldr	r3, [pc, #36]	; (8004618 <HAL_RCC_ClockConfig+0x1c8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fc fde6 	bl	80011c8 <HAL_InitTick>

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40023c00 	.word	0x40023c00
 800460c:	40023800 	.word	0x40023800
 8004610:	08008ab0 	.word	0x08008ab0
 8004614:	20000000 	.word	0x20000000
 8004618:	20000004 	.word	0x20000004

0800461c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800461c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004620:	b084      	sub	sp, #16
 8004622:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	607b      	str	r3, [r7, #4]
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	2300      	movs	r3, #0
 800462e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004634:	4b67      	ldr	r3, [pc, #412]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 030c 	and.w	r3, r3, #12
 800463c:	2b08      	cmp	r3, #8
 800463e:	d00d      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0x40>
 8004640:	2b08      	cmp	r3, #8
 8004642:	f200 80bd 	bhi.w	80047c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_RCC_GetSysClockFreq+0x34>
 800464a:	2b04      	cmp	r3, #4
 800464c:	d003      	beq.n	8004656 <HAL_RCC_GetSysClockFreq+0x3a>
 800464e:	e0b7      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004650:	4b61      	ldr	r3, [pc, #388]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004652:	60bb      	str	r3, [r7, #8]
       break;
 8004654:	e0b7      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004656:	4b61      	ldr	r3, [pc, #388]	; (80047dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004658:	60bb      	str	r3, [r7, #8]
      break;
 800465a:	e0b4      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800465c:	4b5d      	ldr	r3, [pc, #372]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004664:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004666:	4b5b      	ldr	r3, [pc, #364]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d04d      	beq.n	800470e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004672:	4b58      	ldr	r3, [pc, #352]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	099b      	lsrs	r3, r3, #6
 8004678:	461a      	mov	r2, r3
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004682:	f04f 0100 	mov.w	r1, #0
 8004686:	ea02 0800 	and.w	r8, r2, r0
 800468a:	ea03 0901 	and.w	r9, r3, r1
 800468e:	4640      	mov	r0, r8
 8004690:	4649      	mov	r1, r9
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	014b      	lsls	r3, r1, #5
 800469c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046a0:	0142      	lsls	r2, r0, #5
 80046a2:	4610      	mov	r0, r2
 80046a4:	4619      	mov	r1, r3
 80046a6:	ebb0 0008 	subs.w	r0, r0, r8
 80046aa:	eb61 0109 	sbc.w	r1, r1, r9
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	018b      	lsls	r3, r1, #6
 80046b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046bc:	0182      	lsls	r2, r0, #6
 80046be:	1a12      	subs	r2, r2, r0
 80046c0:	eb63 0301 	sbc.w	r3, r3, r1
 80046c4:	f04f 0000 	mov.w	r0, #0
 80046c8:	f04f 0100 	mov.w	r1, #0
 80046cc:	00d9      	lsls	r1, r3, #3
 80046ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046d2:	00d0      	lsls	r0, r2, #3
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	eb12 0208 	adds.w	r2, r2, r8
 80046dc:	eb43 0309 	adc.w	r3, r3, r9
 80046e0:	f04f 0000 	mov.w	r0, #0
 80046e4:	f04f 0100 	mov.w	r1, #0
 80046e8:	0259      	lsls	r1, r3, #9
 80046ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80046ee:	0250      	lsls	r0, r2, #9
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4610      	mov	r0, r2
 80046f6:	4619      	mov	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	461a      	mov	r2, r3
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	f7fb fd62 	bl	80001c8 <__aeabi_uldivmod>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4613      	mov	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e04a      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470e:	4b31      	ldr	r3, [pc, #196]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	099b      	lsrs	r3, r3, #6
 8004714:	461a      	mov	r2, r3
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800471e:	f04f 0100 	mov.w	r1, #0
 8004722:	ea02 0400 	and.w	r4, r2, r0
 8004726:	ea03 0501 	and.w	r5, r3, r1
 800472a:	4620      	mov	r0, r4
 800472c:	4629      	mov	r1, r5
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	f04f 0300 	mov.w	r3, #0
 8004736:	014b      	lsls	r3, r1, #5
 8004738:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800473c:	0142      	lsls	r2, r0, #5
 800473e:	4610      	mov	r0, r2
 8004740:	4619      	mov	r1, r3
 8004742:	1b00      	subs	r0, r0, r4
 8004744:	eb61 0105 	sbc.w	r1, r1, r5
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	018b      	lsls	r3, r1, #6
 8004752:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004756:	0182      	lsls	r2, r0, #6
 8004758:	1a12      	subs	r2, r2, r0
 800475a:	eb63 0301 	sbc.w	r3, r3, r1
 800475e:	f04f 0000 	mov.w	r0, #0
 8004762:	f04f 0100 	mov.w	r1, #0
 8004766:	00d9      	lsls	r1, r3, #3
 8004768:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800476c:	00d0      	lsls	r0, r2, #3
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	1912      	adds	r2, r2, r4
 8004774:	eb45 0303 	adc.w	r3, r5, r3
 8004778:	f04f 0000 	mov.w	r0, #0
 800477c:	f04f 0100 	mov.w	r1, #0
 8004780:	0299      	lsls	r1, r3, #10
 8004782:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004786:	0290      	lsls	r0, r2, #10
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4610      	mov	r0, r2
 800478e:	4619      	mov	r1, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	461a      	mov	r2, r3
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	f7fb fd16 	bl	80001c8 <__aeabi_uldivmod>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4613      	mov	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	3301      	adds	r3, #1
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	60bb      	str	r3, [r7, #8]
      break;
 80047be:	e002      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047c2:	60bb      	str	r3, [r7, #8]
      break;
 80047c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047c6:	68bb      	ldr	r3, [r7, #8]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80047d2:	bf00      	nop
 80047d4:	40023800 	.word	0x40023800
 80047d8:	00f42400 	.word	0x00f42400
 80047dc:	007a1200 	.word	0x007a1200

080047e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e4:	4b03      	ldr	r3, [pc, #12]	; (80047f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047e6:	681b      	ldr	r3, [r3, #0]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20000000 	.word	0x20000000

080047f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047fc:	f7ff fff0 	bl	80047e0 <HAL_RCC_GetHCLKFreq>
 8004800:	4602      	mov	r2, r0
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	0a9b      	lsrs	r3, r3, #10
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	4903      	ldr	r1, [pc, #12]	; (800481c <HAL_RCC_GetPCLK1Freq+0x24>)
 800480e:	5ccb      	ldrb	r3, [r1, r3]
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004814:	4618      	mov	r0, r3
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40023800 	.word	0x40023800
 800481c:	08008ac0 	.word	0x08008ac0

08004820 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d105      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004844:	2b00      	cmp	r3, #0
 8004846:	d035      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004848:	4b62      	ldr	r3, [pc, #392]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800484e:	f7fc fcff 	bl	8001250 <HAL_GetTick>
 8004852:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004854:	e008      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004856:	f7fc fcfb 	bl	8001250 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e0b0      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004868:	4b5b      	ldr	r3, [pc, #364]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1f0      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	019a      	lsls	r2, r3, #6
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	071b      	lsls	r3, r3, #28
 8004880:	4955      	ldr	r1, [pc, #340]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004888:	4b52      	ldr	r3, [pc, #328]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800488a:	2201      	movs	r2, #1
 800488c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800488e:	f7fc fcdf 	bl	8001250 <HAL_GetTick>
 8004892:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004894:	e008      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004896:	f7fc fcdb 	bl	8001250 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e090      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048a8:	4b4b      	ldr	r3, [pc, #300]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8083 	beq.w	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	4b44      	ldr	r3, [pc, #272]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	4a43      	ldr	r2, [pc, #268]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d0:	6413      	str	r3, [r2, #64]	; 0x40
 80048d2:	4b41      	ldr	r3, [pc, #260]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80048de:	4b3f      	ldr	r3, [pc, #252]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a3e      	ldr	r2, [pc, #248]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048ea:	f7fc fcb1 	bl	8001250 <HAL_GetTick>
 80048ee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80048f0:	e008      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80048f2:	f7fc fcad 	bl	8001250 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e062      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004904:	4b35      	ldr	r3, [pc, #212]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004910:	4b31      	ldr	r3, [pc, #196]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004918:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d02f      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	429a      	cmp	r2, r3
 800492c:	d028      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800492e:	4b2a      	ldr	r3, [pc, #168]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004936:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004938:	4b29      	ldr	r3, [pc, #164]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800493a:	2201      	movs	r2, #1
 800493c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800493e:	4b28      	ldr	r3, [pc, #160]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004944:	4a24      	ldr	r2, [pc, #144]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800494a:	4b23      	ldr	r3, [pc, #140]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800494c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b01      	cmp	r3, #1
 8004954:	d114      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004956:	f7fc fc7b 	bl	8001250 <HAL_GetTick>
 800495a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800495c:	e00a      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800495e:	f7fc fc77 	bl	8001250 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f241 3288 	movw	r2, #5000	; 0x1388
 800496c:	4293      	cmp	r3, r2
 800496e:	d901      	bls.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e02a      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004974:	4b18      	ldr	r3, [pc, #96]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0ee      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800498c:	d10d      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800498e:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800499e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a2:	490d      	ldr	r1, [pc, #52]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	608b      	str	r3, [r1, #8]
 80049a8:	e005      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	4a0a      	ldr	r2, [pc, #40]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049b0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049b4:	6093      	str	r3, [r2, #8]
 80049b6:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c2:	4905      	ldr	r1, [pc, #20]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	42470068 	.word	0x42470068
 80049d8:	40023800 	.word	0x40023800
 80049dc:	40007000 	.word	0x40007000
 80049e0:	42470e40 	.word	0x42470e40

080049e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d13e      	bne.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004a02:	4b23      	ldr	r3, [pc, #140]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d005      	beq.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d12f      	bne.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a18:	4b1e      	ldr	r3, [pc, #120]	; (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a1a:	617b      	str	r3, [r7, #20]
          break;
 8004a1c:	e02f      	b.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a1e:	4b1c      	ldr	r3, [pc, #112]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a2a:	d108      	bne.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a2c:	4b18      	ldr	r3, [pc, #96]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a34:	4a18      	ldr	r2, [pc, #96]	; (8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	e007      	b.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a3e:	4b14      	ldr	r3, [pc, #80]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a46:	4a15      	ldr	r2, [pc, #84]	; (8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004a4e:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a54:	099b      	lsrs	r3, r3, #6
 8004a56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	fb02 f303 	mul.w	r3, r2, r3
 8004a60:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004a62:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a68:	0f1b      	lsrs	r3, r3, #28
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a74:	617b      	str	r3, [r7, #20]
          break;
 8004a76:	e002      	b.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]
          break;
 8004a7c:	bf00      	nop
        }
      }
      break;
 8004a7e:	bf00      	nop
    }
  }
  return frequency;
 8004a80:	697b      	ldr	r3, [r7, #20]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40023800 	.word	0x40023800
 8004a94:	00bb8000 	.word	0x00bb8000
 8004a98:	007a1200 	.word	0x007a1200
 8004a9c:	00f42400 	.word	0x00f42400

08004aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e07b      	b.n	8004baa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d108      	bne.n	8004acc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ac2:	d009      	beq.n	8004ad8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	61da      	str	r2, [r3, #28]
 8004aca:	e005      	b.n	8004ad8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fc f9a0 	bl	8000e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5c:	ea42 0103 	orr.w	r1, r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	0c1b      	lsrs	r3, r3, #16
 8004b76:	f003 0104 	and.w	r1, r3, #4
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	f003 0210 	and.w	r2, r3, #16
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e041      	b.n	8004c48 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d106      	bne.n	8004bde <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7fc f9bd 	bl	8000f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2202      	movs	r2, #2
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3304      	adds	r3, #4
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	f000 fb3b 	bl	800526c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d001      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e04e      	b.n	8004d06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a23      	ldr	r2, [pc, #140]	; (8004d14 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d022      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0x80>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c92:	d01d      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0x80>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d018      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0x80>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1e      	ldr	r2, [pc, #120]	; (8004d1c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d013      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0x80>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a1c      	ldr	r2, [pc, #112]	; (8004d20 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00e      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0x80>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a1b      	ldr	r2, [pc, #108]	; (8004d24 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d009      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0x80>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a19      	ldr	r2, [pc, #100]	; (8004d28 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d004      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0x80>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a18      	ldr	r2, [pc, #96]	; (8004d2c <HAL_TIM_Base_Start_IT+0xdc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d111      	bne.n	8004cf4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b06      	cmp	r3, #6
 8004ce0:	d010      	beq.n	8004d04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0201 	orr.w	r2, r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf2:	e007      	b.n	8004d04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40010000 	.word	0x40010000
 8004d18:	40000400 	.word	0x40000400
 8004d1c:	40000800 	.word	0x40000800
 8004d20:	40000c00 	.word	0x40000c00
 8004d24:	40010400 	.word	0x40010400
 8004d28:	40014000 	.word	0x40014000
 8004d2c:	40001800 	.word	0x40001800

08004d30 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0201 	bic.w	r2, r2, #1
 8004d46:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6a1a      	ldr	r2, [r3, #32]
 8004d4e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d52:	4013      	ands	r3, r2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10f      	bne.n	8004d78 <HAL_TIM_Base_Stop_IT+0x48>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6a1a      	ldr	r2, [r3, #32]
 8004d5e:	f240 4344 	movw	r3, #1092	; 0x444
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d107      	bne.n	8004d78 <HAL_TIM_Base_Stop_IT+0x48>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0201 	bic.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b086      	sub	sp, #24
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e097      	b.n	8004ed2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fc f886 	bl	8000ec8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6812      	ldr	r2, [r2, #0]
 8004dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dd2:	f023 0307 	bic.w	r3, r3, #7
 8004dd6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4619      	mov	r1, r3
 8004de2:	4610      	mov	r0, r2
 8004de4:	f000 fa42 	bl	800526c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e10:	f023 0303 	bic.w	r3, r3, #3
 8004e14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	021b      	lsls	r3, r3, #8
 8004e20:	4313      	orrs	r3, r2
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004e2e:	f023 030c 	bic.w	r3, r3, #12
 8004e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	011a      	lsls	r2, r3, #4
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	031b      	lsls	r3, r3, #12
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e6c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004e74:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	4313      	orrs	r3, r2
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3718      	adds	r7, #24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eea:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ef2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004efa:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f02:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d110      	bne.n	8004f2c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d102      	bne.n	8004f16 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f10:	7b7b      	ldrb	r3, [r7, #13]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d001      	beq.n	8004f1a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e069      	b.n	8004fee <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2202      	movs	r2, #2
 8004f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f2a:	e031      	b.n	8004f90 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d110      	bne.n	8004f54 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f32:	7bbb      	ldrb	r3, [r7, #14]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d102      	bne.n	8004f3e <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f38:	7b3b      	ldrb	r3, [r7, #12]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d001      	beq.n	8004f42 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e055      	b.n	8004fee <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2202      	movs	r2, #2
 8004f46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f52:	e01d      	b.n	8004f90 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d108      	bne.n	8004f6c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f5a:	7bbb      	ldrb	r3, [r7, #14]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d105      	bne.n	8004f6c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f60:	7b7b      	ldrb	r3, [r7, #13]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d102      	bne.n	8004f6c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f66:	7b3b      	ldrb	r3, [r7, #12]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d001      	beq.n	8004f70 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e03e      	b.n	8004fee <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_TIM_Encoder_Start+0xc4>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d008      	beq.n	8004fae <HAL_TIM_Encoder_Start+0xd4>
 8004f9c:	e00f      	b.n	8004fbe <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fa00 	bl	80053ac <TIM_CCxChannelCmd>
      break;
 8004fac:	e016      	b.n	8004fdc <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	2104      	movs	r1, #4
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 f9f8 	bl	80053ac <TIM_CCxChannelCmd>
      break;
 8004fbc:	e00e      	b.n	8004fdc <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 f9f0 	bl	80053ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	2104      	movs	r1, #4
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 f9e9 	bl	80053ac <TIM_CCxChannelCmd>
      break;
 8004fda:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b082      	sub	sp, #8
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b02      	cmp	r3, #2
 800500a:	d122      	bne.n	8005052 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b02      	cmp	r3, #2
 8005018:	d11b      	bne.n	8005052 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f06f 0202 	mvn.w	r2, #2
 8005022:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f003 0303 	and.w	r3, r3, #3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f8f8 	bl	800522e <HAL_TIM_IC_CaptureCallback>
 800503e:	e005      	b.n	800504c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f8ea 	bl	800521a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f8fb 	bl	8005242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b04      	cmp	r3, #4
 800505e:	d122      	bne.n	80050a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	2b04      	cmp	r3, #4
 800506c:	d11b      	bne.n	80050a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f06f 0204 	mvn.w	r2, #4
 8005076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f8ce 	bl	800522e <HAL_TIM_IC_CaptureCallback>
 8005092:	e005      	b.n	80050a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f8c0 	bl	800521a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f8d1 	bl	8005242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d122      	bne.n	80050fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d11b      	bne.n	80050fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f06f 0208 	mvn.w	r2, #8
 80050ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2204      	movs	r2, #4
 80050d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f8a4 	bl	800522e <HAL_TIM_IC_CaptureCallback>
 80050e6:	e005      	b.n	80050f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f896 	bl	800521a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f8a7 	bl	8005242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b10      	cmp	r3, #16
 8005106:	d122      	bne.n	800514e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	2b10      	cmp	r3, #16
 8005114:	d11b      	bne.n	800514e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f06f 0210 	mvn.w	r2, #16
 800511e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2208      	movs	r2, #8
 8005124:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f87a 	bl	800522e <HAL_TIM_IC_CaptureCallback>
 800513a:	e005      	b.n	8005148 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f86c 	bl	800521a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f87d 	bl	8005242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b01      	cmp	r3, #1
 800515a:	d10e      	bne.n	800517a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b01      	cmp	r3, #1
 8005168:	d107      	bne.n	800517a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f06f 0201 	mvn.w	r2, #1
 8005172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f846 	bl	8005206 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005184:	2b80      	cmp	r3, #128	; 0x80
 8005186:	d10e      	bne.n	80051a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005192:	2b80      	cmp	r3, #128	; 0x80
 8005194:	d107      	bne.n	80051a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800519e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f9af 	bl	8005504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b0:	2b40      	cmp	r3, #64	; 0x40
 80051b2:	d10e      	bne.n	80051d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051be:	2b40      	cmp	r3, #64	; 0x40
 80051c0:	d107      	bne.n	80051d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f842 	bl	8005256 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b20      	cmp	r3, #32
 80051de:	d10e      	bne.n	80051fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	d107      	bne.n	80051fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f06f 0220 	mvn.w	r2, #32
 80051f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f979 	bl	80054f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051fe:	bf00      	nop
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
	...

0800526c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a40      	ldr	r2, [pc, #256]	; (8005380 <TIM_Base_SetConfig+0x114>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d013      	beq.n	80052ac <TIM_Base_SetConfig+0x40>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528a:	d00f      	beq.n	80052ac <TIM_Base_SetConfig+0x40>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a3d      	ldr	r2, [pc, #244]	; (8005384 <TIM_Base_SetConfig+0x118>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00b      	beq.n	80052ac <TIM_Base_SetConfig+0x40>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a3c      	ldr	r2, [pc, #240]	; (8005388 <TIM_Base_SetConfig+0x11c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d007      	beq.n	80052ac <TIM_Base_SetConfig+0x40>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a3b      	ldr	r2, [pc, #236]	; (800538c <TIM_Base_SetConfig+0x120>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_Base_SetConfig+0x40>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a3a      	ldr	r2, [pc, #232]	; (8005390 <TIM_Base_SetConfig+0x124>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d108      	bne.n	80052be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a2f      	ldr	r2, [pc, #188]	; (8005380 <TIM_Base_SetConfig+0x114>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d02b      	beq.n	800531e <TIM_Base_SetConfig+0xb2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052cc:	d027      	beq.n	800531e <TIM_Base_SetConfig+0xb2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a2c      	ldr	r2, [pc, #176]	; (8005384 <TIM_Base_SetConfig+0x118>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d023      	beq.n	800531e <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a2b      	ldr	r2, [pc, #172]	; (8005388 <TIM_Base_SetConfig+0x11c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d01f      	beq.n	800531e <TIM_Base_SetConfig+0xb2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a2a      	ldr	r2, [pc, #168]	; (800538c <TIM_Base_SetConfig+0x120>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d01b      	beq.n	800531e <TIM_Base_SetConfig+0xb2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a29      	ldr	r2, [pc, #164]	; (8005390 <TIM_Base_SetConfig+0x124>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d017      	beq.n	800531e <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a28      	ldr	r2, [pc, #160]	; (8005394 <TIM_Base_SetConfig+0x128>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d013      	beq.n	800531e <TIM_Base_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a27      	ldr	r2, [pc, #156]	; (8005398 <TIM_Base_SetConfig+0x12c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00f      	beq.n	800531e <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a26      	ldr	r2, [pc, #152]	; (800539c <TIM_Base_SetConfig+0x130>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00b      	beq.n	800531e <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a25      	ldr	r2, [pc, #148]	; (80053a0 <TIM_Base_SetConfig+0x134>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d007      	beq.n	800531e <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a24      	ldr	r2, [pc, #144]	; (80053a4 <TIM_Base_SetConfig+0x138>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d003      	beq.n	800531e <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a23      	ldr	r2, [pc, #140]	; (80053a8 <TIM_Base_SetConfig+0x13c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d108      	bne.n	8005330 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a0a      	ldr	r2, [pc, #40]	; (8005380 <TIM_Base_SetConfig+0x114>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <TIM_Base_SetConfig+0xf8>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a0c      	ldr	r2, [pc, #48]	; (8005390 <TIM_Base_SetConfig+0x124>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d103      	bne.n	800536c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	615a      	str	r2, [r3, #20]
}
 8005372:	bf00      	nop
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40010000 	.word	0x40010000
 8005384:	40000400 	.word	0x40000400
 8005388:	40000800 	.word	0x40000800
 800538c:	40000c00 	.word	0x40000c00
 8005390:	40010400 	.word	0x40010400
 8005394:	40014000 	.word	0x40014000
 8005398:	40014400 	.word	0x40014400
 800539c:	40014800 	.word	0x40014800
 80053a0:	40001800 	.word	0x40001800
 80053a4:	40001c00 	.word	0x40001c00
 80053a8:	40002000 	.word	0x40002000

080053ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	2201      	movs	r2, #1
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a1a      	ldr	r2, [r3, #32]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	43db      	mvns	r3, r3
 80053ce:	401a      	ands	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a1a      	ldr	r2, [r3, #32]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f003 031f 	and.w	r3, r3, #31
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	fa01 f303 	lsl.w	r3, r1, r3
 80053e4:	431a      	orrs	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
	...

080053f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800540c:	2302      	movs	r3, #2
 800540e:	e05a      	b.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a21      	ldr	r2, [pc, #132]	; (80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d022      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545c:	d01d      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1d      	ldr	r2, [pc, #116]	; (80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d018      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1b      	ldr	r2, [pc, #108]	; (80054dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d013      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1a      	ldr	r2, [pc, #104]	; (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00e      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a18      	ldr	r2, [pc, #96]	; (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d009      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a17      	ldr	r2, [pc, #92]	; (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a15      	ldr	r2, [pc, #84]	; (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d10c      	bne.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800
 80054e0:	40000c00 	.word	0x40000c00
 80054e4:	40010400 	.word	0x40010400
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40001800 	.word	0x40001800

080054f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005518:	b084      	sub	sp, #16
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	f107 001c 	add.w	r0, r7, #28
 8005526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	2b01      	cmp	r3, #1
 800552e:	d122      	bne.n	8005576 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555a:	2b01      	cmp	r3, #1
 800555c:	d105      	bne.n	800556a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f9a0 	bl	80058b0 <USB_CoreReset>
 8005570:	4603      	mov	r3, r0
 8005572:	73fb      	strb	r3, [r7, #15]
 8005574:	e01a      	b.n	80055ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f994 	bl	80058b0 <USB_CoreReset>
 8005588:	4603      	mov	r3, r0
 800558a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800558c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d106      	bne.n	80055a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005596:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	639a      	str	r2, [r3, #56]	; 0x38
 800559e:	e005      	b.n	80055ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d10b      	bne.n	80055ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f043 0206 	orr.w	r2, r3, #6
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f043 0220 	orr.w	r2, r3, #32
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055d6:	b004      	add	sp, #16
 80055d8:	4770      	bx	lr

080055da <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f043 0201 	orr.w	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f023 0201 	bic.w	r2, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	460b      	mov	r3, r1
 8005628:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800563a:	78fb      	ldrb	r3, [r7, #3]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d115      	bne.n	800566c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800564c:	2001      	movs	r0, #1
 800564e:	f7fb fe0b 	bl	8001268 <HAL_Delay>
      ms++;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	3301      	adds	r3, #1
 8005656:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f91a 	bl	8005892 <USB_GetMode>
 800565e:	4603      	mov	r3, r0
 8005660:	2b01      	cmp	r3, #1
 8005662:	d01e      	beq.n	80056a2 <USB_SetCurrentMode+0x84>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b31      	cmp	r3, #49	; 0x31
 8005668:	d9f0      	bls.n	800564c <USB_SetCurrentMode+0x2e>
 800566a:	e01a      	b.n	80056a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d115      	bne.n	800569e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800567e:	2001      	movs	r0, #1
 8005680:	f7fb fdf2 	bl	8001268 <HAL_Delay>
      ms++;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	3301      	adds	r3, #1
 8005688:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f901 	bl	8005892 <USB_GetMode>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d005      	beq.n	80056a2 <USB_SetCurrentMode+0x84>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b31      	cmp	r3, #49	; 0x31
 800569a:	d9f0      	bls.n	800567e <USB_SetCurrentMode+0x60>
 800569c:	e001      	b.n	80056a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e005      	b.n	80056ae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b32      	cmp	r3, #50	; 0x32
 80056a6:	d101      	bne.n	80056ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e000      	b.n	80056ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	019b      	lsls	r3, r3, #6
 80056ca:	f043 0220 	orr.w	r2, r3, #32
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3301      	adds	r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	4a08      	ldr	r2, [pc, #32]	; (80056fc <USB_FlushTxFifo+0x44>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e006      	b.n	80056f0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f003 0320 	and.w	r3, r3, #32
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d0f1      	beq.n	80056d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	00030d40 	.word	0x00030d40

08005700 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2210      	movs	r2, #16
 8005710:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3301      	adds	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	4a08      	ldr	r2, [pc, #32]	; (800573c <USB_FlushRxFifo+0x3c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d901      	bls.n	8005722 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e006      	b.n	8005730 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	2b10      	cmp	r3, #16
 800572c:	d0f1      	beq.n	8005712 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	00030d40 	.word	0x00030d40

08005740 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005740:	b480      	push	{r7}
 8005742:	b089      	sub	sp, #36	; 0x24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	4611      	mov	r1, r2
 800574c:	461a      	mov	r2, r3
 800574e:	460b      	mov	r3, r1
 8005750:	71fb      	strb	r3, [r7, #7]
 8005752:	4613      	mov	r3, r2
 8005754:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800575e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005762:	2b00      	cmp	r3, #0
 8005764:	d123      	bne.n	80057ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005766:	88bb      	ldrh	r3, [r7, #4]
 8005768:	3303      	adds	r3, #3
 800576a:	089b      	lsrs	r3, r3, #2
 800576c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800576e:	2300      	movs	r3, #0
 8005770:	61bb      	str	r3, [r7, #24]
 8005772:	e018      	b.n	80057a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	031a      	lsls	r2, r3, #12
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	4413      	add	r3, r2
 800577c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005780:	461a      	mov	r2, r3
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	3301      	adds	r3, #1
 800578c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	3301      	adds	r3, #1
 8005792:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	3301      	adds	r3, #1
 8005798:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	3301      	adds	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	3301      	adds	r3, #1
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d3e2      	bcc.n	8005774 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3724      	adds	r7, #36	; 0x24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057bc:	b480      	push	{r7}
 80057be:	b08b      	sub	sp, #44	; 0x2c
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	4613      	mov	r3, r2
 80057c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80057d2:	88fb      	ldrh	r3, [r7, #6]
 80057d4:	089b      	lsrs	r3, r3, #2
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	f003 0303 	and.w	r3, r3, #3
 80057e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80057e2:	2300      	movs	r3, #0
 80057e4:	623b      	str	r3, [r7, #32]
 80057e6:	e014      	b.n	8005812 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	3301      	adds	r3, #1
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	3301      	adds	r3, #1
 80057fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	3301      	adds	r3, #1
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	3301      	adds	r3, #1
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	3301      	adds	r3, #1
 8005810:	623b      	str	r3, [r7, #32]
 8005812:	6a3a      	ldr	r2, [r7, #32]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	429a      	cmp	r2, r3
 8005818:	d3e6      	bcc.n	80057e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800581a:	8bfb      	ldrh	r3, [r7, #30]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01e      	beq.n	800585e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800582a:	461a      	mov	r2, r3
 800582c:	f107 0310 	add.w	r3, r7, #16
 8005830:	6812      	ldr	r2, [r2, #0]
 8005832:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	b2db      	uxtb	r3, r3
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	fa22 f303 	lsr.w	r3, r2, r3
 8005840:	b2da      	uxtb	r2, r3
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	701a      	strb	r2, [r3, #0]
      i++;
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	3301      	adds	r3, #1
 800584a:	623b      	str	r3, [r7, #32]
      pDest++;
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	3301      	adds	r3, #1
 8005850:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005852:	8bfb      	ldrh	r3, [r7, #30]
 8005854:	3b01      	subs	r3, #1
 8005856:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005858:	8bfb      	ldrh	r3, [r7, #30]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1ea      	bne.n	8005834 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005860:	4618      	mov	r0, r3
 8005862:	372c      	adds	r7, #44	; 0x2c
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4013      	ands	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005884:	68fb      	ldr	r3, [r7, #12]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f003 0301 	and.w	r3, r3, #1
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3301      	adds	r3, #1
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	4a13      	ldr	r2, [pc, #76]	; (8005910 <USB_CoreReset+0x60>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d901      	bls.n	80058cc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e01a      	b.n	8005902 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	daf3      	bge.n	80058bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f043 0201 	orr.w	r2, r3, #1
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3301      	adds	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	4a09      	ldr	r2, [pc, #36]	; (8005910 <USB_CoreReset+0x60>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d901      	bls.n	80058f4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e006      	b.n	8005902 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d0f1      	beq.n	80058e4 <USB_CoreReset+0x34>

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	00030d40 	.word	0x00030d40

08005914 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005914:	b084      	sub	sp, #16
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	f107 001c 	add.w	r0, r7, #28
 8005922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005930:	461a      	mov	r2, r3
 8005932:	2300      	movs	r3, #0
 8005934:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005952:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005962:	2b00      	cmp	r3, #0
 8005964:	d018      	beq.n	8005998 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	2b01      	cmp	r3, #1
 800596a:	d10a      	bne.n	8005982 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800597a:	f043 0304 	orr.w	r3, r3, #4
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	e014      	b.n	80059ac <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005990:	f023 0304 	bic.w	r3, r3, #4
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	e009      	b.n	80059ac <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059a6:	f023 0304 	bic.w	r3, r3, #4
 80059aa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80059ac:	2110      	movs	r1, #16
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff fe82 	bl	80056b8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7ff fea3 	bl	8005700 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	e015      	b.n	80059ec <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059cc:	461a      	mov	r2, r3
 80059ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059d2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e0:	461a      	mov	r2, r3
 80059e2:	2300      	movs	r3, #0
 80059e4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3301      	adds	r3, #1
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d3e5      	bcc.n	80059c0 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a00:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00b      	beq.n	8005a26 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a14:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a13      	ldr	r2, [pc, #76]	; (8005a68 <USB_HostInit+0x154>)
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <USB_HostInit+0x158>)
 8005a20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005a24:	e009      	b.n	8005a3a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2280      	movs	r2, #128	; 0x80
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a10      	ldr	r2, [pc, #64]	; (8005a70 <USB_HostInit+0x15c>)
 8005a30:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a0f      	ldr	r2, [pc, #60]	; (8005a74 <USB_HostInit+0x160>)
 8005a36:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d105      	bne.n	8005a4c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	f043 0210 	orr.w	r2, r3, #16
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699a      	ldr	r2, [r3, #24]
 8005a50:	4b09      	ldr	r3, [pc, #36]	; (8005a78 <USB_HostInit+0x164>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a64:	b004      	add	sp, #16
 8005a66:	4770      	bx	lr
 8005a68:	01000200 	.word	0x01000200
 8005a6c:	00e00300 	.word	0x00e00300
 8005a70:	00600080 	.word	0x00600080
 8005a74:	004000e0 	.word	0x004000e0
 8005a78:	a3200008 	.word	0xa3200008

08005a7c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a9a:	f023 0303 	bic.w	r3, r3, #3
 8005a9e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	78fb      	ldrb	r3, [r7, #3]
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	68f9      	ldr	r1, [r7, #12]
 8005ab0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d107      	bne.n	8005ace <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005aca:	6053      	str	r3, [r2, #4]
 8005acc:	e009      	b.n	8005ae2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d106      	bne.n	8005ae2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ada:	461a      	mov	r2, r3
 8005adc:	f241 7370 	movw	r3, #6000	; 0x1770
 8005ae0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b10:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b1e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005b20:	2064      	movs	r0, #100	; 0x64
 8005b22:	f7fb fba1 	bl	8001268 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b32:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005b34:	200a      	movs	r0, #10
 8005b36:	f7fb fb97 	bl	8001268 <HAL_Delay>

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b68:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d109      	bne.n	8005b88 <USB_DriveVbus+0x44>
 8005b74:	78fb      	ldrb	r3, [r7, #3]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d106      	bne.n	8005b88 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b86:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b92:	d109      	bne.n	8005ba8 <USB_DriveVbus+0x64>
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ba2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ba6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	0c5b      	lsrs	r3, r3, #17
 8005bd4:	f003 0303 	and.w	r3, r3, #3
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	b29b      	uxth	r3, r3
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
	...

08005c08 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	4608      	mov	r0, r1
 8005c12:	4611      	mov	r1, r2
 8005c14:	461a      	mov	r2, r3
 8005c16:	4603      	mov	r3, r0
 8005c18:	70fb      	strb	r3, [r7, #3]
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	70bb      	strb	r3, [r7, #2]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005c2a:	78fb      	ldrb	r3, [r7, #3]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c36:	461a      	mov	r2, r3
 8005c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c3c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005c3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d87e      	bhi.n	8005d44 <USB_HC_Init+0x13c>
 8005c46:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <USB_HC_Init+0x44>)
 8005c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4c:	08005c5d 	.word	0x08005c5d
 8005c50:	08005d07 	.word	0x08005d07
 8005c54:	08005c5d 	.word	0x08005c5d
 8005c58:	08005cc9 	.word	0x08005cc9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f240 439d 	movw	r3, #1181	; 0x49d
 8005c6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005c70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	da10      	bge.n	8005c9a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c78:	78fb      	ldrb	r3, [r7, #3]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	78fa      	ldrb	r2, [r7, #3]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c96:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005c98:	e057      	b.n	8005d4a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d051      	beq.n	8005d4a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005ca6:	78fb      	ldrb	r3, [r7, #3]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	78fa      	ldrb	r2, [r7, #3]
 8005cb6:	0151      	lsls	r1, r2, #5
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	440a      	add	r2, r1
 8005cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cc0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005cc4:	60d3      	str	r3, [r2, #12]
      break;
 8005cc6:	e040      	b.n	8005d4a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f240 639d 	movw	r3, #1693	; 0x69d
 8005cda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005cdc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	da34      	bge.n	8005d4e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	78fa      	ldrb	r2, [r7, #3]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d02:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005d04:	e023      	b.n	8005d4e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d06:	78fb      	ldrb	r3, [r7, #3]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d12:	461a      	mov	r2, r3
 8005d14:	f240 2325 	movw	r3, #549	; 0x225
 8005d18:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d1a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	da17      	bge.n	8005d52 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	78fa      	ldrb	r2, [r7, #3]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d3c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005d40:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005d42:	e006      	b.n	8005d52 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	77fb      	strb	r3, [r7, #31]
      break;
 8005d48:	e004      	b.n	8005d54 <USB_HC_Init+0x14c>
      break;
 8005d4a:	bf00      	nop
 8005d4c:	e002      	b.n	8005d54 <USB_HC_Init+0x14c>
      break;
 8005d4e:	bf00      	nop
 8005d50:	e000      	b.n	8005d54 <USB_HC_Init+0x14c>
      break;
 8005d52:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d5a:	699a      	ldr	r2, [r3, #24]
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	f003 030f 	and.w	r3, r3, #15
 8005d62:	2101      	movs	r1, #1
 8005d64:	fa01 f303 	lsl.w	r3, r1, r3
 8005d68:	6939      	ldr	r1, [r7, #16]
 8005d6a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005d7e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	da03      	bge.n	8005d8e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d8a:	61bb      	str	r3, [r7, #24]
 8005d8c:	e001      	b.n	8005d92 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff ff0f 	bl	8005bb6 <USB_GetHostSpeed>
 8005d98:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005d9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d106      	bne.n	8005db0 <USB_HC_Init+0x1a8>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d003      	beq.n	8005db0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005da8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dac:	617b      	str	r3, [r7, #20]
 8005dae:	e001      	b.n	8005db4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005db4:	787b      	ldrb	r3, [r7, #1]
 8005db6:	059b      	lsls	r3, r3, #22
 8005db8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005dbc:	78bb      	ldrb	r3, [r7, #2]
 8005dbe:	02db      	lsls	r3, r3, #11
 8005dc0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dc4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005dc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005dca:	049b      	lsls	r3, r3, #18
 8005dcc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005dd0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005dd2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005dd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005dd8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dde:	78fb      	ldrb	r3, [r7, #3]
 8005de0:	0159      	lsls	r1, r3, #5
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	440b      	add	r3, r1
 8005de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dea:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005df0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005df2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d10f      	bne.n	8005e1a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005dfa:	78fb      	ldrb	r3, [r7, #3]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	78fa      	ldrb	r2, [r7, #3]
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e18:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005e1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3720      	adds	r7, #32
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08c      	sub	sp, #48	; 0x30
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	785b      	ldrb	r3, [r3, #1]
 8005e3a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e40:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d02d      	beq.n	8005eaa <USB_HC_StartXfer+0x86>
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	791b      	ldrb	r3, [r3, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d129      	bne.n	8005eaa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d117      	bne.n	8005e8c <USB_HC_StartXfer+0x68>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	79db      	ldrb	r3, [r3, #7]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <USB_HC_StartXfer+0x48>
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	79db      	ldrb	r3, [r3, #7]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d10f      	bne.n	8005e8c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	69fa      	ldr	r2, [r7, #28]
 8005e7c:	0151      	lsls	r1, r2, #5
 8005e7e:	6a3a      	ldr	r2, [r7, #32]
 8005e80:	440a      	add	r2, r1
 8005e82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005e8c:	79fb      	ldrb	r3, [r7, #7]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10b      	bne.n	8005eaa <USB_HC_StartXfer+0x86>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	795b      	ldrb	r3, [r3, #5]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d107      	bne.n	8005eaa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	785b      	ldrb	r3, [r3, #1]
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 fa2f 	bl	8006304 <USB_DoPing>
      return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e0f8      	b.n	800609c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d018      	beq.n	8005ee4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	8912      	ldrh	r2, [r2, #8]
 8005eba:	4413      	add	r3, r2
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	8912      	ldrh	r2, [r2, #8]
 8005ec2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ec6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005ec8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005eca:	8b7b      	ldrh	r3, [r7, #26]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d90b      	bls.n	8005ee8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005ed0:	8b7b      	ldrh	r3, [r7, #26]
 8005ed2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ed4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	8912      	ldrh	r2, [r2, #8]
 8005eda:	fb02 f203 	mul.w	r2, r2, r3
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	611a      	str	r2, [r3, #16]
 8005ee2:	e001      	b.n	8005ee8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	78db      	ldrb	r3, [r3, #3]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d007      	beq.n	8005f00 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ef0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	8912      	ldrh	r2, [r2, #8]
 8005ef6:	fb02 f203 	mul.w	r2, r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	611a      	str	r2, [r3, #16]
 8005efe:	e003      	b.n	8005f08 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	695a      	ldr	r2, [r3, #20]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f12:	04d9      	lsls	r1, r3, #19
 8005f14:	4b63      	ldr	r3, [pc, #396]	; (80060a4 <USB_HC_StartXfer+0x280>)
 8005f16:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f18:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	7a9b      	ldrb	r3, [r3, #10]
 8005f1e:	075b      	lsls	r3, r3, #29
 8005f20:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f24:	69f9      	ldr	r1, [r7, #28]
 8005f26:	0148      	lsls	r0, r1, #5
 8005f28:	6a39      	ldr	r1, [r7, #32]
 8005f2a:	4401      	add	r1, r0
 8005f2c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f30:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f32:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005f34:	79fb      	ldrb	r3, [r7, #7]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d009      	beq.n	8005f4e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	68d9      	ldr	r1, [r3, #12]
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4a:	460a      	mov	r2, r1
 8005f4c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	bf0c      	ite	eq
 8005f5e:	2301      	moveq	r3, #1
 8005f60:	2300      	movne	r3, #0
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	69fa      	ldr	r2, [r7, #28]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	6a3a      	ldr	r2, [r7, #32]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f84:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	7e7b      	ldrb	r3, [r7, #25]
 8005f96:	075b      	lsls	r3, r3, #29
 8005f98:	69f9      	ldr	r1, [r7, #28]
 8005f9a:	0148      	lsls	r0, r1, #5
 8005f9c:	6a39      	ldr	r1, [r7, #32]
 8005f9e:	4401      	add	r1, r0
 8005fa0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fbe:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	78db      	ldrb	r3, [r3, #3]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d004      	beq.n	8005fd2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	e003      	b.n	8005fda <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fd8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fe0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fee:	461a      	mov	r2, r3
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005ff4:	79fb      	ldrb	r3, [r7, #7]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e04e      	b.n	800609c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	78db      	ldrb	r3, [r3, #3]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d149      	bne.n	800609a <USB_HC_StartXfer+0x276>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d045      	beq.n	800609a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	79db      	ldrb	r3, [r3, #7]
 8006012:	2b03      	cmp	r3, #3
 8006014:	d830      	bhi.n	8006078 <USB_HC_StartXfer+0x254>
 8006016:	a201      	add	r2, pc, #4	; (adr r2, 800601c <USB_HC_StartXfer+0x1f8>)
 8006018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601c:	0800602d 	.word	0x0800602d
 8006020:	08006051 	.word	0x08006051
 8006024:	0800602d 	.word	0x0800602d
 8006028:	08006051 	.word	0x08006051
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	3303      	adds	r3, #3
 8006032:	089b      	lsrs	r3, r3, #2
 8006034:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006036:	8afa      	ldrh	r2, [r7, #22]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	b29b      	uxth	r3, r3
 800603e:	429a      	cmp	r2, r3
 8006040:	d91c      	bls.n	800607c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	f043 0220 	orr.w	r2, r3, #32
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	619a      	str	r2, [r3, #24]
        }
        break;
 800604e:	e015      	b.n	800607c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	3303      	adds	r3, #3
 8006056:	089b      	lsrs	r3, r3, #2
 8006058:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800605a:	8afa      	ldrh	r2, [r7, #22]
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	b29b      	uxth	r3, r3
 8006066:	429a      	cmp	r2, r3
 8006068:	d90a      	bls.n	8006080 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	619a      	str	r2, [r3, #24]
        }
        break;
 8006076:	e003      	b.n	8006080 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006078:	bf00      	nop
 800607a:	e002      	b.n	8006082 <USB_HC_StartXfer+0x25e>
        break;
 800607c:	bf00      	nop
 800607e:	e000      	b.n	8006082 <USB_HC_StartXfer+0x25e>
        break;
 8006080:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	68d9      	ldr	r1, [r3, #12]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	785a      	ldrb	r2, [r3, #1]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	b29b      	uxth	r3, r3
 8006090:	2000      	movs	r0, #0
 8006092:	9000      	str	r0, [sp, #0]
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f7ff fb53 	bl	8005740 <USB_WritePacket>
  }

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3728      	adds	r7, #40	; 0x28
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	1ff80000 	.word	0x1ff80000

080060a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	b29b      	uxth	r3, r3
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b089      	sub	sp, #36	; 0x24
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	460b      	mov	r3, r1
 80060d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	0c9b      	lsrs	r3, r3, #18
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	0fdb      	lsrs	r3, r3, #31
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 0320 	and.w	r3, r3, #32
 8006116:	2b20      	cmp	r3, #32
 8006118:	d104      	bne.n	8006124 <USB_HC_Halt+0x5a>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006120:	2300      	movs	r3, #0
 8006122:	e0e8      	b.n	80062f6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <USB_HC_Halt+0x66>
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d173      	bne.n	8006218 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	4413      	add	r3, r2
 8006138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	0151      	lsls	r1, r2, #5
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	440a      	add	r2, r1
 8006146:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800614a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800614e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f003 0320 	and.w	r3, r3, #32
 8006158:	2b00      	cmp	r3, #0
 800615a:	f040 80cb 	bne.w	80062f4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d143      	bne.n	80061f2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	4413      	add	r3, r2
 8006172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	0151      	lsls	r1, r2, #5
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	440a      	add	r2, r1
 8006180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006188:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	4413      	add	r3, r2
 8006192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061a8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061c8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	3301      	adds	r3, #1
 80061ce:	61fb      	str	r3, [r7, #28]
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061d6:	d81d      	bhi.n	8006214 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ee:	d0ec      	beq.n	80061ca <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061f0:	e080      	b.n	80062f4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	0151      	lsls	r1, r2, #5
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	440a      	add	r2, r1
 8006208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800620c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006210:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006212:	e06f      	b.n	80062f4 <USB_HC_Halt+0x22a>
            break;
 8006214:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006216:	e06d      	b.n	80062f4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	4413      	add	r3, r2
 8006220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	440a      	add	r2, r1
 800622e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006232:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006236:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d143      	bne.n	80062d0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	4413      	add	r3, r2
 8006250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	0151      	lsls	r1, r2, #5
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	440a      	add	r2, r1
 800625e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006262:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006266:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	4413      	add	r3, r2
 8006270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	0151      	lsls	r1, r2, #5
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	440a      	add	r2, r1
 800627e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006286:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	4413      	add	r3, r2
 8006290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	0151      	lsls	r1, r2, #5
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	440a      	add	r2, r1
 800629e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062a6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	3301      	adds	r3, #1
 80062ac:	61fb      	str	r3, [r7, #28]
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062b4:	d81d      	bhi.n	80062f2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062cc:	d0ec      	beq.n	80062a8 <USB_HC_Halt+0x1de>
 80062ce:	e011      	b.n	80062f4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	e000      	b.n	80062f4 <USB_HC_Halt+0x22a>
          break;
 80062f2:	bf00      	nop
    }
  }

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3724      	adds	r7, #36	; 0x24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
	...

08006304 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006318:	2301      	movs	r3, #1
 800631a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	04da      	lsls	r2, r3, #19
 8006320:	4b15      	ldr	r3, [pc, #84]	; (8006378 <USB_DoPing+0x74>)
 8006322:	4013      	ands	r3, r2
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	440a      	add	r2, r1
 800632c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006330:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006334:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	4413      	add	r3, r2
 800633e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800634c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006354:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	4413      	add	r3, r2
 800635e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006362:	461a      	mov	r2, r3
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	1ff80000 	.word	0x1ff80000

0800637c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff f935 	bl	80055fc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006392:	2110      	movs	r1, #16
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff f98f 	bl	80056b8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7ff f9b0 	bl	8005700 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80063a0:	2300      	movs	r3, #0
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	e01f      	b.n	80063e6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063cc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063da:	461a      	mov	r2, r3
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	3301      	adds	r3, #1
 80063e4:	613b      	str	r3, [r7, #16]
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b0f      	cmp	r3, #15
 80063ea:	d9dc      	bls.n	80063a6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80063ec:	2300      	movs	r3, #0
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	e034      	b.n	800645c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006408:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006410:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006418:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006426:	461a      	mov	r2, r3
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	3301      	adds	r3, #1
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006438:	d80c      	bhi.n	8006454 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4413      	add	r3, r2
 8006442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800644c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006450:	d0ec      	beq.n	800642c <USB_StopHost+0xb0>
 8006452:	e000      	b.n	8006456 <USB_StopHost+0xda>
        break;
 8006454:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	3301      	adds	r3, #1
 800645a:	613b      	str	r3, [r7, #16]
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	2b0f      	cmp	r3, #15
 8006460:	d9c7      	bls.n	80063f2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006468:	461a      	mov	r2, r3
 800646a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800646e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006476:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff f8ae 	bl	80055da <USB_EnableGlobalInt>

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006488:	b590      	push	{r4, r7, lr}
 800648a:	b089      	sub	sp, #36	; 0x24
 800648c:	af04      	add	r7, sp, #16
 800648e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006490:	2301      	movs	r3, #1
 8006492:	2202      	movs	r2, #2
 8006494:	2102      	movs	r1, #2
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fc66 	bl	8006d68 <USBH_FindInterface>
 800649c:	4603      	mov	r3, r0
 800649e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
 80064a2:	2bff      	cmp	r3, #255	; 0xff
 80064a4:	d002      	beq.n	80064ac <USBH_CDC_InterfaceInit+0x24>
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d901      	bls.n	80064b0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80064ac:	2302      	movs	r3, #2
 80064ae:	e13d      	b.n	800672c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fc3b 	bl	8006d30 <USBH_SelectInterface>
 80064ba:	4603      	mov	r3, r0
 80064bc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80064be:	7bbb      	ldrb	r3, [r7, #14]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80064c4:	2302      	movs	r3, #2
 80064c6:	e131      	b.n	800672c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80064ce:	2050      	movs	r0, #80	; 0x50
 80064d0:	f002 fa00 	bl	80088d4 <malloc>
 80064d4:	4603      	mov	r3, r0
 80064d6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80064e8:	2302      	movs	r3, #2
 80064ea:	e11f      	b.n	800672c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80064ec:	2250      	movs	r2, #80	; 0x50
 80064ee:	2100      	movs	r1, #0
 80064f0:	68b8      	ldr	r0, [r7, #8]
 80064f2:	f002 f9ff 	bl	80088f4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	211a      	movs	r1, #26
 80064fc:	fb01 f303 	mul.w	r3, r1, r3
 8006500:	4413      	add	r3, r2
 8006502:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	b25b      	sxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	da15      	bge.n	800653a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800650e:	7bfb      	ldrb	r3, [r7, #15]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	211a      	movs	r1, #26
 8006514:	fb01 f303 	mul.w	r3, r1, r3
 8006518:	4413      	add	r3, r2
 800651a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800651e:	781a      	ldrb	r2, [r3, #0]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	211a      	movs	r1, #26
 800652a:	fb01 f303 	mul.w	r3, r1, r3
 800652e:	4413      	add	r3, r2
 8006530:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006534:	881a      	ldrh	r2, [r3, #0]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	785b      	ldrb	r3, [r3, #1]
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 fe32 	bl	80081aa <USBH_AllocPipe>
 8006546:	4603      	mov	r3, r0
 8006548:	461a      	mov	r2, r3
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	7819      	ldrb	r1, [r3, #0]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	7858      	ldrb	r0, [r3, #1]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	8952      	ldrh	r2, [r2, #10]
 8006566:	9202      	str	r2, [sp, #8]
 8006568:	2203      	movs	r2, #3
 800656a:	9201      	str	r2, [sp, #4]
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	4623      	mov	r3, r4
 8006570:	4602      	mov	r2, r0
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f001 fdea 	bl	800814c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2200      	movs	r2, #0
 800657e:	4619      	mov	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f002 f8f9 	bl	8008778 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006586:	2300      	movs	r3, #0
 8006588:	2200      	movs	r2, #0
 800658a:	210a      	movs	r1, #10
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fbeb 	bl	8006d68 <USBH_FindInterface>
 8006592:	4603      	mov	r3, r0
 8006594:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	2bff      	cmp	r3, #255	; 0xff
 800659a:	d002      	beq.n	80065a2 <USBH_CDC_InterfaceInit+0x11a>
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d901      	bls.n	80065a6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065a2:	2302      	movs	r3, #2
 80065a4:	e0c2      	b.n	800672c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	211a      	movs	r1, #26
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	4413      	add	r3, r2
 80065b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	b25b      	sxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	da16      	bge.n	80065ec <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	211a      	movs	r1, #26
 80065c4:	fb01 f303 	mul.w	r3, r1, r3
 80065c8:	4413      	add	r3, r2
 80065ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065ce:	781a      	ldrb	r2, [r3, #0]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	211a      	movs	r1, #26
 80065da:	fb01 f303 	mul.w	r3, r1, r3
 80065de:	4413      	add	r3, r2
 80065e0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80065e4:	881a      	ldrh	r2, [r3, #0]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	835a      	strh	r2, [r3, #26]
 80065ea:	e015      	b.n	8006618 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	211a      	movs	r1, #26
 80065f2:	fb01 f303 	mul.w	r3, r1, r3
 80065f6:	4413      	add	r3, r2
 80065f8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065fc:	781a      	ldrb	r2, [r3, #0]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	211a      	movs	r1, #26
 8006608:	fb01 f303 	mul.w	r3, r1, r3
 800660c:	4413      	add	r3, r2
 800660e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006612:	881a      	ldrh	r2, [r3, #0]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006618:	7bfb      	ldrb	r3, [r7, #15]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	211a      	movs	r1, #26
 800661e:	fb01 f303 	mul.w	r3, r1, r3
 8006622:	4413      	add	r3, r2
 8006624:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	b25b      	sxtb	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	da16      	bge.n	800665e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006630:	7bfb      	ldrb	r3, [r7, #15]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	211a      	movs	r1, #26
 8006636:	fb01 f303 	mul.w	r3, r1, r3
 800663a:	4413      	add	r3, r2
 800663c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006640:	781a      	ldrb	r2, [r3, #0]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006646:	7bfb      	ldrb	r3, [r7, #15]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	211a      	movs	r1, #26
 800664c:	fb01 f303 	mul.w	r3, r1, r3
 8006650:	4413      	add	r3, r2
 8006652:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006656:	881a      	ldrh	r2, [r3, #0]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	835a      	strh	r2, [r3, #26]
 800665c:	e015      	b.n	800668a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	211a      	movs	r1, #26
 8006664:	fb01 f303 	mul.w	r3, r1, r3
 8006668:	4413      	add	r3, r2
 800666a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800666e:	781a      	ldrb	r2, [r3, #0]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	211a      	movs	r1, #26
 800667a:	fb01 f303 	mul.w	r3, r1, r3
 800667e:	4413      	add	r3, r2
 8006680:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006684:	881a      	ldrh	r2, [r3, #0]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	7b9b      	ldrb	r3, [r3, #14]
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 fd8a 	bl	80081aa <USBH_AllocPipe>
 8006696:	4603      	mov	r3, r0
 8006698:	461a      	mov	r2, r3
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	7bdb      	ldrb	r3, [r3, #15]
 80066a2:	4619      	mov	r1, r3
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 fd80 	bl	80081aa <USBH_AllocPipe>
 80066aa:	4603      	mov	r3, r0
 80066ac:	461a      	mov	r2, r3
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	7b59      	ldrb	r1, [r3, #13]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	7b98      	ldrb	r0, [r3, #14]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	8b12      	ldrh	r2, [r2, #24]
 80066ca:	9202      	str	r2, [sp, #8]
 80066cc:	2202      	movs	r2, #2
 80066ce:	9201      	str	r2, [sp, #4]
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	4623      	mov	r3, r4
 80066d4:	4602      	mov	r2, r0
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 fd38 	bl	800814c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	7b19      	ldrb	r1, [r3, #12]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	7bd8      	ldrb	r0, [r3, #15]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	8b52      	ldrh	r2, [r2, #26]
 80066f4:	9202      	str	r2, [sp, #8]
 80066f6:	2202      	movs	r2, #2
 80066f8:	9201      	str	r2, [sp, #4]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	4623      	mov	r3, r4
 80066fe:	4602      	mov	r2, r0
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 fd23 	bl	800814c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	7b5b      	ldrb	r3, [r3, #13]
 8006712:	2200      	movs	r2, #0
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f002 f82e 	bl	8008778 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	7b1b      	ldrb	r3, [r3, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f002 f827 	bl	8008778 <USBH_LL_SetToggle>

  return USBH_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	bd90      	pop	{r4, r7, pc}

08006734 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00e      	beq.n	800676c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 fd18 	bl	800818a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 fd43 	bl	80081ec <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	7b1b      	ldrb	r3, [r3, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00e      	beq.n	8006792 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	7b1b      	ldrb	r3, [r3, #12]
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f001 fd05 	bl	800818a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	7b1b      	ldrb	r3, [r3, #12]
 8006784:	4619      	mov	r1, r3
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 fd30 	bl	80081ec <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	7b5b      	ldrb	r3, [r3, #13]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00e      	beq.n	80067b8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	7b5b      	ldrb	r3, [r3, #13]
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 fcf2 	bl	800818a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	7b5b      	ldrb	r3, [r3, #13]
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 fd1d 	bl	80081ec <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00b      	beq.n	80067dc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067ca:	69db      	ldr	r3, [r3, #28]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f002 f889 	bl	80088e4 <free>
    phost->pActiveClass->pData = 0U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067d8:	2200      	movs	r2, #0
 80067da:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3340      	adds	r3, #64	; 0x40
 80067fc:	4619      	mov	r1, r3
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f8b1 	bl	8006966 <GetLineCoding>
 8006804:	4603      	mov	r3, r0
 8006806:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006808:	7afb      	ldrb	r3, [r7, #11]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d105      	bne.n	800681a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006814:	2102      	movs	r1, #2
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800681a:	7afb      	ldrb	r3, [r7, #11]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800682c:	2301      	movs	r3, #1
 800682e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006844:	2b04      	cmp	r3, #4
 8006846:	d877      	bhi.n	8006938 <USBH_CDC_Process+0x114>
 8006848:	a201      	add	r2, pc, #4	; (adr r2, 8006850 <USBH_CDC_Process+0x2c>)
 800684a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684e:	bf00      	nop
 8006850:	08006865 	.word	0x08006865
 8006854:	0800686b 	.word	0x0800686b
 8006858:	0800689b 	.word	0x0800689b
 800685c:	0800690f 	.word	0x0800690f
 8006860:	0800691d 	.word	0x0800691d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	73fb      	strb	r3, [r7, #15]
      break;
 8006868:	e06d      	b.n	8006946 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f897 	bl	80069a4 <SetLineCoding>
 8006876:	4603      	mov	r3, r0
 8006878:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800687a:	7bbb      	ldrb	r3, [r7, #14]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d104      	bne.n	800688a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006888:	e058      	b.n	800693c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800688a:	7bbb      	ldrb	r3, [r7, #14]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d055      	beq.n	800693c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2204      	movs	r2, #4
 8006894:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006898:	e050      	b.n	800693c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	3340      	adds	r3, #64	; 0x40
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f860 	bl	8006966 <GetLineCoding>
 80068a6:	4603      	mov	r3, r0
 80068a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80068aa:	7bbb      	ldrb	r3, [r7, #14]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d126      	bne.n	80068fe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068c2:	791b      	ldrb	r3, [r3, #4]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d13b      	bne.n	8006940 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068d2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d133      	bne.n	8006940 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d12b      	bne.n	8006940 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d124      	bne.n	8006940 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f958 	bl	8006bac <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80068fc:	e020      	b.n	8006940 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d01d      	beq.n	8006940 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2204      	movs	r2, #4
 8006908:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800690c:	e018      	b.n	8006940 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f867 	bl	80069e2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f8da 	bl	8006ace <CDC_ProcessReception>
      break;
 800691a:	e014      	b.n	8006946 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800691c:	2100      	movs	r1, #0
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 ffe3 	bl	80078ea <USBH_ClrFeature>
 8006924:	4603      	mov	r3, r0
 8006926:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10a      	bne.n	8006944 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006936:	e005      	b.n	8006944 <USBH_CDC_Process+0x120>

    default:
      break;
 8006938:	bf00      	nop
 800693a:	e004      	b.n	8006946 <USBH_CDC_Process+0x122>
      break;
 800693c:	bf00      	nop
 800693e:	e002      	b.n	8006946 <USBH_CDC_Process+0x122>
      break;
 8006940:	bf00      	nop
 8006942:	e000      	b.n	8006946 <USBH_CDC_Process+0x122>
      break;
 8006944:	bf00      	nop

  }

  return status;
 8006946:	7bfb      	ldrb	r3, [r7, #15]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	22a1      	movs	r2, #161	; 0xa1
 8006974:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2221      	movs	r2, #33	; 0x21
 800697a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2207      	movs	r2, #7
 800698c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2207      	movs	r2, #7
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 f988 	bl	8007caa <USBH_CtlReq>
 800699a:	4603      	mov	r3, r0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2221      	movs	r2, #33	; 0x21
 80069b2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2207      	movs	r2, #7
 80069ca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2207      	movs	r2, #7
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f001 f969 	bl	8007caa <USBH_CtlReq>
 80069d8:	4603      	mov	r3, r0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b086      	sub	sp, #24
 80069e6:	af02      	add	r7, sp, #8
 80069e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069f4:	2300      	movs	r3, #0
 80069f6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d002      	beq.n	8006a08 <CDC_ProcessTransmission+0x26>
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d023      	beq.n	8006a4e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006a06:	e05e      	b.n	8006ac6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	8b12      	ldrh	r2, [r2, #24]
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d90b      	bls.n	8006a2c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	69d9      	ldr	r1, [r3, #28]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8b1a      	ldrh	r2, [r3, #24]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	7b5b      	ldrb	r3, [r3, #13]
 8006a20:	2001      	movs	r0, #1
 8006a22:	9000      	str	r0, [sp, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 fb4e 	bl	80080c6 <USBH_BulkSendData>
 8006a2a:	e00b      	b.n	8006a44 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	7b5b      	ldrb	r3, [r3, #13]
 8006a3a:	2001      	movs	r0, #1
 8006a3c:	9000      	str	r0, [sp, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 fb41 	bl	80080c6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006a4c:	e03b      	b.n	8006ac6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	7b5b      	ldrb	r3, [r3, #13]
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 fe65 	bl	8008724 <USBH_LL_GetURBState>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006a5e:	7afb      	ldrb	r3, [r7, #11]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d128      	bne.n	8006ab6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	8b12      	ldrh	r2, [r2, #24]
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d90e      	bls.n	8006a8e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	8b12      	ldrh	r2, [r2, #24]
 8006a78:	1a9a      	subs	r2, r3, r2
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	8b12      	ldrh	r2, [r2, #24]
 8006a86:	441a      	add	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	61da      	str	r2, [r3, #28]
 8006a8c:	e002      	b.n	8006a94 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d004      	beq.n	8006aa6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006aa4:	e00e      	b.n	8006ac4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f868 	bl	8006b84 <USBH_CDC_TransmitCallback>
      break;
 8006ab4:	e006      	b.n	8006ac4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006ab6:	7afb      	ldrb	r3, [r7, #11]
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d103      	bne.n	8006ac4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006ac4:	bf00      	nop
  }
}
 8006ac6:	bf00      	nop
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b086      	sub	sp, #24
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d002      	beq.n	8006af4 <CDC_ProcessReception+0x26>
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d00e      	beq.n	8006b10 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006af2:	e043      	b.n	8006b7c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	6a19      	ldr	r1, [r3, #32]
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	8b5a      	ldrh	r2, [r3, #26]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	7b1b      	ldrb	r3, [r3, #12]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f001 fb05 	bl	8008110 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2204      	movs	r2, #4
 8006b0a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006b0e:	e035      	b.n	8006b7c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	7b1b      	ldrb	r3, [r3, #12]
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f001 fe04 	bl	8008724 <USBH_LL_GetURBState>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006b20:	7cfb      	ldrb	r3, [r7, #19]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d129      	bne.n	8006b7a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	7b1b      	ldrb	r3, [r3, #12]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 fd67 	bl	8008600 <USBH_LL_GetLastXferSize>
 8006b32:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d016      	beq.n	8006b6c <CDC_ProcessReception+0x9e>
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	8b5b      	ldrh	r3, [r3, #26]
 8006b42:	461a      	mov	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d910      	bls.n	8006b6c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	1ad2      	subs	r2, r2, r3
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	6a1a      	ldr	r2, [r3, #32]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	441a      	add	r2, r3
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2203      	movs	r2, #3
 8006b66:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006b6a:	e006      	b.n	8006b7a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f80f 	bl	8006b98 <USBH_CDC_ReceiveCallback>
      break;
 8006b7a:	bf00      	nop
  }
}
 8006b7c:	bf00      	nop
 8006b7e:	3718      	adds	r7, #24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	e029      	b.n	8006c2c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	79fa      	ldrb	r2, [r7, #7]
 8006bdc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 f81f 	bl	8006c34 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f001 fc37 	bl	8008498 <USBH_LL_Init>

  return USBH_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c40:	2300      	movs	r3, #0
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	e009      	b.n	8006c5a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	33e0      	adds	r3, #224	; 0xe0
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	2200      	movs	r2, #0
 8006c52:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3301      	adds	r3, #1
 8006c58:	60fb      	str	r3, [r7, #12]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b0e      	cmp	r3, #14
 8006c5e:	d9f2      	bls.n	8006c46 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c60:	2300      	movs	r3, #0
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	e009      	b.n	8006c7a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c70:	2200      	movs	r2, #0
 8006c72:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3301      	adds	r3, #1
 8006c78:	60fb      	str	r3, [r7, #12]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c80:	d3f1      	bcc.n	8006c66 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2240      	movs	r2, #64	; 0x40
 8006ca6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d016      	beq.n	8006d1e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10e      	bne.n	8006d18 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d00:	1c59      	adds	r1, r3, #1
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	33de      	adds	r3, #222	; 0xde
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	73fb      	strb	r3, [r7, #15]
 8006d16:	e004      	b.n	8006d22 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006d18:	2302      	movs	r3, #2
 8006d1a:	73fb      	strb	r3, [r7, #15]
 8006d1c:	e001      	b.n	8006d22 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006d1e:	2302      	movs	r3, #2
 8006d20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006d46:	78fa      	ldrb	r2, [r7, #3]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d204      	bcs.n	8006d56 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	78fa      	ldrb	r2, [r7, #3]
 8006d50:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006d54:	e001      	b.n	8006d5a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006d56:	2302      	movs	r3, #2
 8006d58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	4608      	mov	r0, r1
 8006d72:	4611      	mov	r1, r2
 8006d74:	461a      	mov	r2, r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	70fb      	strb	r3, [r7, #3]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	70bb      	strb	r3, [r7, #2]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006d90:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d92:	e025      	b.n	8006de0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
 8006d96:	221a      	movs	r2, #26
 8006d98:	fb02 f303 	mul.w	r3, r2, r3
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4413      	add	r3, r2
 8006da2:	3302      	adds	r3, #2
 8006da4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	795b      	ldrb	r3, [r3, #5]
 8006daa:	78fa      	ldrb	r2, [r7, #3]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d002      	beq.n	8006db6 <USBH_FindInterface+0x4e>
 8006db0:	78fb      	ldrb	r3, [r7, #3]
 8006db2:	2bff      	cmp	r3, #255	; 0xff
 8006db4:	d111      	bne.n	8006dda <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006dba:	78ba      	ldrb	r2, [r7, #2]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d002      	beq.n	8006dc6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006dc0:	78bb      	ldrb	r3, [r7, #2]
 8006dc2:	2bff      	cmp	r3, #255	; 0xff
 8006dc4:	d109      	bne.n	8006dda <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006dca:	787a      	ldrb	r2, [r7, #1]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d002      	beq.n	8006dd6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006dd0:	787b      	ldrb	r3, [r7, #1]
 8006dd2:	2bff      	cmp	r3, #255	; 0xff
 8006dd4:	d101      	bne.n	8006dda <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
 8006dd8:	e006      	b.n	8006de8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d9d6      	bls.n	8006d94 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006de6:	23ff      	movs	r3, #255	; 0xff
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	371c      	adds	r7, #28
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 fb87 	bl	8008510 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006e02:	2101      	movs	r1, #1
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 fca0 	bl	800874a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af04      	add	r7, sp, #16
 8006e1a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d102      	bne.n	8006e36 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2203      	movs	r2, #3
 8006e34:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b0b      	cmp	r3, #11
 8006e3e:	f200 81b3 	bhi.w	80071a8 <USBH_Process+0x394>
 8006e42:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <USBH_Process+0x34>)
 8006e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e48:	08006e79 	.word	0x08006e79
 8006e4c:	08006eab 	.word	0x08006eab
 8006e50:	08006f13 	.word	0x08006f13
 8006e54:	08007143 	.word	0x08007143
 8006e58:	080071a9 	.word	0x080071a9
 8006e5c:	08006fb7 	.word	0x08006fb7
 8006e60:	080070e9 	.word	0x080070e9
 8006e64:	08006fed 	.word	0x08006fed
 8006e68:	0800700d 	.word	0x0800700d
 8006e6c:	0800702d 	.word	0x0800702d
 8006e70:	0800705b 	.word	0x0800705b
 8006e74:	0800712b 	.word	0x0800712b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 8193 	beq.w	80071ac <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006e8c:	20c8      	movs	r0, #200	; 0xc8
 8006e8e:	f001 fca3 	bl	80087d8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 fb99 	bl	80085ca <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006ea8:	e180      	b.n	80071ac <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d107      	bne.n	8006ec4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ec2:	e182      	b.n	80071ca <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006eca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ece:	d914      	bls.n	8006efa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d903      	bls.n	8006ef2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	220d      	movs	r2, #13
 8006eee:	701a      	strb	r2, [r3, #0]
      break;
 8006ef0:	e16b      	b.n	80071ca <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	701a      	strb	r2, [r3, #0]
      break;
 8006ef8:	e167      	b.n	80071ca <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f00:	f103 020a 	add.w	r2, r3, #10
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006f0a:	200a      	movs	r0, #10
 8006f0c:	f001 fc64 	bl	80087d8 <USBH_Delay>
      break;
 8006f10:	e15b      	b.n	80071ca <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d005      	beq.n	8006f28 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f22:	2104      	movs	r1, #4
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006f28:	2064      	movs	r0, #100	; 0x64
 8006f2a:	f001 fc55 	bl	80087d8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f001 fb24 	bl	800857c <USBH_LL_GetSpeed>
 8006f34:	4603      	mov	r3, r0
 8006f36:	461a      	mov	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2205      	movs	r2, #5
 8006f42:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006f44:	2100      	movs	r1, #0
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 f92f 	bl	80081aa <USBH_AllocPipe>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	461a      	mov	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006f54:	2180      	movs	r1, #128	; 0x80
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 f927 	bl	80081aa <USBH_AllocPipe>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	461a      	mov	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	7919      	ldrb	r1, [r3, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006f78:	b292      	uxth	r2, r2
 8006f7a:	9202      	str	r2, [sp, #8]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	9201      	str	r2, [sp, #4]
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	4603      	mov	r3, r0
 8006f84:	2280      	movs	r2, #128	; 0x80
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 f8e0 	bl	800814c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	7959      	ldrb	r1, [r3, #5]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006fa0:	b292      	uxth	r2, r2
 8006fa2:	9202      	str	r2, [sp, #8]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	9201      	str	r2, [sp, #4]
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	4603      	mov	r3, r0
 8006fac:	2200      	movs	r2, #0
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 f8cc 	bl	800814c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006fb4:	e109      	b.n	80071ca <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f90c 	bl	80071d4 <USBH_HandleEnum>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006fc0:	7bbb      	ldrb	r3, [r7, #14]
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f040 80f3 	bne.w	80071b0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d103      	bne.n	8006fe4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2208      	movs	r2, #8
 8006fe0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006fe2:	e0e5      	b.n	80071b0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2207      	movs	r2, #7
 8006fe8:	701a      	strb	r2, [r3, #0]
      break;
 8006fea:	e0e1      	b.n	80071b0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 80de 	beq.w	80071b4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ffe:	2101      	movs	r1, #1
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2208      	movs	r2, #8
 8007008:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800700a:	e0d3      	b.n	80071b4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007012:	b29b      	uxth	r3, r3
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fc20 	bl	800785c <USBH_SetCfg>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	f040 80ca 	bne.w	80071b8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2209      	movs	r2, #9
 8007028:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800702a:	e0c5      	b.n	80071b8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007032:	f003 0320 	and.w	r3, r3, #32
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00b      	beq.n	8007052 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800703a:	2101      	movs	r1, #1
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fc30 	bl	80078a2 <USBH_SetFeature>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	f040 80b9 	bne.w	80071bc <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	220a      	movs	r2, #10
 800704e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007050:	e0b4      	b.n	80071bc <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	220a      	movs	r2, #10
 8007056:	701a      	strb	r2, [r3, #0]
      break;
 8007058:	e0b0      	b.n	80071bc <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007060:	2b00      	cmp	r3, #0
 8007062:	f000 80ad 	beq.w	80071c0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800706e:	2300      	movs	r3, #0
 8007070:	73fb      	strb	r3, [r7, #15]
 8007072:	e016      	b.n	80070a2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007074:	7bfa      	ldrb	r2, [r7, #15]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	32de      	adds	r2, #222	; 0xde
 800707a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707e:	791a      	ldrb	r2, [r3, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007086:	429a      	cmp	r2, r3
 8007088:	d108      	bne.n	800709c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800708a:	7bfa      	ldrb	r2, [r7, #15]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	32de      	adds	r2, #222	; 0xde
 8007090:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800709a:	e005      	b.n	80070a8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800709c:	7bfb      	ldrb	r3, [r7, #15]
 800709e:	3301      	adds	r3, #1
 80070a0:	73fb      	strb	r3, [r7, #15]
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0e5      	beq.n	8007074 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d016      	beq.n	80070e0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	4798      	blx	r3
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d109      	bne.n	80070d8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2206      	movs	r2, #6
 80070c8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070d0:	2103      	movs	r1, #3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80070d6:	e073      	b.n	80071c0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	220d      	movs	r2, #13
 80070dc:	701a      	strb	r2, [r3, #0]
      break;
 80070de:	e06f      	b.n	80071c0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	220d      	movs	r2, #13
 80070e4:	701a      	strb	r2, [r3, #0]
      break;
 80070e6:	e06b      	b.n	80071c0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d017      	beq.n	8007122 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	4798      	blx	r3
 80070fe:	4603      	mov	r3, r0
 8007100:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007102:	7bbb      	ldrb	r3, [r7, #14]
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d103      	bne.n	8007112 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	220b      	movs	r2, #11
 800710e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007110:	e058      	b.n	80071c4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d154      	bne.n	80071c4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	220d      	movs	r2, #13
 800711e:	701a      	strb	r2, [r3, #0]
      break;
 8007120:	e050      	b.n	80071c4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	220d      	movs	r2, #13
 8007126:	701a      	strb	r2, [r3, #0]
      break;
 8007128:	e04c      	b.n	80071c4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007130:	2b00      	cmp	r3, #0
 8007132:	d049      	beq.n	80071c8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	4798      	blx	r3
      }
      break;
 8007140:	e042      	b.n	80071c8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff fd72 	bl	8006c34 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007156:	2b00      	cmp	r3, #0
 8007158:	d009      	beq.n	800716e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007174:	2b00      	cmp	r3, #0
 8007176:	d005      	beq.n	8007184 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800717e:	2105      	movs	r1, #5
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b01      	cmp	r3, #1
 800718e:	d107      	bne.n	80071a0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff fe2b 	bl	8006df4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800719e:	e014      	b.n	80071ca <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 f9b5 	bl	8008510 <USBH_LL_Start>
      break;
 80071a6:	e010      	b.n	80071ca <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80071a8:	bf00      	nop
 80071aa:	e00e      	b.n	80071ca <USBH_Process+0x3b6>
      break;
 80071ac:	bf00      	nop
 80071ae:	e00c      	b.n	80071ca <USBH_Process+0x3b6>
      break;
 80071b0:	bf00      	nop
 80071b2:	e00a      	b.n	80071ca <USBH_Process+0x3b6>
    break;
 80071b4:	bf00      	nop
 80071b6:	e008      	b.n	80071ca <USBH_Process+0x3b6>
      break;
 80071b8:	bf00      	nop
 80071ba:	e006      	b.n	80071ca <USBH_Process+0x3b6>
      break;
 80071bc:	bf00      	nop
 80071be:	e004      	b.n	80071ca <USBH_Process+0x3b6>
      break;
 80071c0:	bf00      	nop
 80071c2:	e002      	b.n	80071ca <USBH_Process+0x3b6>
      break;
 80071c4:	bf00      	nop
 80071c6:	e000      	b.n	80071ca <USBH_Process+0x3b6>
      break;
 80071c8:	bf00      	nop
  }
  return USBH_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af04      	add	r7, sp, #16
 80071da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80071dc:	2301      	movs	r3, #1
 80071de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80071e0:	2301      	movs	r3, #1
 80071e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	785b      	ldrb	r3, [r3, #1]
 80071e8:	2b07      	cmp	r3, #7
 80071ea:	f200 81c1 	bhi.w	8007570 <USBH_HandleEnum+0x39c>
 80071ee:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <USBH_HandleEnum+0x20>)
 80071f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f4:	08007215 	.word	0x08007215
 80071f8:	080072d3 	.word	0x080072d3
 80071fc:	0800733d 	.word	0x0800733d
 8007200:	080073cb 	.word	0x080073cb
 8007204:	08007435 	.word	0x08007435
 8007208:	080074a5 	.word	0x080074a5
 800720c:	080074eb 	.word	0x080074eb
 8007210:	08007531 	.word	0x08007531
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007214:	2108      	movs	r1, #8
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fa50 	bl	80076bc <USBH_Get_DevDesc>
 800721c:	4603      	mov	r3, r0
 800721e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007220:	7bbb      	ldrb	r3, [r7, #14]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d130      	bne.n	8007288 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	7919      	ldrb	r1, [r3, #4]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800724a:	b292      	uxth	r2, r2
 800724c:	9202      	str	r2, [sp, #8]
 800724e:	2200      	movs	r2, #0
 8007250:	9201      	str	r2, [sp, #4]
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	4603      	mov	r3, r0
 8007256:	2280      	movs	r2, #128	; 0x80
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 ff77 	bl	800814c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	7959      	ldrb	r1, [r3, #5]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007272:	b292      	uxth	r2, r2
 8007274:	9202      	str	r2, [sp, #8]
 8007276:	2200      	movs	r2, #0
 8007278:	9201      	str	r2, [sp, #4]
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	4603      	mov	r3, r0
 800727e:	2200      	movs	r2, #0
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 ff63 	bl	800814c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007286:	e175      	b.n	8007574 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007288:	7bbb      	ldrb	r3, [r7, #14]
 800728a:	2b03      	cmp	r3, #3
 800728c:	f040 8172 	bne.w	8007574 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007296:	3301      	adds	r3, #1
 8007298:	b2da      	uxtb	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d903      	bls.n	80072b2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	220d      	movs	r2, #13
 80072ae:	701a      	strb	r2, [r3, #0]
      break;
 80072b0:	e160      	b.n	8007574 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	795b      	ldrb	r3, [r3, #5]
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 ff97 	bl	80081ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	791b      	ldrb	r3, [r3, #4]
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 ff91 	bl	80081ec <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	701a      	strb	r2, [r3, #0]
      break;
 80072d0:	e150      	b.n	8007574 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80072d2:	2112      	movs	r1, #18
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f9f1 	bl	80076bc <USBH_Get_DevDesc>
 80072da:	4603      	mov	r3, r0
 80072dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072de:	7bbb      	ldrb	r3, [r7, #14]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d103      	bne.n	80072ec <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072ea:	e145      	b.n	8007578 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072ec:	7bbb      	ldrb	r3, [r7, #14]
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	f040 8142 	bne.w	8007578 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072fa:	3301      	adds	r3, #1
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800730a:	2b03      	cmp	r3, #3
 800730c:	d903      	bls.n	8007316 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	220d      	movs	r2, #13
 8007312:	701a      	strb	r2, [r3, #0]
      break;
 8007314:	e130      	b.n	8007578 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	795b      	ldrb	r3, [r3, #5]
 800731a:	4619      	mov	r1, r3
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 ff65 	bl	80081ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	791b      	ldrb	r3, [r3, #4]
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 ff5f 	bl	80081ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	701a      	strb	r2, [r3, #0]
      break;
 800733a:	e11d      	b.n	8007578 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800733c:	2101      	movs	r1, #1
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fa68 	bl	8007814 <USBH_SetAddress>
 8007344:	4603      	mov	r3, r0
 8007346:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d132      	bne.n	80073b4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800734e:	2002      	movs	r0, #2
 8007350:	f001 fa42 	bl	80087d8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2203      	movs	r2, #3
 8007360:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	7919      	ldrb	r1, [r3, #4]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007376:	b292      	uxth	r2, r2
 8007378:	9202      	str	r2, [sp, #8]
 800737a:	2200      	movs	r2, #0
 800737c:	9201      	str	r2, [sp, #4]
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	4603      	mov	r3, r0
 8007382:	2280      	movs	r2, #128	; 0x80
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fee1 	bl	800814c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	7959      	ldrb	r1, [r3, #5]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800739e:	b292      	uxth	r2, r2
 80073a0:	9202      	str	r2, [sp, #8]
 80073a2:	2200      	movs	r2, #0
 80073a4:	9201      	str	r2, [sp, #4]
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	4603      	mov	r3, r0
 80073aa:	2200      	movs	r2, #0
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fecd 	bl	800814c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80073b2:	e0e3      	b.n	800757c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	f040 80e0 	bne.w	800757c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	220d      	movs	r2, #13
 80073c0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	705a      	strb	r2, [r3, #1]
      break;
 80073c8:	e0d8      	b.n	800757c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80073ca:	2109      	movs	r1, #9
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f99d 	bl	800770c <USBH_Get_CfgDesc>
 80073d2:	4603      	mov	r3, r0
 80073d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d103      	bne.n	80073e4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2204      	movs	r2, #4
 80073e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80073e2:	e0cd      	b.n	8007580 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073e4:	7bbb      	ldrb	r3, [r7, #14]
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	f040 80ca 	bne.w	8007580 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073f2:	3301      	adds	r3, #1
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007402:	2b03      	cmp	r3, #3
 8007404:	d903      	bls.n	800740e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	220d      	movs	r2, #13
 800740a:	701a      	strb	r2, [r3, #0]
      break;
 800740c:	e0b8      	b.n	8007580 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	795b      	ldrb	r3, [r3, #5]
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fee9 	bl	80081ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	791b      	ldrb	r3, [r3, #4]
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fee3 	bl	80081ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	701a      	strb	r2, [r3, #0]
      break;
 8007432:	e0a5      	b.n	8007580 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f965 	bl	800770c <USBH_Get_CfgDesc>
 8007442:	4603      	mov	r3, r0
 8007444:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007446:	7bbb      	ldrb	r3, [r7, #14]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d103      	bne.n	8007454 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2205      	movs	r2, #5
 8007450:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007452:	e097      	b.n	8007584 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	2b03      	cmp	r3, #3
 8007458:	f040 8094 	bne.w	8007584 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007462:	3301      	adds	r3, #1
 8007464:	b2da      	uxtb	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007472:	2b03      	cmp	r3, #3
 8007474:	d903      	bls.n	800747e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	220d      	movs	r2, #13
 800747a:	701a      	strb	r2, [r3, #0]
      break;
 800747c:	e082      	b.n	8007584 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	795b      	ldrb	r3, [r3, #5]
 8007482:	4619      	mov	r1, r3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 feb1 	bl	80081ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	791b      	ldrb	r3, [r3, #4]
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 feab 	bl	80081ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	701a      	strb	r2, [r3, #0]
      break;
 80074a2:	e06f      	b.n	8007584 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d019      	beq.n	80074e2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80074ba:	23ff      	movs	r3, #255	; 0xff
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f949 	bl	8007754 <USBH_Get_StringDesc>
 80074c2:	4603      	mov	r3, r0
 80074c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80074c6:	7bbb      	ldrb	r3, [r7, #14]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d103      	bne.n	80074d4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2206      	movs	r2, #6
 80074d0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80074d2:	e059      	b.n	8007588 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074d4:	7bbb      	ldrb	r3, [r7, #14]
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d156      	bne.n	8007588 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2206      	movs	r2, #6
 80074de:	705a      	strb	r2, [r3, #1]
      break;
 80074e0:	e052      	b.n	8007588 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2206      	movs	r2, #6
 80074e6:	705a      	strb	r2, [r3, #1]
      break;
 80074e8:	e04e      	b.n	8007588 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d019      	beq.n	8007528 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007500:	23ff      	movs	r3, #255	; 0xff
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f926 	bl	8007754 <USBH_Get_StringDesc>
 8007508:	4603      	mov	r3, r0
 800750a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800750c:	7bbb      	ldrb	r3, [r7, #14]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d103      	bne.n	800751a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2207      	movs	r2, #7
 8007516:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007518:	e038      	b.n	800758c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	2b03      	cmp	r3, #3
 800751e:	d135      	bne.n	800758c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2207      	movs	r2, #7
 8007524:	705a      	strb	r2, [r3, #1]
      break;
 8007526:	e031      	b.n	800758c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2207      	movs	r2, #7
 800752c:	705a      	strb	r2, [r3, #1]
      break;
 800752e:	e02d      	b.n	800758c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007536:	2b00      	cmp	r3, #0
 8007538:	d017      	beq.n	800756a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007546:	23ff      	movs	r3, #255	; 0xff
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f903 	bl	8007754 <USBH_Get_StringDesc>
 800754e:	4603      	mov	r3, r0
 8007550:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007552:	7bbb      	ldrb	r3, [r7, #14]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d102      	bne.n	800755e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800755c:	e018      	b.n	8007590 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800755e:	7bbb      	ldrb	r3, [r7, #14]
 8007560:	2b03      	cmp	r3, #3
 8007562:	d115      	bne.n	8007590 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	73fb      	strb	r3, [r7, #15]
      break;
 8007568:	e012      	b.n	8007590 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]
      break;
 800756e:	e00f      	b.n	8007590 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007570:	bf00      	nop
 8007572:	e00e      	b.n	8007592 <USBH_HandleEnum+0x3be>
      break;
 8007574:	bf00      	nop
 8007576:	e00c      	b.n	8007592 <USBH_HandleEnum+0x3be>
      break;
 8007578:	bf00      	nop
 800757a:	e00a      	b.n	8007592 <USBH_HandleEnum+0x3be>
      break;
 800757c:	bf00      	nop
 800757e:	e008      	b.n	8007592 <USBH_HandleEnum+0x3be>
      break;
 8007580:	bf00      	nop
 8007582:	e006      	b.n	8007592 <USBH_HandleEnum+0x3be>
      break;
 8007584:	bf00      	nop
 8007586:	e004      	b.n	8007592 <USBH_HandleEnum+0x3be>
      break;
 8007588:	bf00      	nop
 800758a:	e002      	b.n	8007592 <USBH_HandleEnum+0x3be>
      break;
 800758c:	bf00      	nop
 800758e:	e000      	b.n	8007592 <USBH_HandleEnum+0x3be>
      break;
 8007590:	bf00      	nop
  }
  return Status;
 8007592:	7bfb      	ldrb	r3, [r7, #15]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f804 	bl	80075de <USBH_HandleSof>
}
 80075d6:	bf00      	nop
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b0b      	cmp	r3, #11
 80075ee:	d10a      	bne.n	8007606 <USBH_HandleSof+0x28>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d005      	beq.n	8007606 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	4798      	blx	r3
  }
}
 8007606:	bf00      	nop
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800761e:	bf00      	nop
}
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800763a:	bf00      	nop
}
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 ff56 	bl	8008546 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	791b      	ldrb	r3, [r3, #4]
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fda3 	bl	80081ec <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	795b      	ldrb	r3, [r3, #5]
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fd9d 	bl	80081ec <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af02      	add	r7, sp, #8
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80076ce:	78fb      	ldrb	r3, [r7, #3]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	4613      	mov	r3, r2
 80076d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076da:	2100      	movs	r1, #0
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f864 	bl	80077aa <USBH_GetDescriptor>
 80076e2:	4603      	mov	r3, r0
 80076e4:	73fb      	strb	r3, [r7, #15]
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10a      	bne.n	8007702 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f203 3026 	addw	r0, r3, #806	; 0x326
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80076f8:	78fa      	ldrb	r2, [r7, #3]
 80076fa:	b292      	uxth	r2, r2
 80076fc:	4619      	mov	r1, r3
 80076fe:	f000 f918 	bl	8007932 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007702:	7bfb      	ldrb	r3, [r7, #15]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af02      	add	r7, sp, #8
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	331c      	adds	r3, #28
 800771c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800771e:	887b      	ldrh	r3, [r7, #2]
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007728:	2100      	movs	r1, #0
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f83d 	bl	80077aa <USBH_GetDescriptor>
 8007730:	4603      	mov	r3, r0
 8007732:	72fb      	strb	r3, [r7, #11]
 8007734:	7afb      	ldrb	r3, [r7, #11]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d107      	bne.n	800774a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007740:	887a      	ldrh	r2, [r7, #2]
 8007742:	68f9      	ldr	r1, [r7, #12]
 8007744:	4618      	mov	r0, r3
 8007746:	f000 f964 	bl	8007a12 <USBH_ParseCfgDesc>
  }

  return status;
 800774a:	7afb      	ldrb	r3, [r7, #11]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b088      	sub	sp, #32
 8007758:	af02      	add	r7, sp, #8
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	607a      	str	r2, [r7, #4]
 800775e:	461a      	mov	r2, r3
 8007760:	460b      	mov	r3, r1
 8007762:	72fb      	strb	r3, [r7, #11]
 8007764:	4613      	mov	r3, r2
 8007766:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007768:	7afb      	ldrb	r3, [r7, #11]
 800776a:	b29b      	uxth	r3, r3
 800776c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007770:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007778:	893b      	ldrh	r3, [r7, #8]
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	460b      	mov	r3, r1
 800777e:	2100      	movs	r1, #0
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f000 f812 	bl	80077aa <USBH_GetDescriptor>
 8007786:	4603      	mov	r3, r0
 8007788:	75fb      	strb	r3, [r7, #23]
 800778a:	7dfb      	ldrb	r3, [r7, #23]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d107      	bne.n	80077a0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007796:	893a      	ldrh	r2, [r7, #8]
 8007798:	6879      	ldr	r1, [r7, #4]
 800779a:	4618      	mov	r0, r3
 800779c:	f000 fa37 	bl	8007c0e <USBH_ParseStringDesc>
  }

  return status;
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	607b      	str	r3, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	72fb      	strb	r3, [r7, #11]
 80077b8:	4613      	mov	r3, r2
 80077ba:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	789b      	ldrb	r3, [r3, #2]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d11c      	bne.n	80077fe <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80077c4:	7afb      	ldrb	r3, [r7, #11]
 80077c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2206      	movs	r2, #6
 80077d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	893a      	ldrh	r2, [r7, #8]
 80077da:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80077dc:	893b      	ldrh	r3, [r7, #8]
 80077de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80077e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077e6:	d104      	bne.n	80077f2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f240 4209 	movw	r2, #1033	; 0x409
 80077ee:	829a      	strh	r2, [r3, #20]
 80077f0:	e002      	b.n	80077f8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	8b3a      	ldrh	r2, [r7, #24]
 80077fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80077fe:	8b3b      	ldrh	r3, [r7, #24]
 8007800:	461a      	mov	r2, r3
 8007802:	6879      	ldr	r1, [r7, #4]
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 fa50 	bl	8007caa <USBH_CtlReq>
 800780a:	4603      	mov	r3, r0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	789b      	ldrb	r3, [r3, #2]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d10f      	bne.n	8007848 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2205      	movs	r2, #5
 8007832:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007834:	78fb      	ldrb	r3, [r7, #3]
 8007836:	b29a      	uxth	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007848:	2200      	movs	r2, #0
 800784a:	2100      	movs	r1, #0
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fa2c 	bl	8007caa <USBH_CtlReq>
 8007852:	4603      	mov	r3, r0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	789b      	ldrb	r3, [r3, #2]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d10e      	bne.n	800788e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2209      	movs	r2, #9
 800787a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	887a      	ldrh	r2, [r7, #2]
 8007880:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800788e:	2200      	movs	r2, #0
 8007890:	2100      	movs	r1, #0
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fa09 	bl	8007caa <USBH_CtlReq>
 8007898:	4603      	mov	r3, r0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b082      	sub	sp, #8
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	460b      	mov	r3, r1
 80078ac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	789b      	ldrb	r3, [r3, #2]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d10f      	bne.n	80078d6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2203      	movs	r2, #3
 80078c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80078c2:	78fb      	ldrb	r3, [r7, #3]
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80078d6:	2200      	movs	r2, #0
 80078d8:	2100      	movs	r1, #0
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f9e5 	bl	8007caa <USBH_CtlReq>
 80078e0:	4603      	mov	r3, r0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	460b      	mov	r3, r1
 80078f4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	789b      	ldrb	r3, [r3, #2]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d10f      	bne.n	800791e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2202      	movs	r2, #2
 8007902:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007910:	78fb      	ldrb	r3, [r7, #3]
 8007912:	b29a      	uxth	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800791e:	2200      	movs	r2, #0
 8007920:	2100      	movs	r1, #0
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f9c1 	bl	8007caa <USBH_CtlReq>
 8007928:	4603      	mov	r3, r0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007932:	b480      	push	{r7}
 8007934:	b085      	sub	sp, #20
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	4613      	mov	r3, r2
 800793e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	781a      	ldrb	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	785a      	ldrb	r2, [r3, #1]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	3302      	adds	r3, #2
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	b29a      	uxth	r2, r3
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	3303      	adds	r3, #3
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	b29b      	uxth	r3, r3
 8007960:	021b      	lsls	r3, r3, #8
 8007962:	b29b      	uxth	r3, r3
 8007964:	4313      	orrs	r3, r2
 8007966:	b29a      	uxth	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	791a      	ldrb	r2, [r3, #4]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	795a      	ldrb	r2, [r3, #5]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	799a      	ldrb	r2, [r3, #6]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	79da      	ldrb	r2, [r3, #7]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800798c:	88fb      	ldrh	r3, [r7, #6]
 800798e:	2b08      	cmp	r3, #8
 8007990:	d939      	bls.n	8007a06 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	3308      	adds	r3, #8
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	b29a      	uxth	r2, r3
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	3309      	adds	r3, #9
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	021b      	lsls	r3, r3, #8
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	4313      	orrs	r3, r2
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	330a      	adds	r3, #10
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	330b      	adds	r3, #11
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	021b      	lsls	r3, r3, #8
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	4313      	orrs	r3, r2
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	330c      	adds	r3, #12
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	330d      	adds	r3, #13
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	b29b      	uxth	r3, r3
 80079da:	021b      	lsls	r3, r3, #8
 80079dc:	b29b      	uxth	r3, r3
 80079de:	4313      	orrs	r3, r2
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	7b9a      	ldrb	r2, [r3, #14]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	7bda      	ldrb	r2, [r3, #15]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	7c1a      	ldrb	r2, [r3, #16]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	7c5a      	ldrb	r2, [r3, #17]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	745a      	strb	r2, [r3, #17]
  }
}
 8007a06:	bf00      	nop
 8007a08:	3714      	adds	r7, #20
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b08a      	sub	sp, #40	; 0x28
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	60b9      	str	r1, [r7, #8]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	781a      	ldrb	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	785a      	ldrb	r2, [r3, #1]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	3302      	adds	r3, #2
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	3303      	adds	r3, #3
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	021b      	lsls	r3, r3, #8
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	791a      	ldrb	r2, [r3, #4]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	795a      	ldrb	r2, [r3, #5]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	799a      	ldrb	r2, [r3, #6]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	79da      	ldrb	r2, [r3, #7]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	7a1a      	ldrb	r2, [r3, #8]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007a88:	88fb      	ldrh	r3, [r7, #6]
 8007a8a:	2b09      	cmp	r3, #9
 8007a8c:	d95f      	bls.n	8007b4e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007a8e:	2309      	movs	r3, #9
 8007a90:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007a92:	2300      	movs	r3, #0
 8007a94:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a96:	e051      	b.n	8007b3c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a98:	f107 0316 	add.w	r3, r7, #22
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007aa0:	f000 f8e8 	bl	8007c74 <USBH_GetNextDesc>
 8007aa4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	785b      	ldrb	r3, [r3, #1]
 8007aaa:	2b04      	cmp	r3, #4
 8007aac:	d146      	bne.n	8007b3c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007aae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ab2:	221a      	movs	r2, #26
 8007ab4:	fb02 f303 	mul.w	r3, r2, r3
 8007ab8:	3308      	adds	r3, #8
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	4413      	add	r3, r2
 8007abe:	3302      	adds	r3, #2
 8007ac0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007ac2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ac4:	69f8      	ldr	r0, [r7, #28]
 8007ac6:	f000 f846 	bl	8007b56 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007aca:	2300      	movs	r3, #0
 8007acc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ad4:	e022      	b.n	8007b1c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ad6:	f107 0316 	add.w	r3, r7, #22
 8007ada:	4619      	mov	r1, r3
 8007adc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ade:	f000 f8c9 	bl	8007c74 <USBH_GetNextDesc>
 8007ae2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	785b      	ldrb	r3, [r3, #1]
 8007ae8:	2b05      	cmp	r3, #5
 8007aea:	d117      	bne.n	8007b1c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007aec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007af0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007af4:	3201      	adds	r2, #1
 8007af6:	00d2      	lsls	r2, r2, #3
 8007af8:	211a      	movs	r1, #26
 8007afa:	fb01 f303 	mul.w	r3, r1, r3
 8007afe:	4413      	add	r3, r2
 8007b00:	3308      	adds	r3, #8
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	4413      	add	r3, r2
 8007b06:	3304      	adds	r3, #4
 8007b08:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007b0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b0c:	69b8      	ldr	r0, [r7, #24]
 8007b0e:	f000 f851 	bl	8007bb4 <USBH_ParseEPDesc>
            ep_ix++;
 8007b12:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007b16:	3301      	adds	r3, #1
 8007b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	791b      	ldrb	r3, [r3, #4]
 8007b20:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d204      	bcs.n	8007b32 <USBH_ParseCfgDesc+0x120>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	885a      	ldrh	r2, [r3, #2]
 8007b2c:	8afb      	ldrh	r3, [r7, #22]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d8d1      	bhi.n	8007ad6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007b32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b36:	3301      	adds	r3, #1
 8007b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d804      	bhi.n	8007b4e <USBH_ParseCfgDesc+0x13c>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	885a      	ldrh	r2, [r3, #2]
 8007b48:	8afb      	ldrh	r3, [r7, #22]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d8a4      	bhi.n	8007a98 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007b4e:	bf00      	nop
 8007b50:	3728      	adds	r7, #40	; 0x28
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781a      	ldrb	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	785a      	ldrb	r2, [r3, #1]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	789a      	ldrb	r2, [r3, #2]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	78da      	ldrb	r2, [r3, #3]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	791a      	ldrb	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	795a      	ldrb	r2, [r3, #5]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	799a      	ldrb	r2, [r3, #6]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	79da      	ldrb	r2, [r3, #7]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	7a1a      	ldrb	r2, [r3, #8]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	721a      	strb	r2, [r3, #8]
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	781a      	ldrb	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	785a      	ldrb	r2, [r3, #1]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	789a      	ldrb	r2, [r3, #2]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	78da      	ldrb	r2, [r3, #3]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	3304      	adds	r3, #4
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	3305      	adds	r3, #5
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	021b      	lsls	r3, r3, #8
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	799a      	ldrb	r2, [r3, #6]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	719a      	strb	r2, [r3, #6]
}
 8007c02:	bf00      	nop
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b087      	sub	sp, #28
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	60f8      	str	r0, [r7, #12]
 8007c16:	60b9      	str	r1, [r7, #8]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d120      	bne.n	8007c68 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	1e9a      	subs	r2, r3, #2
 8007c2c:	88fb      	ldrh	r3, [r7, #6]
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	bf28      	it	cs
 8007c32:	4613      	movcs	r3, r2
 8007c34:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3302      	adds	r3, #2
 8007c3a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	82fb      	strh	r3, [r7, #22]
 8007c40:	e00b      	b.n	8007c5a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c42:	8afb      	ldrh	r3, [r7, #22]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	4413      	add	r3, r2
 8007c48:	781a      	ldrb	r2, [r3, #0]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	3301      	adds	r3, #1
 8007c52:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c54:	8afb      	ldrh	r3, [r7, #22]
 8007c56:	3302      	adds	r3, #2
 8007c58:	82fb      	strh	r3, [r7, #22]
 8007c5a:	8afa      	ldrh	r2, [r7, #22]
 8007c5c:	8abb      	ldrh	r3, [r7, #20]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d3ef      	bcc.n	8007c42 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2200      	movs	r2, #0
 8007c66:	701a      	strb	r2, [r3, #0]
  }
}
 8007c68:	bf00      	nop
 8007c6a:	371c      	adds	r7, #28
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	881a      	ldrh	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	4413      	add	r3, r2
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4413      	add	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b086      	sub	sp, #24
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	60b9      	str	r1, [r7, #8]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	789b      	ldrb	r3, [r3, #2]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d002      	beq.n	8007cca <USBH_CtlReq+0x20>
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d00f      	beq.n	8007ce8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007cc8:	e027      	b.n	8007d1a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	88fa      	ldrh	r2, [r7, #6]
 8007cd4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ce6:	e018      	b.n	8007d1a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 f81b 	bl	8007d24 <USBH_HandleControl>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <USBH_CtlReq+0x54>
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d106      	bne.n	8007d0c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2201      	movs	r2, #1
 8007d02:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	761a      	strb	r2, [r3, #24]
      break;
 8007d0a:	e005      	b.n	8007d18 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007d0c:	7dfb      	ldrb	r3, [r7, #23]
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d102      	bne.n	8007d18 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2201      	movs	r2, #1
 8007d16:	709a      	strb	r2, [r3, #2]
      break;
 8007d18:	bf00      	nop
  }
  return status;
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3718      	adds	r7, #24
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af02      	add	r7, sp, #8
 8007d2a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d30:	2300      	movs	r3, #0
 8007d32:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	7e1b      	ldrb	r3, [r3, #24]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	2b0a      	cmp	r3, #10
 8007d3c:	f200 8156 	bhi.w	8007fec <USBH_HandleControl+0x2c8>
 8007d40:	a201      	add	r2, pc, #4	; (adr r2, 8007d48 <USBH_HandleControl+0x24>)
 8007d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d46:	bf00      	nop
 8007d48:	08007d75 	.word	0x08007d75
 8007d4c:	08007d8f 	.word	0x08007d8f
 8007d50:	08007df9 	.word	0x08007df9
 8007d54:	08007e1f 	.word	0x08007e1f
 8007d58:	08007e57 	.word	0x08007e57
 8007d5c:	08007e81 	.word	0x08007e81
 8007d60:	08007ed3 	.word	0x08007ed3
 8007d64:	08007ef5 	.word	0x08007ef5
 8007d68:	08007f31 	.word	0x08007f31
 8007d6c:	08007f57 	.word	0x08007f57
 8007d70:	08007f95 	.word	0x08007f95
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f103 0110 	add.w	r1, r3, #16
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	795b      	ldrb	r3, [r3, #5]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f943 	bl	800800c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	761a      	strb	r2, [r3, #24]
      break;
 8007d8c:	e139      	b.n	8008002 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	795b      	ldrb	r3, [r3, #5]
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fcc5 	bl	8008724 <USBH_LL_GetURBState>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d9e:	7bbb      	ldrb	r3, [r7, #14]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d11e      	bne.n	8007de2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	7c1b      	ldrb	r3, [r3, #16]
 8007da8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007dac:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	8adb      	ldrh	r3, [r3, #22]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00a      	beq.n	8007dcc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007db6:	7b7b      	ldrb	r3, [r7, #13]
 8007db8:	2b80      	cmp	r3, #128	; 0x80
 8007dba:	d103      	bne.n	8007dc4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2203      	movs	r2, #3
 8007dc0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007dc2:	e115      	b.n	8007ff0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2205      	movs	r2, #5
 8007dc8:	761a      	strb	r2, [r3, #24]
      break;
 8007dca:	e111      	b.n	8007ff0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007dcc:	7b7b      	ldrb	r3, [r7, #13]
 8007dce:	2b80      	cmp	r3, #128	; 0x80
 8007dd0:	d103      	bne.n	8007dda <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2209      	movs	r2, #9
 8007dd6:	761a      	strb	r2, [r3, #24]
      break;
 8007dd8:	e10a      	b.n	8007ff0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2207      	movs	r2, #7
 8007dde:	761a      	strb	r2, [r3, #24]
      break;
 8007de0:	e106      	b.n	8007ff0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007de2:	7bbb      	ldrb	r3, [r7, #14]
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	d003      	beq.n	8007df0 <USBH_HandleControl+0xcc>
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	f040 8100 	bne.w	8007ff0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	220b      	movs	r2, #11
 8007df4:	761a      	strb	r2, [r3, #24]
      break;
 8007df6:	e0fb      	b.n	8007ff0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6899      	ldr	r1, [r3, #8]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	899a      	ldrh	r2, [r3, #12]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	791b      	ldrb	r3, [r3, #4]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f93a 	bl	800808a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2204      	movs	r2, #4
 8007e1a:	761a      	strb	r2, [r3, #24]
      break;
 8007e1c:	e0f1      	b.n	8008002 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	791b      	ldrb	r3, [r3, #4]
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fc7d 	bl	8008724 <USBH_LL_GetURBState>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e2e:	7bbb      	ldrb	r3, [r7, #14]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d102      	bne.n	8007e3a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2209      	movs	r2, #9
 8007e38:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007e3a:	7bbb      	ldrb	r3, [r7, #14]
 8007e3c:	2b05      	cmp	r3, #5
 8007e3e:	d102      	bne.n	8007e46 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007e40:	2303      	movs	r3, #3
 8007e42:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e44:	e0d6      	b.n	8007ff4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007e46:	7bbb      	ldrb	r3, [r7, #14]
 8007e48:	2b04      	cmp	r3, #4
 8007e4a:	f040 80d3 	bne.w	8007ff4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	220b      	movs	r2, #11
 8007e52:	761a      	strb	r2, [r3, #24]
      break;
 8007e54:	e0ce      	b.n	8007ff4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6899      	ldr	r1, [r3, #8]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	899a      	ldrh	r2, [r3, #12]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	795b      	ldrb	r3, [r3, #5]
 8007e62:	2001      	movs	r0, #1
 8007e64:	9000      	str	r0, [sp, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f8ea 	bl	8008040 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2206      	movs	r2, #6
 8007e7c:	761a      	strb	r2, [r3, #24]
      break;
 8007e7e:	e0c0      	b.n	8008002 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	795b      	ldrb	r3, [r3, #5]
 8007e84:	4619      	mov	r1, r3
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fc4c 	bl	8008724 <USBH_LL_GetURBState>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d103      	bne.n	8007e9e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2207      	movs	r2, #7
 8007e9a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e9c:	e0ac      	b.n	8007ff8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	2b05      	cmp	r3, #5
 8007ea2:	d105      	bne.n	8007eb0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	220c      	movs	r2, #12
 8007ea8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	73fb      	strb	r3, [r7, #15]
      break;
 8007eae:	e0a3      	b.n	8007ff8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d103      	bne.n	8007ebe <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2205      	movs	r2, #5
 8007eba:	761a      	strb	r2, [r3, #24]
      break;
 8007ebc:	e09c      	b.n	8007ff8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	2b04      	cmp	r3, #4
 8007ec2:	f040 8099 	bne.w	8007ff8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	220b      	movs	r2, #11
 8007eca:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007ecc:	2302      	movs	r3, #2
 8007ece:	73fb      	strb	r3, [r7, #15]
      break;
 8007ed0:	e092      	b.n	8007ff8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	791b      	ldrb	r3, [r3, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	2100      	movs	r1, #0
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f8d5 	bl	800808a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2208      	movs	r2, #8
 8007ef0:	761a      	strb	r2, [r3, #24]

      break;
 8007ef2:	e086      	b.n	8008002 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	791b      	ldrb	r3, [r3, #4]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fc12 	bl	8008724 <USBH_LL_GetURBState>
 8007f00:	4603      	mov	r3, r0
 8007f02:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d105      	bne.n	8007f16 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	220d      	movs	r2, #13
 8007f0e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007f14:	e072      	b.n	8007ffc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007f16:	7bbb      	ldrb	r3, [r7, #14]
 8007f18:	2b04      	cmp	r3, #4
 8007f1a:	d103      	bne.n	8007f24 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	220b      	movs	r2, #11
 8007f20:	761a      	strb	r2, [r3, #24]
      break;
 8007f22:	e06b      	b.n	8007ffc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	2b05      	cmp	r3, #5
 8007f28:	d168      	bne.n	8007ffc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f2e:	e065      	b.n	8007ffc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	795b      	ldrb	r3, [r3, #5]
 8007f34:	2201      	movs	r2, #1
 8007f36:	9200      	str	r2, [sp, #0]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f87f 	bl	8008040 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	220a      	movs	r2, #10
 8007f52:	761a      	strb	r2, [r3, #24]
      break;
 8007f54:	e055      	b.n	8008002 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	795b      	ldrb	r3, [r3, #5]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 fbe1 	bl	8008724 <USBH_LL_GetURBState>
 8007f62:	4603      	mov	r3, r0
 8007f64:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d105      	bne.n	8007f78 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	220d      	movs	r2, #13
 8007f74:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007f76:	e043      	b.n	8008000 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d103      	bne.n	8007f86 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2209      	movs	r2, #9
 8007f82:	761a      	strb	r2, [r3, #24]
      break;
 8007f84:	e03c      	b.n	8008000 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	2b04      	cmp	r3, #4
 8007f8a:	d139      	bne.n	8008000 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	220b      	movs	r2, #11
 8007f90:	761a      	strb	r2, [r3, #24]
      break;
 8007f92:	e035      	b.n	8008000 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	7e5b      	ldrb	r3, [r3, #25]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	765a      	strb	r2, [r3, #25]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	7e5b      	ldrb	r3, [r3, #25]
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d806      	bhi.n	8007fb6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007fb4:	e025      	b.n	8008002 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fbc:	2106      	movs	r1, #6
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	795b      	ldrb	r3, [r3, #5]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f90c 	bl	80081ec <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	791b      	ldrb	r3, [r3, #4]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f906 	bl	80081ec <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8007fea:	e00a      	b.n	8008002 <USBH_HandleControl+0x2de>

    default:
      break;
 8007fec:	bf00      	nop
 8007fee:	e008      	b.n	8008002 <USBH_HandleControl+0x2de>
      break;
 8007ff0:	bf00      	nop
 8007ff2:	e006      	b.n	8008002 <USBH_HandleControl+0x2de>
      break;
 8007ff4:	bf00      	nop
 8007ff6:	e004      	b.n	8008002 <USBH_HandleControl+0x2de>
      break;
 8007ff8:	bf00      	nop
 8007ffa:	e002      	b.n	8008002 <USBH_HandleControl+0x2de>
      break;
 8007ffc:	bf00      	nop
 8007ffe:	e000      	b.n	8008002 <USBH_HandleControl+0x2de>
      break;
 8008000:	bf00      	nop
  }

  return status;
 8008002:	7bfb      	ldrb	r3, [r7, #15]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b088      	sub	sp, #32
 8008010:	af04      	add	r7, sp, #16
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	4613      	mov	r3, r2
 8008018:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800801a:	79f9      	ldrb	r1, [r7, #7]
 800801c:	2300      	movs	r3, #0
 800801e:	9303      	str	r3, [sp, #12]
 8008020:	2308      	movs	r3, #8
 8008022:	9302      	str	r3, [sp, #8]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	9301      	str	r3, [sp, #4]
 8008028:	2300      	movs	r3, #0
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	2300      	movs	r3, #0
 800802e:	2200      	movs	r2, #0
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 fb46 	bl	80086c2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b088      	sub	sp, #32
 8008044:	af04      	add	r7, sp, #16
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	4611      	mov	r1, r2
 800804c:	461a      	mov	r2, r3
 800804e:	460b      	mov	r3, r1
 8008050:	80fb      	strh	r3, [r7, #6]
 8008052:	4613      	mov	r3, r2
 8008054:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008064:	7979      	ldrb	r1, [r7, #5]
 8008066:	7e3b      	ldrb	r3, [r7, #24]
 8008068:	9303      	str	r3, [sp, #12]
 800806a:	88fb      	ldrh	r3, [r7, #6]
 800806c:	9302      	str	r3, [sp, #8]
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	9301      	str	r3, [sp, #4]
 8008072:	2301      	movs	r3, #1
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	2300      	movs	r3, #0
 8008078:	2200      	movs	r2, #0
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 fb21 	bl	80086c2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b088      	sub	sp, #32
 800808e:	af04      	add	r7, sp, #16
 8008090:	60f8      	str	r0, [r7, #12]
 8008092:	60b9      	str	r1, [r7, #8]
 8008094:	4611      	mov	r1, r2
 8008096:	461a      	mov	r2, r3
 8008098:	460b      	mov	r3, r1
 800809a:	80fb      	strh	r3, [r7, #6]
 800809c:	4613      	mov	r3, r2
 800809e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80080a0:	7979      	ldrb	r1, [r7, #5]
 80080a2:	2300      	movs	r3, #0
 80080a4:	9303      	str	r3, [sp, #12]
 80080a6:	88fb      	ldrh	r3, [r7, #6]
 80080a8:	9302      	str	r3, [sp, #8]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	9301      	str	r3, [sp, #4]
 80080ae:	2301      	movs	r3, #1
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	2300      	movs	r3, #0
 80080b4:	2201      	movs	r2, #1
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 fb03 	bl	80086c2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80080bc:	2300      	movs	r3, #0

}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b088      	sub	sp, #32
 80080ca:	af04      	add	r7, sp, #16
 80080cc:	60f8      	str	r0, [r7, #12]
 80080ce:	60b9      	str	r1, [r7, #8]
 80080d0:	4611      	mov	r1, r2
 80080d2:	461a      	mov	r2, r3
 80080d4:	460b      	mov	r3, r1
 80080d6:	80fb      	strh	r3, [r7, #6]
 80080d8:	4613      	mov	r3, r2
 80080da:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80080e6:	2300      	movs	r3, #0
 80080e8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80080ea:	7979      	ldrb	r1, [r7, #5]
 80080ec:	7e3b      	ldrb	r3, [r7, #24]
 80080ee:	9303      	str	r3, [sp, #12]
 80080f0:	88fb      	ldrh	r3, [r7, #6]
 80080f2:	9302      	str	r3, [sp, #8]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	2301      	movs	r3, #1
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	2302      	movs	r3, #2
 80080fe:	2200      	movs	r2, #0
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 fade 	bl	80086c2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b088      	sub	sp, #32
 8008114:	af04      	add	r7, sp, #16
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	4611      	mov	r1, r2
 800811c:	461a      	mov	r2, r3
 800811e:	460b      	mov	r3, r1
 8008120:	80fb      	strh	r3, [r7, #6]
 8008122:	4613      	mov	r3, r2
 8008124:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008126:	7979      	ldrb	r1, [r7, #5]
 8008128:	2300      	movs	r3, #0
 800812a:	9303      	str	r3, [sp, #12]
 800812c:	88fb      	ldrh	r3, [r7, #6]
 800812e:	9302      	str	r3, [sp, #8]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	2301      	movs	r3, #1
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	2302      	movs	r3, #2
 800813a:	2201      	movs	r2, #1
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f000 fac0 	bl	80086c2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af04      	add	r7, sp, #16
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	4608      	mov	r0, r1
 8008156:	4611      	mov	r1, r2
 8008158:	461a      	mov	r2, r3
 800815a:	4603      	mov	r3, r0
 800815c:	70fb      	strb	r3, [r7, #3]
 800815e:	460b      	mov	r3, r1
 8008160:	70bb      	strb	r3, [r7, #2]
 8008162:	4613      	mov	r3, r2
 8008164:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008166:	7878      	ldrb	r0, [r7, #1]
 8008168:	78ba      	ldrb	r2, [r7, #2]
 800816a:	78f9      	ldrb	r1, [r7, #3]
 800816c:	8b3b      	ldrh	r3, [r7, #24]
 800816e:	9302      	str	r3, [sp, #8]
 8008170:	7d3b      	ldrb	r3, [r7, #20]
 8008172:	9301      	str	r3, [sp, #4]
 8008174:	7c3b      	ldrb	r3, [r7, #16]
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	4603      	mov	r3, r0
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fa53 	bl	8008626 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b082      	sub	sp, #8
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	460b      	mov	r3, r1
 8008194:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008196:	78fb      	ldrb	r3, [r7, #3]
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fa72 	bl	8008684 <USBH_LL_ClosePipe>

  return USBH_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b084      	sub	sp, #16
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	460b      	mov	r3, r1
 80081b4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f836 	bl	8008228 <USBH_GetFreePipe>
 80081bc:	4603      	mov	r3, r0
 80081be:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80081c0:	89fb      	ldrh	r3, [r7, #14]
 80081c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d00a      	beq.n	80081e0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80081ca:	78fa      	ldrb	r2, [r7, #3]
 80081cc:	89fb      	ldrh	r3, [r7, #14]
 80081ce:	f003 030f 	and.w	r3, r3, #15
 80081d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081d6:	6879      	ldr	r1, [r7, #4]
 80081d8:	33e0      	adds	r3, #224	; 0xe0
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	440b      	add	r3, r1
 80081de:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80081e0:	89fb      	ldrh	r3, [r7, #14]
 80081e2:	b2db      	uxtb	r3, r3
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80081f8:	78fb      	ldrb	r3, [r7, #3]
 80081fa:	2b0a      	cmp	r3, #10
 80081fc:	d80d      	bhi.n	800821a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80081fe:	78fb      	ldrb	r3, [r7, #3]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	33e0      	adds	r3, #224	; 0xe0
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	78fb      	ldrb	r3, [r7, #3]
 800820c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008210:	6879      	ldr	r1, [r7, #4]
 8008212:	33e0      	adds	r3, #224	; 0xe0
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	440b      	add	r3, r1
 8008218:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008230:	2300      	movs	r3, #0
 8008232:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008234:	2300      	movs	r3, #0
 8008236:	73fb      	strb	r3, [r7, #15]
 8008238:	e00f      	b.n	800825a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	33e0      	adds	r3, #224	; 0xe0
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d102      	bne.n	8008254 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	b29b      	uxth	r3, r3
 8008252:	e007      	b.n	8008264 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008254:	7bfb      	ldrb	r3, [r7, #15]
 8008256:	3301      	adds	r3, #1
 8008258:	73fb      	strb	r3, [r7, #15]
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	2b0a      	cmp	r3, #10
 800825e:	d9ec      	bls.n	800823a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008260:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008264:	4618      	mov	r0, r3
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008274:	2201      	movs	r2, #1
 8008276:	490e      	ldr	r1, [pc, #56]	; (80082b0 <MX_USB_HOST_Init+0x40>)
 8008278:	480e      	ldr	r0, [pc, #56]	; (80082b4 <MX_USB_HOST_Init+0x44>)
 800827a:	f7fe fca1 	bl	8006bc0 <USBH_Init>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008284:	f7f8 fce2 	bl	8000c4c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008288:	490b      	ldr	r1, [pc, #44]	; (80082b8 <MX_USB_HOST_Init+0x48>)
 800828a:	480a      	ldr	r0, [pc, #40]	; (80082b4 <MX_USB_HOST_Init+0x44>)
 800828c:	f7fe fd26 	bl	8006cdc <USBH_RegisterClass>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008296:	f7f8 fcd9 	bl	8000c4c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800829a:	4806      	ldr	r0, [pc, #24]	; (80082b4 <MX_USB_HOST_Init+0x44>)
 800829c:	f7fe fdaa 	bl	8006df4 <USBH_Start>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80082a6:	f7f8 fcd1 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80082aa:	bf00      	nop
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	080082d1 	.word	0x080082d1
 80082b4:	20000254 	.word	0x20000254
 80082b8:	2000000c 	.word	0x2000000c

080082bc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80082c0:	4802      	ldr	r0, [pc, #8]	; (80082cc <MX_USB_HOST_Process+0x10>)
 80082c2:	f7fe fda7 	bl	8006e14 <USBH_Process>
}
 80082c6:	bf00      	nop
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20000254 	.word	0x20000254

080082d0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	3b01      	subs	r3, #1
 80082e0:	2b04      	cmp	r3, #4
 80082e2:	d819      	bhi.n	8008318 <USBH_UserProcess+0x48>
 80082e4:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <USBH_UserProcess+0x1c>)
 80082e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ea:	bf00      	nop
 80082ec:	08008319 	.word	0x08008319
 80082f0:	08008309 	.word	0x08008309
 80082f4:	08008319 	.word	0x08008319
 80082f8:	08008311 	.word	0x08008311
 80082fc:	08008301 	.word	0x08008301
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008300:	4b09      	ldr	r3, [pc, #36]	; (8008328 <USBH_UserProcess+0x58>)
 8008302:	2203      	movs	r2, #3
 8008304:	701a      	strb	r2, [r3, #0]
  break;
 8008306:	e008      	b.n	800831a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008308:	4b07      	ldr	r3, [pc, #28]	; (8008328 <USBH_UserProcess+0x58>)
 800830a:	2202      	movs	r2, #2
 800830c:	701a      	strb	r2, [r3, #0]
  break;
 800830e:	e004      	b.n	800831a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008310:	4b05      	ldr	r3, [pc, #20]	; (8008328 <USBH_UserProcess+0x58>)
 8008312:	2201      	movs	r2, #1
 8008314:	701a      	strb	r2, [r3, #0]
  break;
 8008316:	e000      	b.n	800831a <USBH_UserProcess+0x4a>

  default:
  break;
 8008318:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	200000c0 	.word	0x200000c0

0800832c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b08a      	sub	sp, #40	; 0x28
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008334:	f107 0314 	add.w	r3, r7, #20
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	605a      	str	r2, [r3, #4]
 800833e:	609a      	str	r2, [r3, #8]
 8008340:	60da      	str	r2, [r3, #12]
 8008342:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800834c:	d147      	bne.n	80083de <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800834e:	2300      	movs	r3, #0
 8008350:	613b      	str	r3, [r7, #16]
 8008352:	4b25      	ldr	r3, [pc, #148]	; (80083e8 <HAL_HCD_MspInit+0xbc>)
 8008354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008356:	4a24      	ldr	r2, [pc, #144]	; (80083e8 <HAL_HCD_MspInit+0xbc>)
 8008358:	f043 0301 	orr.w	r3, r3, #1
 800835c:	6313      	str	r3, [r2, #48]	; 0x30
 800835e:	4b22      	ldr	r3, [pc, #136]	; (80083e8 <HAL_HCD_MspInit+0xbc>)
 8008360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	613b      	str	r3, [r7, #16]
 8008368:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800836a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800836e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008370:	2300      	movs	r3, #0
 8008372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008374:	2300      	movs	r3, #0
 8008376:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008378:	f107 0314 	add.w	r3, r7, #20
 800837c:	4619      	mov	r1, r3
 800837e:	481b      	ldr	r0, [pc, #108]	; (80083ec <HAL_HCD_MspInit+0xc0>)
 8008380:	f7f9 f8a8 	bl	80014d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008384:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800838a:	2302      	movs	r3, #2
 800838c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800838e:	2300      	movs	r3, #0
 8008390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008392:	2300      	movs	r3, #0
 8008394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008396:	230a      	movs	r3, #10
 8008398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800839a:	f107 0314 	add.w	r3, r7, #20
 800839e:	4619      	mov	r1, r3
 80083a0:	4812      	ldr	r0, [pc, #72]	; (80083ec <HAL_HCD_MspInit+0xc0>)
 80083a2:	f7f9 f897 	bl	80014d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80083a6:	4b10      	ldr	r3, [pc, #64]	; (80083e8 <HAL_HCD_MspInit+0xbc>)
 80083a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083aa:	4a0f      	ldr	r2, [pc, #60]	; (80083e8 <HAL_HCD_MspInit+0xbc>)
 80083ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b0:	6353      	str	r3, [r2, #52]	; 0x34
 80083b2:	2300      	movs	r3, #0
 80083b4:	60fb      	str	r3, [r7, #12]
 80083b6:	4b0c      	ldr	r3, [pc, #48]	; (80083e8 <HAL_HCD_MspInit+0xbc>)
 80083b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ba:	4a0b      	ldr	r2, [pc, #44]	; (80083e8 <HAL_HCD_MspInit+0xbc>)
 80083bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083c0:	6453      	str	r3, [r2, #68]	; 0x44
 80083c2:	4b09      	ldr	r3, [pc, #36]	; (80083e8 <HAL_HCD_MspInit+0xbc>)
 80083c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083ce:	2200      	movs	r2, #0
 80083d0:	2100      	movs	r1, #0
 80083d2:	2043      	movs	r0, #67	; 0x43
 80083d4:	f7f9 f847 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083d8:	2043      	movs	r0, #67	; 0x43
 80083da:	f7f9 f860 	bl	800149e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083de:	bf00      	nop
 80083e0:	3728      	adds	r7, #40	; 0x28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	40023800 	.word	0x40023800
 80083ec:	40020000 	.word	0x40020000

080083f0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083fe:	4618      	mov	r0, r3
 8008400:	f7ff f8db 	bl	80075ba <USBH_LL_IncTimer>
}
 8008404:	bf00      	nop
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800841a:	4618      	mov	r0, r3
 800841c:	f7ff f913 	bl	8007646 <USBH_LL_Connect>
}
 8008420:	bf00      	nop
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008436:	4618      	mov	r0, r3
 8008438:	f7ff f91c 	bl	8007674 <USBH_LL_Disconnect>
}
 800843c:	bf00      	nop
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	460b      	mov	r3, r1
 800844e:	70fb      	strb	r3, [r7, #3]
 8008450:	4613      	mov	r3, r2
 8008452:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800846e:	4618      	mov	r0, r3
 8008470:	f7ff f8cd 	bl	800760e <USBH_LL_PortEnabled>
}
 8008474:	bf00      	nop
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800848a:	4618      	mov	r0, r3
 800848c:	f7ff f8cd 	bl	800762a <USBH_LL_PortDisabled>
}
 8008490:	bf00      	nop
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d12a      	bne.n	8008500 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80084aa:	4a18      	ldr	r2, [pc, #96]	; (800850c <USBH_LL_Init+0x74>)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a15      	ldr	r2, [pc, #84]	; (800850c <USBH_LL_Init+0x74>)
 80084b6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084ba:	4b14      	ldr	r3, [pc, #80]	; (800850c <USBH_LL_Init+0x74>)
 80084bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80084c0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80084c2:	4b12      	ldr	r3, [pc, #72]	; (800850c <USBH_LL_Init+0x74>)
 80084c4:	2208      	movs	r2, #8
 80084c6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80084c8:	4b10      	ldr	r3, [pc, #64]	; (800850c <USBH_LL_Init+0x74>)
 80084ca:	2201      	movs	r2, #1
 80084cc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084ce:	4b0f      	ldr	r3, [pc, #60]	; (800850c <USBH_LL_Init+0x74>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80084d4:	4b0d      	ldr	r3, [pc, #52]	; (800850c <USBH_LL_Init+0x74>)
 80084d6:	2202      	movs	r2, #2
 80084d8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80084da:	4b0c      	ldr	r3, [pc, #48]	; (800850c <USBH_LL_Init+0x74>)
 80084dc:	2200      	movs	r2, #0
 80084de:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80084e0:	480a      	ldr	r0, [pc, #40]	; (800850c <USBH_LL_Init+0x74>)
 80084e2:	f7f9 f9e8 	bl	80018b6 <HAL_HCD_Init>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80084ec:	f7f8 fbae 	bl	8000c4c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80084f0:	4806      	ldr	r0, [pc, #24]	; (800850c <USBH_LL_Init+0x74>)
 80084f2:	f7f9 fdcc 	bl	800208e <HAL_HCD_GetCurrentFrame>
 80084f6:	4603      	mov	r3, r0
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7ff f84e 	bl	800759c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	2000062c 	.word	0x2000062c

08008510 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008526:	4618      	mov	r0, r3
 8008528:	f7f9 fd3b 	bl	8001fa2 <HAL_HCD_Start>
 800852c:	4603      	mov	r3, r0
 800852e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f95c 	bl	80087f0 <USBH_Get_USB_Status>
 8008538:	4603      	mov	r3, r0
 800853a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800853c:	7bbb      	ldrb	r3, [r7, #14]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800855c:	4618      	mov	r0, r3
 800855e:	f7f9 fd43 	bl	8001fe8 <HAL_HCD_Stop>
 8008562:	4603      	mov	r3, r0
 8008564:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	4618      	mov	r0, r3
 800856a:	f000 f941 	bl	80087f0 <USBH_Get_USB_Status>
 800856e:	4603      	mov	r3, r0
 8008570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008572:	7bbb      	ldrb	r3, [r7, #14]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008584:	2301      	movs	r3, #1
 8008586:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800858e:	4618      	mov	r0, r3
 8008590:	f7f9 fd8b 	bl	80020aa <HAL_HCD_GetCurrentSpeed>
 8008594:	4603      	mov	r3, r0
 8008596:	2b02      	cmp	r3, #2
 8008598:	d00c      	beq.n	80085b4 <USBH_LL_GetSpeed+0x38>
 800859a:	2b02      	cmp	r3, #2
 800859c:	d80d      	bhi.n	80085ba <USBH_LL_GetSpeed+0x3e>
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <USBH_LL_GetSpeed+0x2c>
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d003      	beq.n	80085ae <USBH_LL_GetSpeed+0x32>
 80085a6:	e008      	b.n	80085ba <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80085a8:	2300      	movs	r3, #0
 80085aa:	73fb      	strb	r3, [r7, #15]
    break;
 80085ac:	e008      	b.n	80085c0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80085ae:	2301      	movs	r3, #1
 80085b0:	73fb      	strb	r3, [r7, #15]
    break;
 80085b2:	e005      	b.n	80085c0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80085b4:	2302      	movs	r3, #2
 80085b6:	73fb      	strb	r3, [r7, #15]
    break;
 80085b8:	e002      	b.n	80085c0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80085ba:	2301      	movs	r3, #1
 80085bc:	73fb      	strb	r3, [r7, #15]
    break;
 80085be:	bf00      	nop
  }
  return  speed;
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b084      	sub	sp, #16
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7f9 fd1e 	bl	8002022 <HAL_HCD_ResetPort>
 80085e6:	4603      	mov	r3, r0
 80085e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085ea:	7bfb      	ldrb	r3, [r7, #15]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 f8ff 	bl	80087f0 <USBH_Get_USB_Status>
 80085f2:	4603      	mov	r3, r0
 80085f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008612:	78fa      	ldrb	r2, [r7, #3]
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f7f9 fd25 	bl	8002066 <HAL_HCD_HC_GetXferCount>
 800861c:	4603      	mov	r3, r0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008626:	b590      	push	{r4, r7, lr}
 8008628:	b089      	sub	sp, #36	; 0x24
 800862a:	af04      	add	r7, sp, #16
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	4608      	mov	r0, r1
 8008630:	4611      	mov	r1, r2
 8008632:	461a      	mov	r2, r3
 8008634:	4603      	mov	r3, r0
 8008636:	70fb      	strb	r3, [r7, #3]
 8008638:	460b      	mov	r3, r1
 800863a:	70bb      	strb	r3, [r7, #2]
 800863c:	4613      	mov	r3, r2
 800863e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800864e:	787c      	ldrb	r4, [r7, #1]
 8008650:	78ba      	ldrb	r2, [r7, #2]
 8008652:	78f9      	ldrb	r1, [r7, #3]
 8008654:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008656:	9302      	str	r3, [sp, #8]
 8008658:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800865c:	9301      	str	r3, [sp, #4]
 800865e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	4623      	mov	r3, r4
 8008666:	f7f9 f988 	bl	800197a <HAL_HCD_HC_Init>
 800866a:	4603      	mov	r3, r0
 800866c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	4618      	mov	r0, r3
 8008672:	f000 f8bd 	bl	80087f0 <USBH_Get_USB_Status>
 8008676:	4603      	mov	r3, r0
 8008678:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800867a:	7bbb      	ldrb	r3, [r7, #14]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	bd90      	pop	{r4, r7, pc}

08008684 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800869e:	78fa      	ldrb	r2, [r7, #3]
 80086a0:	4611      	mov	r1, r2
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7f9 f9f8 	bl	8001a98 <HAL_HCD_HC_Halt>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 f89e 	bl	80087f0 <USBH_Get_USB_Status>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80086c2:	b590      	push	{r4, r7, lr}
 80086c4:	b089      	sub	sp, #36	; 0x24
 80086c6:	af04      	add	r7, sp, #16
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	4608      	mov	r0, r1
 80086cc:	4611      	mov	r1, r2
 80086ce:	461a      	mov	r2, r3
 80086d0:	4603      	mov	r3, r0
 80086d2:	70fb      	strb	r3, [r7, #3]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70bb      	strb	r3, [r7, #2]
 80086d8:	4613      	mov	r3, r2
 80086da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80086ea:	787c      	ldrb	r4, [r7, #1]
 80086ec:	78ba      	ldrb	r2, [r7, #2]
 80086ee:	78f9      	ldrb	r1, [r7, #3]
 80086f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086f4:	9303      	str	r3, [sp, #12]
 80086f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086f8:	9302      	str	r3, [sp, #8]
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008702:	9300      	str	r3, [sp, #0]
 8008704:	4623      	mov	r3, r4
 8008706:	f7f9 f9eb 	bl	8001ae0 <HAL_HCD_HC_SubmitRequest>
 800870a:	4603      	mov	r3, r0
 800870c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	4618      	mov	r0, r3
 8008712:	f000 f86d 	bl	80087f0 <USBH_Get_USB_Status>
 8008716:	4603      	mov	r3, r0
 8008718:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800871a:	7bbb      	ldrb	r3, [r7, #14]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	bd90      	pop	{r4, r7, pc}

08008724 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008736:	78fa      	ldrb	r2, [r7, #3]
 8008738:	4611      	mov	r1, r2
 800873a:	4618      	mov	r0, r3
 800873c:	f7f9 fc7f 	bl	800203e <HAL_HCD_HC_GetURBState>
 8008740:	4603      	mov	r3, r0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	460b      	mov	r3, r1
 8008754:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800875c:	2b01      	cmp	r3, #1
 800875e:	d103      	bne.n	8008768 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	4618      	mov	r0, r3
 8008764:	f000 f870 	bl	8008848 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008768:	20c8      	movs	r0, #200	; 0xc8
 800876a:	f7f8 fd7d 	bl	8001268 <HAL_Delay>
  return USBH_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	70fb      	strb	r3, [r7, #3]
 8008784:	4613      	mov	r3, r2
 8008786:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800878e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008790:	78fb      	ldrb	r3, [r7, #3]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	212c      	movs	r1, #44	; 0x2c
 8008796:	fb01 f303 	mul.w	r3, r1, r3
 800879a:	4413      	add	r3, r2
 800879c:	333b      	adds	r3, #59	; 0x3b
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d009      	beq.n	80087b8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80087a4:	78fb      	ldrb	r3, [r7, #3]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	212c      	movs	r1, #44	; 0x2c
 80087aa:	fb01 f303 	mul.w	r3, r1, r3
 80087ae:	4413      	add	r3, r2
 80087b0:	3354      	adds	r3, #84	; 0x54
 80087b2:	78ba      	ldrb	r2, [r7, #2]
 80087b4:	701a      	strb	r2, [r3, #0]
 80087b6:	e008      	b.n	80087ca <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	212c      	movs	r1, #44	; 0x2c
 80087be:	fb01 f303 	mul.w	r3, r1, r3
 80087c2:	4413      	add	r3, r2
 80087c4:	3355      	adds	r3, #85	; 0x55
 80087c6:	78ba      	ldrb	r2, [r7, #2]
 80087c8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3714      	adds	r7, #20
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7f8 fd41 	bl	8001268 <HAL_Delay>
}
 80087e6:	bf00      	nop
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087fe:	79fb      	ldrb	r3, [r7, #7]
 8008800:	2b03      	cmp	r3, #3
 8008802:	d817      	bhi.n	8008834 <USBH_Get_USB_Status+0x44>
 8008804:	a201      	add	r2, pc, #4	; (adr r2, 800880c <USBH_Get_USB_Status+0x1c>)
 8008806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880a:	bf00      	nop
 800880c:	0800881d 	.word	0x0800881d
 8008810:	08008823 	.word	0x08008823
 8008814:	08008829 	.word	0x08008829
 8008818:	0800882f 	.word	0x0800882f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	73fb      	strb	r3, [r7, #15]
    break;
 8008820:	e00b      	b.n	800883a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008822:	2302      	movs	r3, #2
 8008824:	73fb      	strb	r3, [r7, #15]
    break;
 8008826:	e008      	b.n	800883a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008828:	2301      	movs	r3, #1
 800882a:	73fb      	strb	r3, [r7, #15]
    break;
 800882c:	e005      	b.n	800883a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800882e:	2302      	movs	r3, #2
 8008830:	73fb      	strb	r3, [r7, #15]
    break;
 8008832:	e002      	b.n	800883a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008834:	2302      	movs	r3, #2
 8008836:	73fb      	strb	r3, [r7, #15]
    break;
 8008838:	bf00      	nop
  }
  return usb_status;
 800883a:	7bfb      	ldrb	r3, [r7, #15]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	4603      	mov	r3, r0
 8008850:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008852:	79fb      	ldrb	r3, [r7, #7]
 8008854:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008856:	79fb      	ldrb	r3, [r7, #7]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d102      	bne.n	8008862 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800885c:	2300      	movs	r3, #0
 800885e:	73fb      	strb	r3, [r7, #15]
 8008860:	e001      	b.n	8008866 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008862:	2301      	movs	r3, #1
 8008864:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008866:	7bfb      	ldrb	r3, [r7, #15]
 8008868:	461a      	mov	r2, r3
 800886a:	2101      	movs	r1, #1
 800886c:	4803      	ldr	r0, [pc, #12]	; (800887c <MX_DriverVbusFS+0x34>)
 800886e:	f7f8 ffe5 	bl	800183c <HAL_GPIO_WritePin>
}
 8008872:	bf00      	nop
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	40020800 	.word	0x40020800

08008880 <__errno>:
 8008880:	4b01      	ldr	r3, [pc, #4]	; (8008888 <__errno+0x8>)
 8008882:	6818      	ldr	r0, [r3, #0]
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	2000002c 	.word	0x2000002c

0800888c <__libc_init_array>:
 800888c:	b570      	push	{r4, r5, r6, lr}
 800888e:	4d0d      	ldr	r5, [pc, #52]	; (80088c4 <__libc_init_array+0x38>)
 8008890:	4c0d      	ldr	r4, [pc, #52]	; (80088c8 <__libc_init_array+0x3c>)
 8008892:	1b64      	subs	r4, r4, r5
 8008894:	10a4      	asrs	r4, r4, #2
 8008896:	2600      	movs	r6, #0
 8008898:	42a6      	cmp	r6, r4
 800889a:	d109      	bne.n	80088b0 <__libc_init_array+0x24>
 800889c:	4d0b      	ldr	r5, [pc, #44]	; (80088cc <__libc_init_array+0x40>)
 800889e:	4c0c      	ldr	r4, [pc, #48]	; (80088d0 <__libc_init_array+0x44>)
 80088a0:	f000 f8f8 	bl	8008a94 <_init>
 80088a4:	1b64      	subs	r4, r4, r5
 80088a6:	10a4      	asrs	r4, r4, #2
 80088a8:	2600      	movs	r6, #0
 80088aa:	42a6      	cmp	r6, r4
 80088ac:	d105      	bne.n	80088ba <__libc_init_array+0x2e>
 80088ae:	bd70      	pop	{r4, r5, r6, pc}
 80088b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b4:	4798      	blx	r3
 80088b6:	3601      	adds	r6, #1
 80088b8:	e7ee      	b.n	8008898 <__libc_init_array+0xc>
 80088ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80088be:	4798      	blx	r3
 80088c0:	3601      	adds	r6, #1
 80088c2:	e7f2      	b.n	80088aa <__libc_init_array+0x1e>
 80088c4:	08008ad0 	.word	0x08008ad0
 80088c8:	08008ad0 	.word	0x08008ad0
 80088cc:	08008ad0 	.word	0x08008ad0
 80088d0:	08008ad4 	.word	0x08008ad4

080088d4 <malloc>:
 80088d4:	4b02      	ldr	r3, [pc, #8]	; (80088e0 <malloc+0xc>)
 80088d6:	4601      	mov	r1, r0
 80088d8:	6818      	ldr	r0, [r3, #0]
 80088da:	f000 b863 	b.w	80089a4 <_malloc_r>
 80088de:	bf00      	nop
 80088e0:	2000002c 	.word	0x2000002c

080088e4 <free>:
 80088e4:	4b02      	ldr	r3, [pc, #8]	; (80088f0 <free+0xc>)
 80088e6:	4601      	mov	r1, r0
 80088e8:	6818      	ldr	r0, [r3, #0]
 80088ea:	f000 b80b 	b.w	8008904 <_free_r>
 80088ee:	bf00      	nop
 80088f0:	2000002c 	.word	0x2000002c

080088f4 <memset>:
 80088f4:	4402      	add	r2, r0
 80088f6:	4603      	mov	r3, r0
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d100      	bne.n	80088fe <memset+0xa>
 80088fc:	4770      	bx	lr
 80088fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008902:	e7f9      	b.n	80088f8 <memset+0x4>

08008904 <_free_r>:
 8008904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008906:	2900      	cmp	r1, #0
 8008908:	d048      	beq.n	800899c <_free_r+0x98>
 800890a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800890e:	9001      	str	r0, [sp, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	f1a1 0404 	sub.w	r4, r1, #4
 8008916:	bfb8      	it	lt
 8008918:	18e4      	addlt	r4, r4, r3
 800891a:	f000 f8ad 	bl	8008a78 <__malloc_lock>
 800891e:	4a20      	ldr	r2, [pc, #128]	; (80089a0 <_free_r+0x9c>)
 8008920:	9801      	ldr	r0, [sp, #4]
 8008922:	6813      	ldr	r3, [r2, #0]
 8008924:	4615      	mov	r5, r2
 8008926:	b933      	cbnz	r3, 8008936 <_free_r+0x32>
 8008928:	6063      	str	r3, [r4, #4]
 800892a:	6014      	str	r4, [r2, #0]
 800892c:	b003      	add	sp, #12
 800892e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008932:	f000 b8a7 	b.w	8008a84 <__malloc_unlock>
 8008936:	42a3      	cmp	r3, r4
 8008938:	d90b      	bls.n	8008952 <_free_r+0x4e>
 800893a:	6821      	ldr	r1, [r4, #0]
 800893c:	1862      	adds	r2, r4, r1
 800893e:	4293      	cmp	r3, r2
 8008940:	bf04      	itt	eq
 8008942:	681a      	ldreq	r2, [r3, #0]
 8008944:	685b      	ldreq	r3, [r3, #4]
 8008946:	6063      	str	r3, [r4, #4]
 8008948:	bf04      	itt	eq
 800894a:	1852      	addeq	r2, r2, r1
 800894c:	6022      	streq	r2, [r4, #0]
 800894e:	602c      	str	r4, [r5, #0]
 8008950:	e7ec      	b.n	800892c <_free_r+0x28>
 8008952:	461a      	mov	r2, r3
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	b10b      	cbz	r3, 800895c <_free_r+0x58>
 8008958:	42a3      	cmp	r3, r4
 800895a:	d9fa      	bls.n	8008952 <_free_r+0x4e>
 800895c:	6811      	ldr	r1, [r2, #0]
 800895e:	1855      	adds	r5, r2, r1
 8008960:	42a5      	cmp	r5, r4
 8008962:	d10b      	bne.n	800897c <_free_r+0x78>
 8008964:	6824      	ldr	r4, [r4, #0]
 8008966:	4421      	add	r1, r4
 8008968:	1854      	adds	r4, r2, r1
 800896a:	42a3      	cmp	r3, r4
 800896c:	6011      	str	r1, [r2, #0]
 800896e:	d1dd      	bne.n	800892c <_free_r+0x28>
 8008970:	681c      	ldr	r4, [r3, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	6053      	str	r3, [r2, #4]
 8008976:	4421      	add	r1, r4
 8008978:	6011      	str	r1, [r2, #0]
 800897a:	e7d7      	b.n	800892c <_free_r+0x28>
 800897c:	d902      	bls.n	8008984 <_free_r+0x80>
 800897e:	230c      	movs	r3, #12
 8008980:	6003      	str	r3, [r0, #0]
 8008982:	e7d3      	b.n	800892c <_free_r+0x28>
 8008984:	6825      	ldr	r5, [r4, #0]
 8008986:	1961      	adds	r1, r4, r5
 8008988:	428b      	cmp	r3, r1
 800898a:	bf04      	itt	eq
 800898c:	6819      	ldreq	r1, [r3, #0]
 800898e:	685b      	ldreq	r3, [r3, #4]
 8008990:	6063      	str	r3, [r4, #4]
 8008992:	bf04      	itt	eq
 8008994:	1949      	addeq	r1, r1, r5
 8008996:	6021      	streq	r1, [r4, #0]
 8008998:	6054      	str	r4, [r2, #4]
 800899a:	e7c7      	b.n	800892c <_free_r+0x28>
 800899c:	b003      	add	sp, #12
 800899e:	bd30      	pop	{r4, r5, pc}
 80089a0:	200000c4 	.word	0x200000c4

080089a4 <_malloc_r>:
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a6:	1ccd      	adds	r5, r1, #3
 80089a8:	f025 0503 	bic.w	r5, r5, #3
 80089ac:	3508      	adds	r5, #8
 80089ae:	2d0c      	cmp	r5, #12
 80089b0:	bf38      	it	cc
 80089b2:	250c      	movcc	r5, #12
 80089b4:	2d00      	cmp	r5, #0
 80089b6:	4606      	mov	r6, r0
 80089b8:	db01      	blt.n	80089be <_malloc_r+0x1a>
 80089ba:	42a9      	cmp	r1, r5
 80089bc:	d903      	bls.n	80089c6 <_malloc_r+0x22>
 80089be:	230c      	movs	r3, #12
 80089c0:	6033      	str	r3, [r6, #0]
 80089c2:	2000      	movs	r0, #0
 80089c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089c6:	f000 f857 	bl	8008a78 <__malloc_lock>
 80089ca:	4921      	ldr	r1, [pc, #132]	; (8008a50 <_malloc_r+0xac>)
 80089cc:	680a      	ldr	r2, [r1, #0]
 80089ce:	4614      	mov	r4, r2
 80089d0:	b99c      	cbnz	r4, 80089fa <_malloc_r+0x56>
 80089d2:	4f20      	ldr	r7, [pc, #128]	; (8008a54 <_malloc_r+0xb0>)
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	b923      	cbnz	r3, 80089e2 <_malloc_r+0x3e>
 80089d8:	4621      	mov	r1, r4
 80089da:	4630      	mov	r0, r6
 80089dc:	f000 f83c 	bl	8008a58 <_sbrk_r>
 80089e0:	6038      	str	r0, [r7, #0]
 80089e2:	4629      	mov	r1, r5
 80089e4:	4630      	mov	r0, r6
 80089e6:	f000 f837 	bl	8008a58 <_sbrk_r>
 80089ea:	1c43      	adds	r3, r0, #1
 80089ec:	d123      	bne.n	8008a36 <_malloc_r+0x92>
 80089ee:	230c      	movs	r3, #12
 80089f0:	6033      	str	r3, [r6, #0]
 80089f2:	4630      	mov	r0, r6
 80089f4:	f000 f846 	bl	8008a84 <__malloc_unlock>
 80089f8:	e7e3      	b.n	80089c2 <_malloc_r+0x1e>
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	1b5b      	subs	r3, r3, r5
 80089fe:	d417      	bmi.n	8008a30 <_malloc_r+0x8c>
 8008a00:	2b0b      	cmp	r3, #11
 8008a02:	d903      	bls.n	8008a0c <_malloc_r+0x68>
 8008a04:	6023      	str	r3, [r4, #0]
 8008a06:	441c      	add	r4, r3
 8008a08:	6025      	str	r5, [r4, #0]
 8008a0a:	e004      	b.n	8008a16 <_malloc_r+0x72>
 8008a0c:	6863      	ldr	r3, [r4, #4]
 8008a0e:	42a2      	cmp	r2, r4
 8008a10:	bf0c      	ite	eq
 8008a12:	600b      	streq	r3, [r1, #0]
 8008a14:	6053      	strne	r3, [r2, #4]
 8008a16:	4630      	mov	r0, r6
 8008a18:	f000 f834 	bl	8008a84 <__malloc_unlock>
 8008a1c:	f104 000b 	add.w	r0, r4, #11
 8008a20:	1d23      	adds	r3, r4, #4
 8008a22:	f020 0007 	bic.w	r0, r0, #7
 8008a26:	1ac2      	subs	r2, r0, r3
 8008a28:	d0cc      	beq.n	80089c4 <_malloc_r+0x20>
 8008a2a:	1a1b      	subs	r3, r3, r0
 8008a2c:	50a3      	str	r3, [r4, r2]
 8008a2e:	e7c9      	b.n	80089c4 <_malloc_r+0x20>
 8008a30:	4622      	mov	r2, r4
 8008a32:	6864      	ldr	r4, [r4, #4]
 8008a34:	e7cc      	b.n	80089d0 <_malloc_r+0x2c>
 8008a36:	1cc4      	adds	r4, r0, #3
 8008a38:	f024 0403 	bic.w	r4, r4, #3
 8008a3c:	42a0      	cmp	r0, r4
 8008a3e:	d0e3      	beq.n	8008a08 <_malloc_r+0x64>
 8008a40:	1a21      	subs	r1, r4, r0
 8008a42:	4630      	mov	r0, r6
 8008a44:	f000 f808 	bl	8008a58 <_sbrk_r>
 8008a48:	3001      	adds	r0, #1
 8008a4a:	d1dd      	bne.n	8008a08 <_malloc_r+0x64>
 8008a4c:	e7cf      	b.n	80089ee <_malloc_r+0x4a>
 8008a4e:	bf00      	nop
 8008a50:	200000c4 	.word	0x200000c4
 8008a54:	200000c8 	.word	0x200000c8

08008a58 <_sbrk_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4d06      	ldr	r5, [pc, #24]	; (8008a74 <_sbrk_r+0x1c>)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	602b      	str	r3, [r5, #0]
 8008a64:	f7f8 fb1c 	bl	80010a0 <_sbrk>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_sbrk_r+0x1a>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_sbrk_r+0x1a>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	20000930 	.word	0x20000930

08008a78 <__malloc_lock>:
 8008a78:	4801      	ldr	r0, [pc, #4]	; (8008a80 <__malloc_lock+0x8>)
 8008a7a:	f000 b809 	b.w	8008a90 <__retarget_lock_acquire_recursive>
 8008a7e:	bf00      	nop
 8008a80:	20000938 	.word	0x20000938

08008a84 <__malloc_unlock>:
 8008a84:	4801      	ldr	r0, [pc, #4]	; (8008a8c <__malloc_unlock+0x8>)
 8008a86:	f000 b804 	b.w	8008a92 <__retarget_lock_release_recursive>
 8008a8a:	bf00      	nop
 8008a8c:	20000938 	.word	0x20000938

08008a90 <__retarget_lock_acquire_recursive>:
 8008a90:	4770      	bx	lr

08008a92 <__retarget_lock_release_recursive>:
 8008a92:	4770      	bx	lr

08008a94 <_init>:
 8008a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a96:	bf00      	nop
 8008a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a9a:	bc08      	pop	{r3}
 8008a9c:	469e      	mov	lr, r3
 8008a9e:	4770      	bx	lr

08008aa0 <_fini>:
 8008aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa2:	bf00      	nop
 8008aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa6:	bc08      	pop	{r3}
 8008aa8:	469e      	mov	lr, r3
 8008aaa:	4770      	bx	lr
